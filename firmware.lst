
.pio/build/genericSTM32F103CB/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c84  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text.align   00000004  08008c84  08008c84  00018c84  2**0
                  ALLOC, CODE
  2 .ARM.exidx    00000008  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ca8  20000000  08008c90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rodata       000012f8  08009938  08009938  00029938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .bss          00000f98  20000ca8  20000ca8  00030ca8  2**3
                  ALLOC
  6 .debug_frame  00000540  00000000  00000000  0002ac30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .comment      0000007e  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 00000029  00000000  00000000  0002b1ee  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__stm32_vector_table>:
 8000000:	00 50 00 20 81 03 00 08 81 0b 00 08 85 0b 00 08     .P. ............
 8000010:	89 0b 00 08 8d 0b 00 08 91 0b 00 08 e9 13 00 08     ................
 8000020:	e9 13 00 08 e9 13 00 08 e9 13 00 08 e9 13 00 08     ................
 8000030:	e9 13 00 08 e9 13 00 08 e9 13 00 08 fd 13 00 08     ................
 8000040:	e9 13 00 08 e9 13 00 08 e9 13 00 08 e9 13 00 08     ................
 8000050:	e9 13 00 08 e9 13 00 08 d9 0c 00 08 f9 0c 00 08     ................
 8000060:	19 0d 00 08 39 0d 00 08 59 0d 00 08 c5 0a 00 08     ....9...Y.......
 8000070:	dd 0a 00 08 f5 0a 00 08 11 0b 00 08 2d 0b 00 08     ............-...
 8000080:	49 0b 00 08 65 0b 00 08 b9 08 00 08 e9 13 00 08     I...e...........
 8000090:	01 1d 00 08 e9 13 00 08 e9 13 00 08 79 0d 00 08     ............y...
 80000a0:	0d 16 00 08 31 16 00 08 55 16 00 08 8d 16 00 08     ....1...U.......
 80000b0:	e1 16 00 08 51 17 00 08 c1 17 00 08 b1 10 00 08     ....Q...........
 80000c0:	c9 10 00 08 bd 10 00 08 d5 10 00 08 e9 13 00 08     ................
 80000d0:	e9 13 00 08 c5 1a 00 08 15 1b 00 08 65 1b 00 08     ............e...
 80000e0:	c1 0d 00 08 e9 13 00 08 e9 13 00 08                 ............

080000ec <__do_global_dtors_aux>:
 80000ec:	b510      	push	{r4, lr}
 80000ee:	4c05      	ldr	r4, [pc, #20]	; (8000104 <__do_global_dtors_aux+0x18>)
 80000f0:	7823      	ldrb	r3, [r4, #0]
 80000f2:	b933      	cbnz	r3, 8000102 <__do_global_dtors_aux+0x16>
 80000f4:	4b04      	ldr	r3, [pc, #16]	; (8000108 <__do_global_dtors_aux+0x1c>)
 80000f6:	b113      	cbz	r3, 80000fe <__do_global_dtors_aux+0x12>
 80000f8:	4804      	ldr	r0, [pc, #16]	; (800010c <__do_global_dtors_aux+0x20>)
 80000fa:	f3af 8000 	nop.w
 80000fe:	2301      	movs	r3, #1
 8000100:	7023      	strb	r3, [r4, #0]
 8000102:	bd10      	pop	{r4, pc}
 8000104:	20000ca8 	.word	0x20000ca8
 8000108:	00000000 	.word	0x00000000
 800010c:	08008c44 	.word	0x08008c44

08000110 <frame_dummy>:
 8000110:	b508      	push	{r3, lr}
 8000112:	4b03      	ldr	r3, [pc, #12]	; (8000120 <frame_dummy+0x10>)
 8000114:	b11b      	cbz	r3, 800011e <frame_dummy+0xe>
 8000116:	4903      	ldr	r1, [pc, #12]	; (8000124 <frame_dummy+0x14>)
 8000118:	4803      	ldr	r0, [pc, #12]	; (8000128 <frame_dummy+0x18>)
 800011a:	f3af 8000 	nop.w
 800011e:	bd08      	pop	{r3, pc}
 8000120:	00000000 	.word	0x00000000
 8000124:	20000cac 	.word	0x20000cac
 8000128:	08008c44 	.word	0x08008c44

0800012c <boardInit()>:
 800012c:	4770      	bx	lr
	...

08000130 <_GLOBAL__sub_I__Z9boardInitv>:
 8000130:	490b      	ldr	r1, [pc, #44]	; (8000160 <_GLOBAL__sub_I__Z9boardInitv+0x30>)
 8000132:	b510      	push	{r4, lr}
 8000134:	230a      	movs	r3, #10
 8000136:	2209      	movs	r2, #9
 8000138:	6809      	ldr	r1, [r1, #0]
 800013a:	480a      	ldr	r0, [pc, #40]	; (8000164 <_GLOBAL__sub_I__Z9boardInitv+0x34>)
 800013c:	f000 f9d4 	bl	80004e8 <HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)>
 8000140:	4909      	ldr	r1, [pc, #36]	; (8000168 <_GLOBAL__sub_I__Z9boardInitv+0x38>)
 8000142:	2303      	movs	r3, #3
 8000144:	2202      	movs	r2, #2
 8000146:	6809      	ldr	r1, [r1, #0]
 8000148:	4808      	ldr	r0, [pc, #32]	; (800016c <_GLOBAL__sub_I__Z9boardInitv+0x3c>)
 800014a:	f000 f9cd 	bl	80004e8 <HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)>
 800014e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000152:	4907      	ldr	r1, [pc, #28]	; (8000170 <_GLOBAL__sub_I__Z9boardInitv+0x40>)
 8000154:	231b      	movs	r3, #27
 8000156:	221a      	movs	r2, #26
 8000158:	6809      	ldr	r1, [r1, #0]
 800015a:	4806      	ldr	r0, [pc, #24]	; (8000174 <_GLOBAL__sub_I__Z9boardInitv+0x44>)
 800015c:	f000 b9c4 	b.w	80004e8 <HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)>
 8000160:	200001bc 	.word	0x200001bc
 8000164:	20000cc4 	.word	0x20000cc4
 8000168:	200001c0 	.word	0x200001c0
 800016c:	20000cdc 	.word	0x20000cdc
 8000170:	200001c4 	.word	0x200001c4
 8000174:	20000cf4 	.word	0x20000cf4

08000178 <adc_default_config(adc_dev*)>:
 8000178:	b510      	push	{r4, lr}
 800017a:	4604      	mov	r4, r0
 800017c:	f000 fbec 	bl	8000958 <adc_enable_single_swstart>
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <adc_default_config(adc_dev*)+0x18>)
 8000182:	4620      	mov	r0, r4
 8000184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000188:	7819      	ldrb	r1, [r3, #0]
 800018a:	f000 bb7f 	b.w	800088c <adc_set_sample_rate>
 800018e:	bf00      	nop
 8000190:	20000016 	.word	0x20000016

08000194 <timer_default_config(timer_dev*)>:
 8000194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000198:	4605      	mov	r5, r0
 800019a:	6804      	ldr	r4, [r0, #0]
 800019c:	f001 f97a 	bl	8001494 <timer_init>
 80001a0:	2300      	movs	r3, #0
 80001a2:	6829      	ldr	r1, [r5, #0]
 80001a4:	014a      	lsls	r2, r1, #5
 80001a6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	2280      	movs	r2, #128	; 0x80
 80001ae:	6022      	str	r2, [r4, #0]
 80001b0:	2201      	movs	r2, #1
 80001b2:	62a2      	str	r2, [r4, #40]	; 0x28
 80001b4:	6123      	str	r3, [r4, #16]
 80001b6:	60e3      	str	r3, [r4, #12]
 80001b8:	796b      	ldrb	r3, [r5, #5]
 80001ba:	6162      	str	r2, [r4, #20]
 80001bc:	b173      	cbz	r3, 80001dc <timer_default_config(timer_dev*)+0x48>
 80001be:	4293      	cmp	r3, r2
 80001c0:	d00f      	beq.n	80001e2 <timer_default_config(timer_dev*)+0x4e>
 80001c2:	2101      	movs	r1, #1
 80001c4:	682b      	ldr	r3, [r5, #0]
 80001c6:	015a      	lsls	r2, r3, #5
 80001c8:	015b      	lsls	r3, r3, #5
 80001ca:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80001ce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80001d2:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
 80001d6:	6019      	str	r1, [r3, #0]
 80001d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80001dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001e0:	6463      	str	r3, [r4, #68]	; 0x44
 80001e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001e6:	2400      	movs	r4, #0
 80001e8:	f648 77ff 	movw	r7, #36863	; 0x8fff
 80001ec:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80001f0:	f04f 0968 	mov.w	r9, #104	; 0x68
 80001f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80001f6:	1c66      	adds	r6, r4, #1
 80001f8:	fa5f fa86 	uxtb.w	sl, r6
 80001fc:	4651      	mov	r1, sl
 80001fe:	4628      	mov	r0, r5
 8000200:	f001 f95c 	bl	80014bc <timer_has_cc_channel>
 8000204:	b1b0      	cbz	r0, 8000234 <timer_default_config(timer_dev*)+0xa0>
 8000206:	682a      	ldr	r2, [r5, #0]
 8000208:	f01a 0f01 	tst.w	sl, #1
 800020c:	f102 0334 	add.w	r3, r2, #52	; 0x34
 8000210:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8000214:	bf14      	ite	ne
 8000216:	2300      	movne	r3, #0
 8000218:	2308      	moveq	r3, #8
 800021a:	3218      	adds	r2, #24
 800021c:	1064      	asrs	r4, r4, #1
 800021e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8000222:	fa08 f003 	lsl.w	r0, r8, r3
 8000226:	ea21 0100 	bic.w	r1, r1, r0
 800022a:	fa09 f303 	lsl.w	r3, r9, r3
 800022e:	430b      	orrs	r3, r1
 8000230:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000234:	2e04      	cmp	r6, #4
 8000236:	4634      	mov	r4, r6
 8000238:	d1dd      	bne.n	80001f6 <timer_default_config(timer_dev*)+0x62>
 800023a:	e7c2      	b.n	80001c2 <timer_default_config(timer_dev*)+0x2e>

0800023c <init()>:
 800023c:	b538      	push	{r3, r4, r5, lr}
 800023e:	2500      	movs	r5, #0
 8000240:	4a26      	ldr	r2, [pc, #152]	; (80002dc <init()+0xa0>)
 8000242:	4c27      	ldr	r4, [pc, #156]	; (80002e0 <init()+0xa4>)
 8000244:	6813      	ldr	r3, [r2, #0]
 8000246:	2002      	movs	r0, #2
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	f000 fde5 	bl	8000e1c <flash_set_latency>
 8000252:	2000      	movs	r0, #0
 8000254:	f000 ffa0 	bl	8001198 <rcc_turn_on_clk>
 8000258:	6065      	str	r5, [r4, #4]
 800025a:	6823      	ldr	r3, [r4, #0]
 800025c:	2018      	movs	r0, #24
 800025e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000262:	6023      	str	r3, [r4, #0]
 8000264:	f000 ffa4 	bl	80011b0 <rcc_turn_off_clk>
 8000268:	2010      	movs	r0, #16
 800026a:	f000 ffa1 	bl	80011b0 <rcc_turn_off_clk>
 800026e:	f000 f843 	bl	80002f8 <wirish::priv::board_reset_pll()>
 8000272:	60a5      	str	r5, [r4, #8]
 8000274:	2010      	movs	r0, #16
 8000276:	f000 ff8f 	bl	8001198 <rcc_turn_on_clk>
 800027a:	2010      	movs	r0, #16
 800027c:	f000 ffb5 	bl	80011ea <rcc_is_clk_ready>
 8000280:	2800      	cmp	r0, #0
 8000282:	d0fa      	beq.n	800027a <init()+0x3e>
 8000284:	f000 f839 	bl	80002fa <wirish::priv::board_setup_clock_prescalers()>
 8000288:	4816      	ldr	r0, [pc, #88]	; (80002e4 <init()+0xa8>)
 800028a:	f000 ffbb 	bl	8001204 <rcc_configure_pll>
 800028e:	2018      	movs	r0, #24
 8000290:	f000 ff82 	bl	8001198 <rcc_turn_on_clk>
 8000294:	2018      	movs	r0, #24
 8000296:	f000 ffa8 	bl	80011ea <rcc_is_clk_ready>
 800029a:	2800      	cmp	r0, #0
 800029c:	d0fa      	beq.n	8000294 <init()+0x58>
 800029e:	2002      	movs	r0, #2
 80002a0:	f000 ff6a 	bl	8001178 <rcc_switch_sysclk>
 80002a4:	2100      	movs	r1, #0
 80002a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80002aa:	f000 ff3b 	bl	8001124 <nvic_init>
 80002ae:	480e      	ldr	r0, [pc, #56]	; (80002e8 <init()+0xac>)
 80002b0:	f001 f89c 	bl	80013ec <systick_init>
 80002b4:	f000 f838 	bl	8000328 <wirish::priv::board_setup_gpio()>
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <init()+0xb0>)
 80002ba:	8818      	ldrh	r0, [r3, #0]
 80002bc:	f000 fb38 	bl	8000930 <adc_set_prescaler>
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <init()+0xb4>)
 80002c2:	f000 fb39 	bl	8000938 <adc_foreach>
 80002c6:	480b      	ldr	r0, [pc, #44]	; (80002f4 <init()+0xb8>)
 80002c8:	f001 f8ce 	bl	8001468 <timer_foreach>
 80002cc:	f000 f82e 	bl	800032c <wirish::priv::board_setup_usb()>
 80002d0:	f000 f854 	bl	800037c <wirish::priv::series_init()>
 80002d4:	f7ff ff2a 	bl	800012c <boardInit()>
 80002d8:	bd38      	pop	{r3, r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	40022000 	.word	0x40022000
 80002e0:	40021000 	.word	0x40021000
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	0001193f 	.word	0x0001193f
 80002ec:	20000014 	.word	0x20000014
 80002f0:	08000179 	.word	0x08000179
 80002f4:	08000195 	.word	0x08000195

080002f8 <wirish::priv::board_reset_pll()>:
 80002f8:	4770      	bx	lr

080002fa <wirish::priv::board_setup_clock_prescalers()>:
 80002fa:	2100      	movs	r1, #0
 80002fc:	b508      	push	{r3, lr}
 80002fe:	4608      	mov	r0, r1
 8000300:	f000 ffce 	bl	80012a0 <rcc_set_prescaler>
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	2001      	movs	r0, #1
 800030a:	f000 ffc9 	bl	80012a0 <rcc_set_prescaler>
 800030e:	2100      	movs	r1, #0
 8000310:	2002      	movs	r0, #2
 8000312:	f000 ffc5 	bl	80012a0 <rcc_set_prescaler>
 8000316:	202d      	movs	r0, #45	; 0x2d
 8000318:	f000 ffd2 	bl	80012c0 <rcc_clk_disable>
 800031c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000320:	2100      	movs	r1, #0
 8000322:	2003      	movs	r0, #3
 8000324:	f000 bfbc 	b.w	80012a0 <rcc_set_prescaler>

08000328 <wirish::priv::board_setup_gpio()>:
 8000328:	f000 bd8c 	b.w	8000e44 <gpio_init_all>

0800032c <wirish::priv::board_setup_usb()>:
 800032c:	b513      	push	{r0, r1, r4, lr}
 800032e:	4c11      	ldr	r4, [pc, #68]	; (8000374 <wirish::priv::board_setup_usb()+0x48>)
 8000330:	2203      	movs	r2, #3
 8000332:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
 8000336:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 800033a:	f000 fd9b 	bl	8000e74 <gpio_set_mode>
 800033e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000342:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8000346:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
 800034a:	6802      	ldr	r2, [r0, #0]
 800034c:	408b      	lsls	r3, r1
 800034e:	6113      	str	r3, [r2, #16]
 8000350:	2300      	movs	r3, #0
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b01      	ldr	r3, [sp, #4]
 8000356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800035a:	d202      	bcs.n	8000362 <wirish::priv::board_setup_usb()+0x36>
 800035c:	9b01      	ldr	r3, [sp, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	e7f7      	b.n	8000352 <wirish::priv::board_setup_usb()+0x26>
 8000362:	2204      	movs	r2, #4
 8000364:	f000 fd86 	bl	8000e74 <gpio_set_mode>
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <wirish::priv::board_setup_usb()+0x4c>)
 800036a:	b002      	add	sp, #8
 800036c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000370:	f002 bef6 	b.w	8003160 <USBSerial::begin()>
 8000374:	08009938 	.word	0x08009938
 8000378:	20001028 	.word	0x20001028

0800037c <wirish::priv::series_init()>:
 800037c:	f000 bda1 	b.w	8000ec2 <afio_init>

08000380 <__exc_reset>:
 8000380:	4901      	ldr	r1, [pc, #4]	; (8000388 <__exc_reset+0x8>)
 8000382:	468d      	mov	sp, r1
 8000384:	4901      	ldr	r1, [pc, #4]	; (800038c <__exc_reset+0xc>)
 8000386:	4708      	bx	r1
 8000388:	20005000 	.word	0x20005000
 800038c:	08000391 	.word	0x08000391

08000390 <start_c>:
 8000390:	b508      	push	{r3, lr}
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <start_c+0x48>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <start_c+0x4c>)
 8000398:	429a      	cmp	r2, r3
 800039a:	d117      	bne.n	80003cc <start_c+0x3c>
 800039c:	2100      	movs	r1, #0
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <start_c+0x50>)
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <start_c+0x54>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d314      	bcc.n	80003d0 <start_c+0x40>
 80003a6:	f007 fdb9 	bl	8007f1c <__libc_init_array>
 80003aa:	2200      	movs	r2, #0
 80003ac:	4611      	mov	r1, r2
 80003ae:	4610      	mov	r0, r2
 80003b0:	f002 fd88 	bl	8002ec4 <main>
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <start_c+0x58>)
 80003b6:	b173      	cbz	r3, 80003d6 <start_c+0x46>
 80003b8:	f007 fda0 	bl	8007efc <exit>
 80003bc:	f852 0b04 	ldr.w	r0, [r2], #4
 80003c0:	3304      	adds	r3, #4
 80003c2:	f843 0c04 	str.w	r0, [r3, #-4]
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d3f8      	bcc.n	80003bc <start_c+0x2c>
 80003ca:	e7e7      	b.n	800039c <start_c+0xc>
 80003cc:	4907      	ldr	r1, [pc, #28]	; (80003ec <start_c+0x5c>)
 80003ce:	e7fa      	b.n	80003c6 <start_c+0x36>
 80003d0:	6019      	str	r1, [r3, #0]
 80003d2:	3304      	adds	r3, #4
 80003d4:	e7e5      	b.n	80003a2 <start_c+0x12>
 80003d6:	e7fe      	b.n	80003d6 <start_c+0x46>
 80003d8:	0800ac2c 	.word	0x0800ac2c
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000ca8 	.word	0x20000ca8
 80003e4:	20001c40 	.word	0x20001c40
 80003e8:	08007efd 	.word	0x08007efd
 80003ec:	20000ca8 	.word	0x20000ca8

080003f0 <_sbrk>:
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <_sbrk+0x38>)
 80003f2:	b510      	push	{r4, lr}
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	b90a      	cbnz	r2, 80003fc <_sbrk+0xc>
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <_sbrk+0x3c>)
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	490c      	ldr	r1, [pc, #48]	; (8000430 <_sbrk+0x40>)
 8000400:	1a89      	subs	r1, r1, r2
 8000402:	4281      	cmp	r1, r0
 8000404:	db04      	blt.n	8000410 <_sbrk+0x20>
 8000406:	4909      	ldr	r1, [pc, #36]	; (800042c <_sbrk+0x3c>)
 8000408:	4244      	negs	r4, r0
 800040a:	1a51      	subs	r1, r2, r1
 800040c:	42a1      	cmp	r1, r4
 800040e:	da07      	bge.n	8000420 <_sbrk+0x30>
 8000410:	f007 fd6e 	bl	8007ef0 <__errno>
 8000414:	230c      	movs	r3, #12
 8000416:	f04f 32ff 	mov.w	r2, #4294967295
 800041a:	6003      	str	r3, [r0, #0]
 800041c:	4610      	mov	r0, r2
 800041e:	bd10      	pop	{r4, pc}
 8000420:	4410      	add	r0, r2
 8000422:	6018      	str	r0, [r3, #0]
 8000424:	e7fa      	b.n	800041c <_sbrk+0x2c>
 8000426:	bf00      	nop
 8000428:	20000d0c 	.word	0x20000d0c
 800042c:	20001c40 	.word	0x20001c40
 8000430:	2800e938 	.word	0x2800e938

08000434 <_exit>:
 8000434:	e7fe      	b.n	8000434 <_exit>

08000436 <rb_full_count>:
 8000436:	88c3      	ldrh	r3, [r0, #6]
 8000438:	8882      	ldrh	r2, [r0, #4]
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	88c2      	ldrh	r2, [r0, #6]
 800043e:	8881      	ldrh	r1, [r0, #4]
 8000440:	4291      	cmp	r1, r2
 8000442:	bf82      	ittt	hi
 8000444:	8902      	ldrhhi	r2, [r0, #8]
 8000446:	3201      	addhi	r2, #1
 8000448:	189b      	addhi	r3, r3, r2
 800044a:	b298      	uxth	r0, r3
 800044c:	4770      	bx	lr

0800044e <HardwareSerial::read()>:
 800044e:	b510      	push	{r4, lr}
 8000450:	6903      	ldr	r3, [r0, #16]
 8000452:	4604      	mov	r4, r0
 8000454:	6858      	ldr	r0, [r3, #4]
 8000456:	f7ff ffee 	bl	8000436 <rb_full_count>
 800045a:	b188      	cbz	r0, 8000480 <HardwareSerial::read()+0x32>
 800045c:	6923      	ldr	r3, [r4, #16]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	889a      	ldrh	r2, [r3, #4]
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	b292      	uxth	r2, r2
 8000466:	5c88      	ldrb	r0, [r1, r2]
 8000468:	8899      	ldrh	r1, [r3, #4]
 800046a:	891a      	ldrh	r2, [r3, #8]
 800046c:	b2c0      	uxtb	r0, r0
 800046e:	b292      	uxth	r2, r2
 8000470:	428a      	cmp	r2, r1
 8000472:	bf0f      	iteee	eq
 8000474:	2200      	moveq	r2, #0
 8000476:	889a      	ldrhne	r2, [r3, #4]
 8000478:	3201      	addne	r2, #1
 800047a:	b292      	uxthne	r2, r2
 800047c:	809a      	strh	r2, [r3, #4]
 800047e:	bd10      	pop	{r4, pc}
 8000480:	f04f 30ff 	mov.w	r0, #4294967295
 8000484:	e7fb      	b.n	800047e <HardwareSerial::read()+0x30>

08000486 <HardwareSerial::available()>:
 8000486:	b508      	push	{r3, lr}
 8000488:	6903      	ldr	r3, [r0, #16]
 800048a:	6858      	ldr	r0, [r3, #4]
 800048c:	f7ff ffd3 	bl	8000436 <rb_full_count>
 8000490:	bd08      	pop	{r3, pc}

08000492 <HardwareSerial::peek()>:
 8000492:	6903      	ldr	r3, [r0, #16]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	8899      	ldrh	r1, [r3, #4]
 8000498:	88da      	ldrh	r2, [r3, #6]
 800049a:	b292      	uxth	r2, r2
 800049c:	428a      	cmp	r2, r1
 800049e:	bf1f      	itttt	ne
 80004a0:	889a      	ldrhne	r2, [r3, #4]
 80004a2:	681b      	ldrne	r3, [r3, #0]
 80004a4:	b292      	uxthne	r2, r2
 80004a6:	5c98      	ldrbne	r0, [r3, r2]
 80004a8:	bf14      	ite	ne
 80004aa:	b2c0      	uxtbne	r0, r0
 80004ac:	f04f 30ff 	moveq.w	r0, #4294967295
 80004b0:	4770      	bx	lr

080004b2 <HardwareSerial::flush()>:
 80004b2:	6902      	ldr	r2, [r0, #16]
 80004b4:	6891      	ldr	r1, [r2, #8]
 80004b6:	8888      	ldrh	r0, [r1, #4]
 80004b8:	88cb      	ldrh	r3, [r1, #6]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	4283      	cmp	r3, r0
 80004be:	d1fa      	bne.n	80004b6 <HardwareSerial::flush()+0x4>
 80004c0:	6812      	ldr	r2, [r2, #0]
 80004c2:	6813      	ldr	r3, [r2, #0]
 80004c4:	065b      	lsls	r3, r3, #25
 80004c6:	d5fc      	bpl.n	80004c2 <HardwareSerial::flush()+0x10>
 80004c8:	4770      	bx	lr

080004ca <HardwareSerial::write(unsigned char)>:
 80004ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004cc:	6905      	ldr	r5, [r0, #16]
 80004ce:	ac02      	add	r4, sp, #8
 80004d0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80004d4:	2201      	movs	r2, #1
 80004d6:	4621      	mov	r1, r4
 80004d8:	4628      	mov	r0, r5
 80004da:	f001 f9f3 	bl	80018c4 <usart_tx>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d0f8      	beq.n	80004d4 <HardwareSerial::write(unsigned char)+0xa>
 80004e2:	2001      	movs	r0, #1
 80004e4:	b003      	add	sp, #12
 80004e6:	bd30      	pop	{r4, r5, pc}

080004e8 <HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)>:
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0c00 	mov.w	ip, #0
 80004ee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80004f2:	e9c0 c501 	strd	ip, r5, [r0, #4]
 80004f6:	4d03      	ldr	r5, [pc, #12]	; (8000504 <HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)+0x1c>)
 80004f8:	6101      	str	r1, [r0, #16]
 80004fa:	6005      	str	r5, [r0, #0]
 80004fc:	7502      	strb	r2, [r0, #20]
 80004fe:	7543      	strb	r3, [r0, #21]
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop
 8000504:	08009b70 	.word	0x08009b70

08000508 <HardwareSerial::begin(unsigned long, unsigned char)>:
 8000508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800050c:	6903      	ldr	r3, [r0, #16]
 800050e:	4604      	mov	r4, r0
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4688      	mov	r8, r1
 8000514:	428b      	cmp	r3, r1
 8000516:	4691      	mov	r9, r2
 8000518:	d325      	bcc.n	8000566 <HardwareSerial::begin(unsigned long, unsigned char)+0x5e>
 800051a:	7d06      	ldrb	r6, [r0, #20]
 800051c:	4d13      	ldr	r5, [pc, #76]	; (800056c <HardwareSerial::begin(unsigned long, unsigned char)+0x64>)
 800051e:	0136      	lsls	r6, r6, #4
 8000520:	19ab      	adds	r3, r5, r6
 8000522:	7d47      	ldrb	r7, [r0, #21]
 8000524:	6858      	ldr	r0, [r3, #4]
 8000526:	b118      	cbz	r0, 8000530 <HardwareSerial::begin(unsigned long, unsigned char)+0x28>
 8000528:	2200      	movs	r2, #0
 800052a:	7b59      	ldrb	r1, [r3, #13]
 800052c:	f001 f80a 	bl	8001544 <timer_set_mode>
 8000530:	6920      	ldr	r0, [r4, #16]
 8000532:	f001 f97d 	bl	8001830 <usart_init>
 8000536:	0139      	lsls	r1, r7, #4
 8000538:	186a      	adds	r2, r5, r1
 800053a:	7b12      	ldrb	r2, [r2, #12]
 800053c:	19ab      	adds	r3, r5, r6
 800053e:	f8cd 9004 	str.w	r9, [sp, #4]
 8000542:	7b1b      	ldrb	r3, [r3, #12]
 8000544:	5869      	ldr	r1, [r5, r1]
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	6920      	ldr	r0, [r4, #16]
 800054a:	59ab      	ldr	r3, [r5, r6]
 800054c:	f001 fa59 	bl	8001a02 <usart_config_gpios_async>
 8000550:	6920      	ldr	r0, [r4, #16]
 8000552:	4642      	mov	r2, r8
 8000554:	2100      	movs	r1, #0
 8000556:	f001 fa79 	bl	8001a4c <usart_set_baud_rate>
 800055a:	6920      	ldr	r0, [r4, #16]
 800055c:	b003      	add	sp, #12
 800055e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000562:	f001 b98b 	b.w	800187c <usart_enable>
 8000566:	b003      	add	sp, #12
 8000568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800056c:	08009938 	.word	0x08009938

08000570 <HardwareSerial::begin(unsigned long)>:
 8000570:	2200      	movs	r2, #0
 8000572:	f7ff bfc9 	b.w	8000508 <HardwareSerial::begin(unsigned long, unsigned char)>
	...

08000578 <set_this_dev>:
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <set_this_dev+0x14>)
 800057a:	7902      	ldrb	r2, [r0, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	bf02      	ittt	eq
 8000582:	4b03      	ldreq	r3, [pc, #12]	; (8000590 <set_this_dev+0x18>)
 8000584:	681b      	ldreq	r3, [r3, #0]
 8000586:	6018      	streq	r0, [r3, #0]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000d20 	.word	0x20000d20
 8000590:	20000d24 	.word	0x20000d24

08000594 <HardwareTimer::HardwareTimer(unsigned char)>:
 8000594:	2300      	movs	r3, #0
 8000596:	b510      	push	{r4, lr}
 8000598:	4604      	mov	r4, r0
 800059a:	6003      	str	r3, [r0, #0]
 800059c:	b672      	cpsid	i
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HardwareTimer::HardwareTimer(unsigned char)+0x30>)
 80005a0:	3119      	adds	r1, #25
 80005a2:	7019      	strb	r1, [r3, #0]
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HardwareTimer::HardwareTimer(unsigned char)+0x34>)
 80005a6:	6018      	str	r0, [r3, #0]
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <HardwareTimer::HardwareTimer(unsigned char)+0x38>)
 80005aa:	f000 ff5d 	bl	8001468 <timer_foreach>
 80005ae:	b662      	cpsie	i
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	b923      	cbnz	r3, 80005be <HardwareTimer::HardwareTimer(unsigned char)+0x2a>
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HardwareTimer::HardwareTimer(unsigned char)+0x3c>)
 80005b6:	2144      	movs	r1, #68	; 0x44
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <HardwareTimer::HardwareTimer(unsigned char)+0x40>)
 80005ba:	f002 fc4f 	bl	8002e5c <_fail>
 80005be:	4620      	mov	r0, r4
 80005c0:	bd10      	pop	{r4, pc}
 80005c2:	bf00      	nop
 80005c4:	20000d20 	.word	0x20000d20
 80005c8:	20000d24 	.word	0x20000d24
 80005cc:	08000579 	.word	0x08000579
 80005d0:	08009b8c 	.word	0x08009b8c
 80005d4:	08009b9e 	.word	0x08009b9e

080005d8 <HardwareTimer::pause()>:
 80005d8:	2200      	movs	r2, #0
 80005da:	6803      	ldr	r3, [r0, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	015b      	lsls	r3, r3, #5
 80005e0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	4770      	bx	lr

080005e8 <HardwareTimer::resume()>:
 80005e8:	2201      	movs	r2, #1
 80005ea:	6803      	ldr	r3, [r0, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	015b      	lsls	r3, r3, #5
 80005f0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	4770      	bx	lr

080005f8 <HardwareTimer::setPrescaleFactor(unsigned long)>:
 80005f8:	6803      	ldr	r3, [r0, #0]
 80005fa:	3901      	subs	r1, #1
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	b289      	uxth	r1, r1
 8000600:	6299      	str	r1, [r3, #40]	; 0x28
 8000602:	4770      	bx	lr

08000604 <HardwareTimer::setOverflow(unsigned short)>:
 8000604:	6803      	ldr	r3, [r0, #0]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	62d9      	str	r1, [r3, #44]	; 0x2c
 800060a:	4770      	bx	lr

0800060c <HardwareTimer::setMode(int, timer_mode)>:
 800060c:	b2c9      	uxtb	r1, r1
 800060e:	6800      	ldr	r0, [r0, #0]
 8000610:	f000 bf98 	b.w	8001544 <timer_set_mode>

08000614 <HardwareTimer::setCompare(int, unsigned short)>:
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	b2c9      	uxtb	r1, r1
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800061e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000620:	3901      	subs	r1, #1
 8000622:	b29b      	uxth	r3, r3
 8000624:	4293      	cmp	r3, r2
 8000626:	bf28      	it	cs
 8000628:	4613      	movcs	r3, r2
 800062a:	3034      	adds	r0, #52	; 0x34
 800062c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8000630:	4770      	bx	lr
	...

08000634 <_GLOBAL__sub_I__ZN13HardwareTimerC2Eh>:
 8000634:	b508      	push	{r3, lr}
 8000636:	2101      	movs	r1, #1
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <_GLOBAL__sub_I__ZN13HardwareTimerC2Eh+0x28>)
 800063a:	f7ff ffab 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 800063e:	2102      	movs	r1, #2
 8000640:	4807      	ldr	r0, [pc, #28]	; (8000660 <_GLOBAL__sub_I__ZN13HardwareTimerC2Eh+0x2c>)
 8000642:	f7ff ffa7 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 8000646:	2103      	movs	r1, #3
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <_GLOBAL__sub_I__ZN13HardwareTimerC2Eh+0x30>)
 800064a:	f7ff ffa3 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 800064e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000652:	2104      	movs	r1, #4
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <_GLOBAL__sub_I__ZN13HardwareTimerC2Eh+0x34>)
 8000656:	f7ff bf9d 	b.w	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 800065a:	bf00      	nop
 800065c:	20000d10 	.word	0x20000d10
 8000660:	20000d14 	.word	0x20000d14
 8000664:	20000d18 	.word	0x20000d18
 8000668:	20000d1c 	.word	0x20000d1c

0800066c <Print::write(void const*, unsigned long)>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	4606      	mov	r6, r0
 8000670:	460c      	mov	r4, r1
 8000672:	4615      	mov	r5, r2
 8000674:	188f      	adds	r7, r1, r2
 8000676:	42a7      	cmp	r7, r4
 8000678:	d006      	beq.n	8000688 <Print::write(void const*, unsigned long)+0x1c>
 800067a:	6833      	ldr	r3, [r6, #0]
 800067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4630      	mov	r0, r6
 8000684:	4798      	blx	r3
 8000686:	e7f6      	b.n	8000676 <Print::write(void const*, unsigned long)+0xa>
 8000688:	4628      	mov	r0, r5
 800068a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800068c <Print::write(char const*)>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4605      	mov	r5, r0
 8000690:	460c      	mov	r4, r1
 8000692:	4608      	mov	r0, r1
 8000694:	b149      	cbz	r1, 80006aa <Print::write(char const*)+0x1e>
 8000696:	f008 f817 	bl	80086c8 <strlen>
 800069a:	682b      	ldr	r3, [r5, #0]
 800069c:	4602      	mov	r2, r0
 800069e:	4621      	mov	r1, r4
 80006a0:	4628      	mov	r0, r5
 80006a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4718      	bx	r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}

080006ac <Print::print(char)>:
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4718      	bx	r3

080006b2 <Print::print(char const*)>:
 80006b2:	6803      	ldr	r3, [r0, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4718      	bx	r3

080006b8 <Print::println()>:
 80006b8:	b538      	push	{r3, r4, r5, lr}
 80006ba:	210d      	movs	r1, #13
 80006bc:	4605      	mov	r5, r0
 80006be:	f7ff fff5 	bl	80006ac <Print::print(char)>
 80006c2:	210a      	movs	r1, #10
 80006c4:	4604      	mov	r4, r0
 80006c6:	4628      	mov	r0, r5
 80006c8:	f7ff fff0 	bl	80006ac <Print::print(char)>
 80006cc:	4420      	add	r0, r4
 80006ce:	bd38      	pop	{r3, r4, r5, pc}

080006d0 <Print::println(char)>:
 80006d0:	b538      	push	{r3, r4, r5, lr}
 80006d2:	4605      	mov	r5, r0
 80006d4:	f7ff ffea 	bl	80006ac <Print::print(char)>
 80006d8:	4604      	mov	r4, r0
 80006da:	4628      	mov	r0, r5
 80006dc:	f7ff ffec 	bl	80006b8 <Print::println()>
 80006e0:	4420      	add	r0, r4
 80006e2:	bd38      	pop	{r3, r4, r5, pc}

080006e4 <Print::println(char const*)>:
 80006e4:	b538      	push	{r3, r4, r5, lr}
 80006e6:	4605      	mov	r5, r0
 80006e8:	f7ff ffe3 	bl	80006b2 <Print::print(char const*)>
 80006ec:	4604      	mov	r4, r0
 80006ee:	4628      	mov	r0, r5
 80006f0:	f7ff ffe2 	bl	80006b8 <Print::println()>
 80006f4:	4420      	add	r0, r4
 80006f6:	bd38      	pop	{r3, r4, r5, pc}

080006f8 <Print::printNumber(unsigned long long, unsigned char)>:
 80006f8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80006fc:	4692      	mov	sl, r2
 80006fe:	469b      	mov	fp, r3
 8000700:	ea5a 030b 	orrs.w	r3, sl, fp
 8000704:	b090      	sub	sp, #64	; 0x40
 8000706:	4606      	mov	r6, r0
 8000708:	d107      	bne.n	800071a <Print::printNumber(unsigned long long, unsigned char)+0x22>
 800070a:	2130      	movs	r1, #48	; 0x30
 800070c:	f7ff ffce 	bl	80006ac <Print::print(char)>
 8000710:	2501      	movs	r5, #1
 8000712:	4628      	mov	r0, r5
 8000714:	b010      	add	sp, #64	; 0x40
 8000716:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800071a:	2400      	movs	r4, #0
 800071c:	f04f 0900 	mov.w	r9, #0
 8000720:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 8000724:	4650      	mov	r0, sl
 8000726:	4659      	mov	r1, fp
 8000728:	4642      	mov	r2, r8
 800072a:	464b      	mov	r3, r9
 800072c:	f007 f832 	bl	8007794 <__aeabi_uldivmod>
 8000730:	4682      	mov	sl, r0
 8000732:	468b      	mov	fp, r1
 8000734:	3401      	adds	r4, #1
 8000736:	eb0d 0304 	add.w	r3, sp, r4
 800073a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800073e:	ea5a 030b 	orrs.w	r3, sl, fp
 8000742:	d1ef      	bne.n	8000724 <Print::printNumber(unsigned long long, unsigned char)+0x2c>
 8000744:	2500      	movs	r5, #0
 8000746:	3c01      	subs	r4, #1
 8000748:	f81d 1004 	ldrb.w	r1, [sp, r4]
 800074c:	4630      	mov	r0, r6
 800074e:	2909      	cmp	r1, #9
 8000750:	bf94      	ite	ls
 8000752:	3130      	addls	r1, #48	; 0x30
 8000754:	3137      	addhi	r1, #55	; 0x37
 8000756:	b2c9      	uxtb	r1, r1
 8000758:	f7ff ffa8 	bl	80006ac <Print::print(char)>
 800075c:	4405      	add	r5, r0
 800075e:	2c00      	cmp	r4, #0
 8000760:	d1f1      	bne.n	8000746 <Print::printNumber(unsigned long long, unsigned char)+0x4e>
 8000762:	e7d6      	b.n	8000712 <Print::printNumber(unsigned long long, unsigned char)+0x1a>

08000764 <Print::print(long long, int)>:
 8000764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000768:	461d      	mov	r5, r3
 800076a:	2a00      	cmp	r2, #0
 800076c:	f175 0300 	sbcs.w	r3, r5, #0
 8000770:	4607      	mov	r7, r0
 8000772:	4614      	mov	r4, r2
 8000774:	9e06      	ldr	r6, [sp, #24]
 8000776:	da05      	bge.n	8000784 <Print::print(long long, int)+0x20>
 8000778:	212d      	movs	r1, #45	; 0x2d
 800077a:	f7ff ff97 	bl	80006ac <Print::print(char)>
 800077e:	4264      	negs	r4, r4
 8000780:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8000784:	b2f6      	uxtb	r6, r6
 8000786:	9606      	str	r6, [sp, #24]
 8000788:	4622      	mov	r2, r4
 800078a:	462b      	mov	r3, r5
 800078c:	4638      	mov	r0, r7
 800078e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000792:	f7ff bfb1 	b.w	80006f8 <Print::printNumber(unsigned long long, unsigned char)>

08000796 <Print::print(int, int)>:
 8000796:	b507      	push	{r0, r1, r2, lr}
 8000798:	17cb      	asrs	r3, r1, #31
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	460a      	mov	r2, r1
 800079e:	f7ff ffe1 	bl	8000764 <Print::print(long long, int)>
 80007a2:	b003      	add	sp, #12
 80007a4:	f85d fb04 	ldr.w	pc, [sp], #4

080007a8 <Print::println(int, int)>:
 80007a8:	b538      	push	{r3, r4, r5, lr}
 80007aa:	4605      	mov	r5, r0
 80007ac:	f7ff fff3 	bl	8000796 <Print::print(int, int)>
 80007b0:	4604      	mov	r4, r0
 80007b2:	4628      	mov	r0, r5
 80007b4:	f7ff ff80 	bl	80006b8 <Print::println()>
 80007b8:	4420      	add	r0, r4
 80007ba:	bd38      	pop	{r3, r4, r5, pc}

080007bc <Print::print(unsigned long long, int)>:
 80007bc:	f89d 1000 	ldrb.w	r1, [sp]
 80007c0:	9100      	str	r1, [sp, #0]
 80007c2:	f7ff bf99 	b.w	80006f8 <Print::printNumber(unsigned long long, unsigned char)>

080007c6 <Print::print(unsigned char, int)>:
 80007c6:	b507      	push	{r0, r1, r2, lr}
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	f7ff ff92 	bl	80006f8 <Print::printNumber(unsigned long long, unsigned char)>
 80007d4:	b003      	add	sp, #12
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <Print::print(unsigned long, int)>:
 80007da:	b507      	push	{r0, r1, r2, lr}
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	9200      	str	r2, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	460a      	mov	r2, r1
 80007e4:	f7ff ff88 	bl	80006f8 <Print::printNumber(unsigned long long, unsigned char)>
 80007e8:	b003      	add	sp, #12
 80007ea:	f85d fb04 	ldr.w	pc, [sp], #4

080007ee <Print::println(unsigned long, int)>:
 80007ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	460a      	mov	r2, r1
 80007f8:	4605      	mov	r5, r0
 80007fa:	f7ff ff7d 	bl	80006f8 <Print::printNumber(unsigned long long, unsigned char)>
 80007fe:	4604      	mov	r4, r0
 8000800:	4628      	mov	r0, r5
 8000802:	f7ff ff59 	bl	80006b8 <Print::println()>
 8000806:	4420      	add	r0, r4
 8000808:	b003      	add	sp, #12
 800080a:	bd30      	pop	{r4, r5, pc}

0800080c <exti_out_mode(ExtIntTriggerMode)>:
 800080c:	2801      	cmp	r0, #1
 800080e:	b508      	push	{r3, lr}
 8000810:	d008      	beq.n	8000824 <exti_out_mode(ExtIntTriggerMode)+0x18>
 8000812:	d306      	bcc.n	8000822 <exti_out_mode(ExtIntTriggerMode)+0x16>
 8000814:	2802      	cmp	r0, #2
 8000816:	d005      	beq.n	8000824 <exti_out_mode(ExtIntTriggerMode)+0x18>
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <exti_out_mode(ExtIntTriggerMode)+0x1c>)
 800081a:	2158      	movs	r1, #88	; 0x58
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <exti_out_mode(ExtIntTriggerMode)+0x20>)
 800081e:	f002 fb1d 	bl	8002e5c <_fail>
 8000822:	2000      	movs	r0, #0
 8000824:	bd08      	pop	{r3, pc}
 8000826:	bf00      	nop
 8000828:	0800a5b7 	.word	0x0800a5b7
 800082c:	08009c0d 	.word	0x08009c0d

08000830 <attachInterrupt(unsigned char, void (*)(), ExtIntTriggerMode)>:
 8000830:	2822      	cmp	r0, #34	; 0x22
 8000832:	b570      	push	{r4, r5, r6, lr}
 8000834:	4604      	mov	r4, r0
 8000836:	460d      	mov	r5, r1
 8000838:	d811      	bhi.n	800085e <attachInterrupt(unsigned char, void (*)(), ExtIntTriggerMode)+0x2e>
 800083a:	b181      	cbz	r1, 800085e <attachInterrupt(unsigned char, void (*)(), ExtIntTriggerMode)+0x2e>
 800083c:	4610      	mov	r0, r2
 800083e:	f7ff ffe5 	bl	800080c <exti_out_mode(ExtIntTriggerMode)>
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <attachInterrupt(unsigned char, void (*)(), ExtIntTriggerMode)+0x30>)
 8000844:	0124      	lsls	r4, r4, #4
 8000846:	191e      	adds	r6, r3, r4
 8000848:	591b      	ldr	r3, [r3, r4]
 800084a:	462a      	mov	r2, r5
 800084c:	791c      	ldrb	r4, [r3, #4]
 800084e:	4603      	mov	r3, r0
 8000850:	3c0b      	subs	r4, #11
 8000852:	b2e1      	uxtb	r1, r4
 8000854:	7b30      	ldrb	r0, [r6, #12]
 8000856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800085a:	f000 ba27 	b.w	8000cac <exti_attach_interrupt>
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	08009938 	.word	0x08009938

08000864 <yield>:
 8000864:	4770      	bx	lr

08000866 <adc_init>:
 8000866:	b510      	push	{r4, lr}
 8000868:	4604      	mov	r4, r0
 800086a:	7900      	ldrb	r0, [r0, #4]
 800086c:	f000 fce6 	bl	800123c <rcc_clk_enable>
 8000870:	7920      	ldrb	r0, [r4, #4]
 8000872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000876:	f000 bcf9 	b.w	800126c <rcc_reset_dev>

0800087a <adc_set_extsel>:
 800087a:	6802      	ldr	r2, [r0, #0]
 800087c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000880:	6893      	ldr	r3, [r2, #8]
 8000882:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000886:	4319      	orrs	r1, r3
 8000888:	6091      	str	r1, [r2, #8]
 800088a:	4770      	bx	lr

0800088c <adc_set_sample_rate>:
 800088c:	2300      	movs	r3, #0
 800088e:	b530      	push	{r4, r5, lr}
 8000890:	461c      	mov	r4, r3
 8000892:	461d      	mov	r5, r3
 8000894:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000898:	2b07      	cmp	r3, #7
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	f103 0301 	add.w	r3, r3, #1
 80008a2:	bfd8      	it	le
 80008a4:	4315      	orrle	r5, r2
 80008a6:	2b0a      	cmp	r3, #10
 80008a8:	ea44 0402 	orr.w	r4, r4, r2
 80008ac:	d1f2      	bne.n	8000894 <adc_set_sample_rate+0x8>
 80008ae:	6803      	ldr	r3, [r0, #0]
 80008b0:	60dd      	str	r5, [r3, #12]
 80008b2:	611c      	str	r4, [r3, #16]
 80008b4:	bd30      	pop	{r4, r5, pc}
	...

080008b8 <__irq_adc>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4c13      	ldr	r4, [pc, #76]	; (8000908 <__irq_adc+0x50>)
 80008bc:	6821      	ldr	r1, [r4, #0]
 80008be:	680b      	ldr	r3, [r1, #0]
 80008c0:	681d      	ldr	r5, [r3, #0]
 80008c2:	07a8      	lsls	r0, r5, #30
 80008c4:	d506      	bpl.n	80008d4 <__irq_adc+0x1c>
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f022 0202 	bic.w	r2, r2, #2
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	688b      	ldr	r3, [r1, #8]
 80008d0:	b103      	cbz	r3, 80008d4 <__irq_adc+0x1c>
 80008d2:	4798      	blx	r3
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d508      	bpl.n	80008ea <__irq_adc+0x32>
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	680b      	ldr	r3, [r1, #0]
 80008de:	f023 0304 	bic.w	r3, r3, #4
 80008e2:	600b      	str	r3, [r1, #0]
 80008e4:	6913      	ldr	r3, [r2, #16]
 80008e6:	b103      	cbz	r3, 80008ea <__irq_adc+0x32>
 80008e8:	4798      	blx	r3
 80008ea:	07eb      	lsls	r3, r5, #31
 80008ec:	d50a      	bpl.n	8000904 <__irq_adc+0x4c>
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	680b      	ldr	r3, [r1, #0]
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	600b      	str	r3, [r1, #0]
 80008fa:	68d3      	ldr	r3, [r2, #12]
 80008fc:	b113      	cbz	r3, 8000904 <__irq_adc+0x4c>
 80008fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000902:	4718      	bx	r3
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	bf00      	nop
 8000908:	2000001c 	.word	0x2000001c

0800090c <adc_calibrate>:
 800090c:	2201      	movs	r2, #1
 800090e:	6803      	ldr	r3, [r0, #0]
 8000910:	015b      	lsls	r3, r3, #5
 8000912:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000916:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800091a:	1f19      	subs	r1, r3, #4
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	2800      	cmp	r0, #0
 8000922:	d1fc      	bne.n	800091e <adc_calibrate+0x12>
 8000924:	f843 2c04 	str.w	r2, [r3, #-4]
 8000928:	680b      	ldr	r3, [r1, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1fc      	bne.n	8000928 <adc_calibrate+0x1c>
 800092e:	4770      	bx	lr

08000930 <adc_set_prescaler>:
 8000930:	4601      	mov	r1, r0
 8000932:	2004      	movs	r0, #4
 8000934:	f000 bcb4 	b.w	80012a0 <rcc_set_prescaler>

08000938 <adc_foreach>:
 8000938:	b510      	push	{r4, lr}
 800093a:	4604      	mov	r4, r0
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <adc_foreach+0x18>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	47a0      	blx	r4
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <adc_foreach+0x1c>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	4623      	mov	r3, r4
 8000948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800094c:	4718      	bx	r3
 800094e:	bf00      	nop
 8000950:	2000001c 	.word	0x2000001c
 8000954:	20000020 	.word	0x20000020

08000958 <adc_enable_single_swstart>:
 8000958:	b510      	push	{r4, lr}
 800095a:	4604      	mov	r4, r0
 800095c:	f7ff ff83 	bl	8000866 <adc_init>
 8000960:	4620      	mov	r0, r4
 8000962:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8000966:	f7ff ff88 	bl	800087a <adc_set_extsel>
 800096a:	2101      	movs	r1, #1
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	4620      	mov	r0, r4
 8000970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000974:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000978:	3308      	adds	r3, #8
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000982:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000986:	6511      	str	r1, [r2, #80]	; 0x50
 8000988:	6019      	str	r1, [r3, #0]
 800098a:	f7ff bfbf 	b.w	800090c <adc_calibrate>

0800098e <bkp_init>:
 800098e:	b508      	push	{r3, lr}
 8000990:	2014      	movs	r0, #20
 8000992:	f000 fc53 	bl	800123c <rcc_clk_enable>
 8000996:	2004      	movs	r0, #4
 8000998:	f000 fc50 	bl	800123c <rcc_clk_enable>
 800099c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80009a0:	2004      	movs	r0, #4
 80009a2:	f000 bc63 	b.w	800126c <rcc_reset_dev>
	...

080009a8 <bkp_enable_writes>:
 80009a8:	2201      	movs	r2, #1
 80009aa:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <bkp_enable_writes+0x8>)
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	4770      	bx	lr
 80009b0:	420e0020 	.word	0x420e0020

080009b4 <bkp_disable_writes>:
 80009b4:	2200      	movs	r2, #0
 80009b6:	4b01      	ldr	r3, [pc, #4]	; (80009bc <bkp_disable_writes+0x8>)
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	4770      	bx	lr
 80009bc:	420e0020 	.word	0x420e0020

080009c0 <bkp_write>:
 80009c0:	1e43      	subs	r3, r0, #1
 80009c2:	2b09      	cmp	r3, #9
 80009c4:	d806      	bhi.n	80009d4 <bkp_write+0x14>
 80009c6:	0080      	lsls	r0, r0, #2
 80009c8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80009cc:	f500 40d8 	add.w	r0, r0, #27648	; 0x6c00
 80009d0:	6001      	str	r1, [r0, #0]
 80009d2:	4770      	bx	lr
 80009d4:	4a02      	ldr	r2, [pc, #8]	; (80009e0 <bkp_write+0x20>)
 80009d6:	2166      	movs	r1, #102	; 0x66
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <bkp_write+0x24>)
 80009da:	f002 ba3f 	b.w	8002e5c <_fail>
 80009de:	bf00      	nop
 80009e0:	0800a5b7 	.word	0x0800a5b7
 80009e4:	08009c7d 	.word	0x08009c7d

080009e8 <dma_init>:
 80009e8:	7900      	ldrb	r0, [r0, #4]
 80009ea:	f000 bc27 	b.w	800123c <rcc_clk_enable>
	...

080009f0 <dma_set_priority>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	2414      	movs	r4, #20
 80009f4:	3901      	subs	r1, #1
 80009f6:	434c      	muls	r4, r1
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	4605      	mov	r5, r0
 80009fc:	3308      	adds	r3, #8
 80009fe:	591b      	ldr	r3, [r3, r4]
 8000a00:	4616      	mov	r6, r2
 8000a02:	07db      	lsls	r3, r3, #31
 8000a04:	d504      	bpl.n	8000a10 <dma_set_priority+0x20>
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <dma_set_priority+0x34>)
 8000a08:	21dc      	movs	r1, #220	; 0xdc
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <dma_set_priority+0x38>)
 8000a0c:	f002 fa26 	bl	8002e5c <_fail>
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	3308      	adds	r3, #8
 8000a14:	591a      	ldr	r2, [r3, r4]
 8000a16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a1a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
 8000a1e:	511a      	str	r2, [r3, r4]
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	bf00      	nop
 8000a24:	08009cec 	.word	0x08009cec
 8000a28:	08009d12 	.word	0x08009d12

08000a2c <dma_set_num_transfers>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	2414      	movs	r4, #20
 8000a30:	3901      	subs	r1, #1
 8000a32:	434c      	muls	r4, r1
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	4605      	mov	r5, r0
 8000a38:	3308      	adds	r3, #8
 8000a3a:	591b      	ldr	r3, [r3, r4]
 8000a3c:	4616      	mov	r6, r2
 8000a3e:	07db      	lsls	r3, r3, #31
 8000a40:	d504      	bpl.n	8000a4c <dma_set_num_transfers+0x20>
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <dma_set_num_transfers+0x2c>)
 8000a44:	21ea      	movs	r1, #234	; 0xea
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <dma_set_num_transfers+0x30>)
 8000a48:	f002 fa08 	bl	8002e5c <_fail>
 8000a4c:	6829      	ldr	r1, [r5, #0]
 8000a4e:	3108      	adds	r1, #8
 8000a50:	4421      	add	r1, r4
 8000a52:	604e      	str	r6, [r1, #4]
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	bf00      	nop
 8000a58:	08009cec 	.word	0x08009cec
 8000a5c:	08009d12 	.word	0x08009d12

08000a60 <dma_enable>:
 8000a60:	2214      	movs	r2, #20
 8000a62:	6803      	ldr	r3, [r0, #0]
 8000a64:	3901      	subs	r1, #1
 8000a66:	fb02 3101 	mla	r1, r2, r1, r3
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	0149      	lsls	r1, r1, #5
 8000a6e:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8000a72:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
 8000a76:	4770      	bx	lr

08000a78 <dma_disable>:
 8000a78:	2214      	movs	r2, #20
 8000a7a:	6803      	ldr	r3, [r0, #0]
 8000a7c:	3901      	subs	r1, #1
 8000a7e:	fb02 3101 	mla	r1, r2, r1, r3
 8000a82:	2300      	movs	r3, #0
 8000a84:	0149      	lsls	r1, r1, #5
 8000a86:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8000a8a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
 8000a8e:	4770      	bx	lr

08000a90 <dma_setup_transfer>:
 8000a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a94:	2514      	movs	r5, #20
 8000a96:	461c      	mov	r4, r3
 8000a98:	4690      	mov	r8, r2
 8000a9a:	1e4b      	subs	r3, r1, #1
 8000a9c:	435d      	muls	r5, r3
 8000a9e:	6806      	ldr	r6, [r0, #0]
 8000aa0:	f7ff ffea 	bl	8000a78 <dma_disable>
 8000aa4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000aa8:	0224      	lsls	r4, r4, #8
 8000aaa:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
 8000aae:	9b08      	ldr	r3, [sp, #32]
 8000ab0:	3608      	adds	r6, #8
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	9b06      	ldr	r3, [sp, #24]
 8000ab6:	1977      	adds	r7, r6, r5
 8000ab8:	5174      	str	r4, [r6, r5]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	f8c7 8008 	str.w	r8, [r7, #8]
 8000ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ac4 <__irq_dma1_channel1>:
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__irq_dma1_channel1+0x14>)
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	681c      	ldr	r4, [r3, #0]
 8000aca:	68a3      	ldr	r3, [r4, #8]
 8000acc:	b11b      	cbz	r3, 8000ad6 <__irq_dma1_channel1+0x12>
 8000ace:	4798      	blx	r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	bd10      	pop	{r4, pc}
 8000ad8:	20000044 	.word	0x20000044

08000adc <__irq_dma1_channel2>:
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__irq_dma1_channel2+0x14>)
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	681c      	ldr	r4, [r3, #0]
 8000ae2:	6923      	ldr	r3, [r4, #16]
 8000ae4:	b11b      	cbz	r3, 8000aee <__irq_dma1_channel2+0x12>
 8000ae6:	4798      	blx	r3
 8000ae8:	2210      	movs	r2, #16
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	20000044 	.word	0x20000044

08000af4 <__irq_dma1_channel3>:
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <__irq_dma1_channel3+0x18>)
 8000af6:	b510      	push	{r4, lr}
 8000af8:	681c      	ldr	r4, [r3, #0]
 8000afa:	69a3      	ldr	r3, [r4, #24]
 8000afc:	b123      	cbz	r3, 8000b08 <__irq_dma1_channel3+0x14>
 8000afe:	4798      	blx	r3
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000044 	.word	0x20000044

08000b10 <__irq_dma1_channel4>:
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <__irq_dma1_channel4+0x18>)
 8000b12:	b510      	push	{r4, lr}
 8000b14:	681c      	ldr	r4, [r3, #0]
 8000b16:	6a23      	ldr	r3, [r4, #32]
 8000b18:	b123      	cbz	r3, 8000b24 <__irq_dma1_channel4+0x14>
 8000b1a:	4798      	blx	r3
 8000b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	bf00      	nop
 8000b28:	20000044 	.word	0x20000044

08000b2c <__irq_dma1_channel5>:
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <__irq_dma1_channel5+0x18>)
 8000b2e:	b510      	push	{r4, lr}
 8000b30:	681c      	ldr	r4, [r3, #0]
 8000b32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b34:	b123      	cbz	r3, 8000b40 <__irq_dma1_channel5+0x14>
 8000b36:	4798      	blx	r3
 8000b38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	20000044 	.word	0x20000044

08000b48 <__irq_dma1_channel6>:
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <__irq_dma1_channel6+0x18>)
 8000b4a:	b510      	push	{r4, lr}
 8000b4c:	681c      	ldr	r4, [r3, #0]
 8000b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b50:	b123      	cbz	r3, 8000b5c <__irq_dma1_channel6+0x14>
 8000b52:	4798      	blx	r3
 8000b54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000044 	.word	0x20000044

08000b64 <__irq_dma1_channel7>:
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <__irq_dma1_channel7+0x18>)
 8000b66:	b510      	push	{r4, lr}
 8000b68:	681c      	ldr	r4, [r3, #0]
 8000b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b6c:	b123      	cbz	r3, 8000b78 <__irq_dma1_channel7+0x14>
 8000b6e:	4798      	blx	r3
 8000b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000044 	.word	0x20000044

08000b80 <__exc_nmi>:
 8000b80:	2001      	movs	r0, #1
 8000b82:	e007      	b.n	8000b94 <__default_exc>

08000b84 <__exc_hardfault>:
 8000b84:	2002      	movs	r0, #2
 8000b86:	e005      	b.n	8000b94 <__default_exc>

08000b88 <__exc_memmanage>:
 8000b88:	2003      	movs	r0, #3
 8000b8a:	e003      	b.n	8000b94 <__default_exc>

08000b8c <__exc_busfault>:
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	e001      	b.n	8000b94 <__default_exc>

08000b90 <__exc_usagefault>:
 8000b90:	2005      	movs	r0, #5
 8000b92:	e7ff      	b.n	8000b94 <__default_exc>

08000b94 <__default_exc>:
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <NVIC_CCR>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	6011      	str	r1, [r2, #0]
 8000b9a:	b672      	cpsid	i
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <SYSTICK_CSR>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	6011      	str	r1, [r2, #0]
 8000ba2:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <CPSR_MASK>)
 8000ba4:	b402      	push	{r1}
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <TARGET_PC>)
 8000ba8:	b402      	push	{r1}
 8000baa:	b086      	sub	sp, #24
 8000bac:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <EXC_RETURN>)
 8000bae:	468e      	mov	lr, r1
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	f3af 8000 	nop.w
 8000bb8:	f3af 8000 	nop.w
 8000bbc:	f3af 8000 	nop.w

08000bc0 <CPSR_MASK>:
 8000bc0:	61000000 	.word	0x61000000

08000bc4 <EXC_RETURN>:
 8000bc4:	fffffff9 	.word	0xfffffff9

08000bc8 <TARGET_PC>:
 8000bc8:	08002e49 	.word	0x08002e49

08000bcc <NVIC_CCR>:
 8000bcc:	e000ed14 	.word	0xe000ed14

08000bd0 <SYSTICK_CSR>:
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <exti_attach_callback>:
 8000bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd8:	4605      	mov	r5, r0
 8000bda:	460e      	mov	r6, r1
 8000bdc:	4698      	mov	r8, r3
 8000bde:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8000be2:	4614      	mov	r4, r2
 8000be4:	b922      	cbnz	r2, 8000bf0 <exti_attach_callback+0x1c>
 8000be6:	4a2d      	ldr	r2, [pc, #180]	; (8000c9c <exti_attach_callback+0xc8>)
 8000be8:	2177      	movs	r1, #119	; 0x77
 8000bea:	482d      	ldr	r0, [pc, #180]	; (8000ca0 <exti_attach_callback+0xcc>)
 8000bec:	f002 f936 	bl	8002e5c <_fail>
 8000bf0:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <exti_attach_callback+0xd0>)
 8000bf2:	2f01      	cmp	r7, #1
 8000bf4:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
 8000bf8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8000bfc:	f8c2 8004 	str.w	r8, [r2, #4]
 8000c00:	f505 2402 	add.w	r4, r5, #532480	; 0x82000
 8000c04:	d01e      	beq.n	8000c44 <exti_attach_callback+0x70>
 8000c06:	d316      	bcc.n	8000c36 <exti_attach_callback+0x62>
 8000c08:	2f02      	cmp	r7, #2
 8000c0a:	d021      	beq.n	8000c50 <exti_attach_callback+0x7c>
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f000 f8fa 	bl	8000e08 <exti_select>
 8000c14:	2301      	movs	r3, #1
 8000c16:	00a4      	lsls	r4, r4, #2
 8000c18:	f104 4484 	add.w	r4, r4, #1107296256	; 0x42000000
 8000c1c:	6023      	str	r3, [r4, #0]
 8000c1e:	2d0f      	cmp	r5, #15
 8000c20:	d822      	bhi.n	8000c68 <exti_attach_callback+0x94>
 8000c22:	e8df f005 	tbb	[pc, r5]
 8000c26:	231e      	.short	0x231e
 8000c28:	322e2a26 	.word	0x322e2a26
 8000c2c:	32323232 	.word	0x32323232
 8000c30:	36363636 	.word	0x36363636
 8000c34:	3636      	.short	0x3636
 8000c36:	2201      	movs	r2, #1
 8000c38:	00a3      	lsls	r3, r4, #2
 8000c3a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000c42:	e7e3      	b.n	8000c0c <exti_attach_callback+0x38>
 8000c44:	00a3      	lsls	r3, r4, #2
 8000c46:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c4a:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
 8000c4e:	e7dd      	b.n	8000c0c <exti_attach_callback+0x38>
 8000c50:	2201      	movs	r2, #1
 8000c52:	00a3      	lsls	r3, r4, #2
 8000c54:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000c5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000c60:	e7d4      	b.n	8000c0c <exti_attach_callback+0x38>
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	e7f9      	b.n	8000c66 <exti_attach_callback+0x92>
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c78:	e7f5      	b.n	8000c66 <exti_attach_callback+0x92>
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	e7f1      	b.n	8000c66 <exti_attach_callback+0x92>
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	e7ed      	b.n	8000c66 <exti_attach_callback+0x92>
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c90:	e7e9      	b.n	8000c66 <exti_attach_callback+0x92>
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <exti_attach_callback+0xd4>)
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	e7e5      	b.n	8000c68 <exti_attach_callback+0x94>
 8000c9c:	08009d81 	.word	0x08009d81
 8000ca0:	08009d89 	.word	0x08009d89
 8000ca4:	20000d28 	.word	0x20000d28
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <exti_attach_interrupt>:
 8000cac:	b507      	push	{r0, r1, r2, lr}
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f7ff ff8f 	bl	8000bd4 <exti_attach_callback>
 8000cb6:	b003      	add	sp, #12
 8000cb8:	f85d fb04 	ldr.w	pc, [sp], #4

08000cbc <exti_do_select>:
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	240f      	movs	r4, #15
 8000cc0:	f001 0103 	and.w	r1, r1, #3
 8000cc4:	0089      	lsls	r1, r1, #2
 8000cc6:	6803      	ldr	r3, [r0, #0]
 8000cc8:	408c      	lsls	r4, r1
 8000cca:	ea23 0304 	bic.w	r3, r3, r4
 8000cce:	fa02 f101 	lsl.w	r1, r2, r1
 8000cd2:	4319      	orrs	r1, r3
 8000cd4:	6001      	str	r1, [r0, #0]
 8000cd6:	bd10      	pop	{r4, pc}

08000cd8 <__irq_exti0>:
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <__irq_exti0+0x18>)
 8000cda:	b508      	push	{r3, lr}
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	b133      	cbz	r3, 8000cee <__irq_exti0+0x16>
 8000ce0:	6850      	ldr	r0, [r2, #4]
 8000ce2:	4798      	blx	r3
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <__irq_exti0+0x1c>)
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	bd08      	pop	{r3, pc}
 8000cf0:	20000d28 	.word	0x20000d28
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <__irq_exti1>:
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <__irq_exti1+0x18>)
 8000cfa:	b508      	push	{r3, lr}
 8000cfc:	6893      	ldr	r3, [r2, #8]
 8000cfe:	b133      	cbz	r3, 8000d0e <__irq_exti1+0x16>
 8000d00:	68d0      	ldr	r0, [r2, #12]
 8000d02:	4798      	blx	r3
 8000d04:	2202      	movs	r2, #2
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <__irq_exti1+0x1c>)
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	bd08      	pop	{r3, pc}
 8000d10:	20000d28 	.word	0x20000d28
 8000d14:	40010400 	.word	0x40010400

08000d18 <__irq_exti2>:
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <__irq_exti2+0x18>)
 8000d1a:	b508      	push	{r3, lr}
 8000d1c:	6913      	ldr	r3, [r2, #16]
 8000d1e:	b133      	cbz	r3, 8000d2e <__irq_exti2+0x16>
 8000d20:	6950      	ldr	r0, [r2, #20]
 8000d22:	4798      	blx	r3
 8000d24:	2204      	movs	r2, #4
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <__irq_exti2+0x1c>)
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	bd08      	pop	{r3, pc}
 8000d30:	20000d28 	.word	0x20000d28
 8000d34:	40010400 	.word	0x40010400

08000d38 <__irq_exti3>:
 8000d38:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <__irq_exti3+0x18>)
 8000d3a:	b508      	push	{r3, lr}
 8000d3c:	6993      	ldr	r3, [r2, #24]
 8000d3e:	b133      	cbz	r3, 8000d4e <__irq_exti3+0x16>
 8000d40:	69d0      	ldr	r0, [r2, #28]
 8000d42:	4798      	blx	r3
 8000d44:	2208      	movs	r2, #8
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <__irq_exti3+0x1c>)
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	bd08      	pop	{r3, pc}
 8000d50:	20000d28 	.word	0x20000d28
 8000d54:	40010400 	.word	0x40010400

08000d58 <__irq_exti4>:
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <__irq_exti4+0x18>)
 8000d5a:	b508      	push	{r3, lr}
 8000d5c:	6a13      	ldr	r3, [r2, #32]
 8000d5e:	b133      	cbz	r3, 8000d6e <__irq_exti4+0x16>
 8000d60:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000d62:	4798      	blx	r3
 8000d64:	2210      	movs	r2, #16
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <__irq_exti4+0x1c>)
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	bd08      	pop	{r3, pc}
 8000d70:	20000d28 	.word	0x20000d28
 8000d74:	40010400 	.word	0x40010400

08000d78 <__irq_exti9_5>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	2405      	movs	r4, #5
 8000d80:	f04f 0a01 	mov.w	sl, #1
 8000d84:	4d0c      	ldr	r5, [pc, #48]	; (8000db8 <__irq_exti9_5+0x40>)
 8000d86:	4f0d      	ldr	r7, [pc, #52]	; (8000dbc <__irq_exti9_5+0x44>)
 8000d88:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8000d8c:	fa0a f804 	lsl.w	r8, sl, r4
 8000d90:	ea19 0f08 	tst.w	r9, r8
 8000d94:	d008      	beq.n	8000da8 <__irq_exti9_5+0x30>
 8000d96:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
 8000d9a:	00e3      	lsls	r3, r4, #3
 8000d9c:	b122      	cbz	r2, 8000da8 <__irq_exti9_5+0x30>
 8000d9e:	443b      	add	r3, r7
 8000da0:	6858      	ldr	r0, [r3, #4]
 8000da2:	4790      	blx	r2
 8000da4:	ea46 0608 	orr.w	r6, r6, r8
 8000da8:	3401      	adds	r4, #1
 8000daa:	2c0a      	cmp	r4, #10
 8000dac:	d1ee      	bne.n	8000d8c <__irq_exti9_5+0x14>
 8000dae:	616e      	str	r6, [r5, #20]
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	40010400 	.word	0x40010400
 8000dbc:	20000d28 	.word	0x20000d28

08000dc0 <__irq_exti15_10>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	240a      	movs	r4, #10
 8000dc8:	f04f 0a01 	mov.w	sl, #1
 8000dcc:	4d0c      	ldr	r5, [pc, #48]	; (8000e00 <__irq_exti15_10+0x40>)
 8000dce:	4f0d      	ldr	r7, [pc, #52]	; (8000e04 <__irq_exti15_10+0x44>)
 8000dd0:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8000dd4:	fa0a f804 	lsl.w	r8, sl, r4
 8000dd8:	ea19 0f08 	tst.w	r9, r8
 8000ddc:	d008      	beq.n	8000df0 <__irq_exti15_10+0x30>
 8000dde:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
 8000de2:	00e3      	lsls	r3, r4, #3
 8000de4:	b122      	cbz	r2, 8000df0 <__irq_exti15_10+0x30>
 8000de6:	443b      	add	r3, r7
 8000de8:	6858      	ldr	r0, [r3, #4]
 8000dea:	4790      	blx	r2
 8000dec:	ea46 0608 	orr.w	r6, r6, r8
 8000df0:	3401      	adds	r4, #1
 8000df2:	2c10      	cmp	r4, #16
 8000df4:	d1ee      	bne.n	8000dd4 <__irq_exti15_10+0x14>
 8000df6:	616e      	str	r6, [r5, #20]
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	40010400 	.word	0x40010400
 8000e04:	20000d28 	.word	0x20000d28

08000e08 <exti_select>:
 8000e08:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	4601      	mov	r1, r0
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <exti_select+0x10>)
 8000e12:	4418      	add	r0, r3
 8000e14:	f7ff bf52 	b.w	8000cbc <exti_do_select>
 8000e18:	40010008 	.word	0x40010008

08000e1c <flash_set_latency>:
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <flash_set_latency+0x10>)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	f023 0307 	bic.w	r3, r3, #7
 8000e24:	4318      	orrs	r0, r3
 8000e26:	6010      	str	r0, [r2, #0]
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <gpio_init>:
 8000e30:	b510      	push	{r4, lr}
 8000e32:	4604      	mov	r4, r0
 8000e34:	7900      	ldrb	r0, [r0, #4]
 8000e36:	f000 fa01 	bl	800123c <rcc_clk_enable>
 8000e3a:	7920      	ldrb	r0, [r4, #4]
 8000e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e40:	f000 ba14 	b.w	800126c <rcc_reset_dev>

08000e44 <gpio_init_all>:
 8000e44:	b508      	push	{r3, lr}
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <gpio_init_all+0x20>)
 8000e48:	f7ff fff2 	bl	8000e30 <gpio_init>
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <gpio_init_all+0x24>)
 8000e4e:	f7ff ffef 	bl	8000e30 <gpio_init>
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <gpio_init_all+0x28>)
 8000e54:	f7ff ffec 	bl	8000e30 <gpio_init>
 8000e58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <gpio_init_all+0x2c>)
 8000e5e:	f7ff bfe7 	b.w	8000e30 <gpio_init>
 8000e62:	bf00      	nop
 8000e64:	20000088 	.word	0x20000088
 8000e68:	20000090 	.word	0x20000090
 8000e6c:	20000098 	.word	0x20000098
 8000e70:	200000a0 	.word	0x200000a0

08000e74 <gpio_set_mode>:
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	250f      	movs	r5, #15
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	08ce      	lsrs	r6, r1, #3
 8000e7c:	f001 0007 	and.w	r0, r1, #7
 8000e80:	0084      	lsls	r4, r0, #2
 8000e82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8000e86:	2a09      	cmp	r2, #9
 8000e88:	fa05 f504 	lsl.w	r5, r5, r4
 8000e8c:	ea20 0505 	bic.w	r5, r0, r5
 8000e90:	bf14      	ite	ne
 8000e92:	4610      	movne	r0, r2
 8000e94:	2008      	moveq	r0, #8
 8000e96:	40a0      	lsls	r0, r4
 8000e98:	4328      	orrs	r0, r5
 8000e9a:	2a08      	cmp	r2, #8
 8000e9c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8000ea0:	d107      	bne.n	8000eb2 <gpio_set_mode+0x3e>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	fa00 f101 	lsl.w	r1, r0, r1
 8000eaa:	ea22 0101 	bic.w	r1, r2, r1
 8000eae:	60d9      	str	r1, [r3, #12]
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
 8000eb2:	2a09      	cmp	r2, #9
 8000eb4:	d1fc      	bne.n	8000eb0 <gpio_set_mode+0x3c>
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	68d8      	ldr	r0, [r3, #12]
 8000eba:	fa02 f101 	lsl.w	r1, r2, r1
 8000ebe:	4301      	orrs	r1, r0
 8000ec0:	e7f5      	b.n	8000eae <gpio_set_mode+0x3a>

08000ec2 <afio_init>:
 8000ec2:	b508      	push	{r3, lr}
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f9b9 	bl	800123c <rcc_clk_enable>
 8000eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 b9cc 	b.w	800126c <rcc_reset_dev>

08000ed4 <i2c_start_condition>:
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f412 5f98 	tst.w	r2, #4864	; 0x1300
 8000edc:	d1fb      	bne.n	8000ed6 <i2c_start_condition+0x2>
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4770      	bx	lr

08000ee8 <i2c_stop_condition>:
 8000ee8:	6803      	ldr	r3, [r0, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f412 5f98 	tst.w	r2, #4864	; 0x1300
 8000ef0:	d1fb      	bne.n	8000eea <i2c_stop_condition+0x2>
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f412 5f98 	tst.w	r2, #4864	; 0x1300
 8000f00:	d1fb      	bne.n	8000efa <i2c_stop_condition+0x12>
 8000f02:	4770      	bx	lr

08000f04 <_i2c_irq_handler>:
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	b570      	push	{r4, r5, r6, lr}
 8000f08:	6951      	ldr	r1, [r2, #20]
 8000f0a:	6846      	ldr	r6, [r0, #4]
 8000f0c:	6992      	ldr	r2, [r2, #24]
 8000f0e:	4a5b      	ldr	r2, [pc, #364]	; (800107c <_i2c_irq_handler+0x178>)
 8000f10:	78b5      	ldrb	r5, [r6, #2]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	07cb      	lsls	r3, r1, #31
 8000f16:	4604      	mov	r4, r0
 8000f18:	f005 0501 	and.w	r5, r5, #1
 8000f1c:	60c2      	str	r2, [r0, #12]
 8000f1e:	d512      	bpl.n	8000f46 <_i2c_irq_handler+0x42>
 8000f20:	2300      	movs	r3, #0
 8000f22:	80f3      	strh	r3, [r6, #6]
 8000f24:	f000 f8dc 	bl	80010e0 <_i2c_irq_priority_fixup>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	b11d      	cbz	r5, 8000f3c <_i2c_irq_handler+0x38>
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	8832      	ldrh	r2, [r6, #0]
 8000f40:	ea45 0242 	orr.w	r2, r5, r2, lsl #1
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	f011 0f0a 	tst.w	r1, #10
 8000f4a:	d010      	beq.n	8000f6e <_i2c_irq_handler+0x6a>
 8000f4c:	88b3      	ldrh	r3, [r6, #4]
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d056      	beq.n	8001000 <_i2c_irq_handler+0xfc>
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10a      	bne.n	8000f6c <_i2c_irq_handler+0x68>
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	4620      	mov	r0, r4
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	8ba3      	ldrh	r3, [r4, #28]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d948      	bls.n	8000ffa <_i2c_irq_handler+0xf6>
 8000f68:	f7ff ffb4 	bl	8000ed4 <i2c_start_condition>
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f001 0284 	and.w	r2, r1, #132	; 0x84
 8000f72:	2a80      	cmp	r2, #128	; 0x80
 8000f74:	d114      	bne.n	8000fa0 <_i2c_irq_handler+0x9c>
 8000f76:	8ba5      	ldrh	r5, [r4, #28]
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	d05a      	beq.n	8001032 <_i2c_irq_handler+0x12e>
 8000f7c:	88f1      	ldrh	r1, [r6, #6]
 8000f7e:	68b0      	ldr	r0, [r6, #8]
 8000f80:	1c4b      	adds	r3, r1, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	80f3      	strh	r3, [r6, #6]
 8000f86:	5c41      	ldrb	r1, [r0, r1]
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	6111      	str	r1, [r2, #16]
 8000f8c:	88b1      	ldrh	r1, [r6, #4]
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d105      	bne.n	8000f9e <_i2c_irq_handler+0x9a>
 8000f92:	6853      	ldr	r3, [r2, #4]
 8000f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f98:	6053      	str	r3, [r2, #4]
 8000f9a:	1e6b      	subs	r3, r5, #1
 8000f9c:	83a3      	strh	r3, [r4, #28]
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	f001 0284 	and.w	r2, r1, #132	; 0x84
 8000fa4:	2a84      	cmp	r2, #132	; 0x84
 8000fa6:	d10d      	bne.n	8000fc4 <_i2c_irq_handler+0xc0>
 8000fa8:	8ba1      	ldrh	r1, [r4, #28]
 8000faa:	4620      	mov	r0, r4
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d047      	beq.n	8001040 <_i2c_irq_handler+0x13c>
 8000fb0:	f7ff ff90 	bl	8000ed4 <i2c_start_condition>
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6953      	ldr	r3, [r2, #20]
 8000fb8:	07d9      	lsls	r1, r3, #31
 8000fba:	d5fc      	bpl.n	8000fb6 <_i2c_irq_handler+0xb2>
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	6063      	str	r3, [r4, #4]
 8000fc4:	064b      	lsls	r3, r1, #25
 8000fc6:	d554      	bpl.n	8001072 <_i2c_irq_handler+0x16e>
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	68b2      	ldr	r2, [r6, #8]
 8000fcc:	6919      	ldr	r1, [r3, #16]
 8000fce:	88f3      	ldrh	r3, [r6, #6]
 8000fd0:	1c58      	adds	r0, r3, #1
 8000fd2:	80f0      	strh	r0, [r6, #6]
 8000fd4:	54d1      	strb	r1, [r2, r3]
 8000fd6:	88b3      	ldrh	r3, [r6, #4]
 8000fd8:	88f2      	ldrh	r2, [r6, #6]
 8000fda:	1e59      	subs	r1, r3, #1
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	d13e      	bne.n	800105e <_i2c_irq_handler+0x15a>
 8000fe0:	6822      	ldr	r2, [r4, #0]
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	8ba3      	ldrh	r3, [r4, #28]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d931      	bls.n	8001056 <_i2c_irq_handler+0x152>
 8000ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ff6:	f7ff bf6d 	b.w	8000ed4 <i2c_start_condition>
 8000ffa:	f7ff ff75 	bl	8000ee8 <i2c_stop_condition>
 8000ffe:	e7b5      	b.n	8000f6c <_i2c_irq_handler+0x68>
 8001000:	2b01      	cmp	r3, #1
 8001002:	d908      	bls.n	8001016 <_i2c_irq_handler+0x112>
 8001004:	88f3      	ldrh	r3, [r6, #6]
 8001006:	68b1      	ldr	r1, [r6, #8]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	80f2      	strh	r2, [r6, #6]
 800100c:	5ccb      	ldrb	r3, [r1, r3]
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	6113      	str	r3, [r2, #16]
 8001012:	4629      	mov	r1, r5
 8001014:	e7ab      	b.n	8000f6e <_i2c_irq_handler+0x6a>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1fb      	bne.n	8001012 <_i2c_irq_handler+0x10e>
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff64 	bl	8000ee8 <i2c_stop_condition>
 8001020:	6822      	ldr	r2, [r4, #0]
 8001022:	6853      	ldr	r3, [r2, #4]
 8001024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001028:	6053      	str	r3, [r2, #4]
 800102a:	2302      	movs	r3, #2
 800102c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001030:	e79c      	b.n	8000f6c <_i2c_irq_handler+0x68>
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <_i2c_irq_handler+0x17c>)
 8001034:	f240 1185 	movw	r1, #389	; 0x185
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <_i2c_irq_handler+0x180>)
 800103a:	f001 ff0f 	bl	8002e5c <_fail>
 800103e:	e7ae      	b.n	8000f9e <_i2c_irq_handler+0x9a>
 8001040:	f7ff ff52 	bl	8000ee8 <i2c_stop_condition>
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	6853      	ldr	r3, [r2, #4]
 8001048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800104c:	6053      	str	r3, [r2, #4]
 800104e:	2302      	movs	r3, #2
 8001050:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001054:	e7b6      	b.n	8000fc4 <_i2c_irq_handler+0xc0>
 8001056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800105a:	f7ff bf45 	b.w	8000ee8 <i2c_stop_condition>
 800105e:	429a      	cmp	r2, r3
 8001060:	d107      	bne.n	8001072 <_i2c_irq_handler+0x16e>
 8001062:	8ba3      	ldrh	r3, [r4, #28]
 8001064:	3b01      	subs	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	83a3      	strh	r3, [r4, #28]
 800106a:	b91b      	cbnz	r3, 8001074 <_i2c_irq_handler+0x170>
 800106c:	2302      	movs	r3, #2
 800106e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	330c      	adds	r3, #12
 8001078:	6063      	str	r3, [r4, #4]
 800107a:	e7fa      	b.n	8001072 <_i2c_irq_handler+0x16e>
 800107c:	20001bd8 	.word	0x20001bd8
 8001080:	0800a5b7 	.word	0x0800a5b7
 8001084:	08009e21 	.word	0x08009e21

08001088 <_i2c_irq_error_handler>:
 8001088:	b508      	push	{r3, lr}
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8001092:	6082      	str	r2, [r0, #8]
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]
 800109a:	f7ff ff25 	bl	8000ee8 <i2c_stop_condition>
 800109e:	6802      	ldr	r2, [r0, #0]
 80010a0:	6853      	ldr	r3, [r2, #4]
 80010a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a6:	6053      	str	r3, [r2, #4]
 80010a8:	23ff      	movs	r3, #255	; 0xff
 80010aa:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80010ae:	bd08      	pop	{r3, pc}

080010b0 <__irq_i2c1_ev>:
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <__irq_i2c1_ev+0x8>)
 80010b2:	f7ff bf27 	b.w	8000f04 <_i2c_irq_handler>
 80010b6:	bf00      	nop
 80010b8:	200000a8 	.word	0x200000a8

080010bc <__irq_i2c2_ev>:
 80010bc:	4801      	ldr	r0, [pc, #4]	; (80010c4 <__irq_i2c2_ev+0x8>)
 80010be:	f7ff bf21 	b.w	8000f04 <_i2c_irq_handler>
 80010c2:	bf00      	nop
 80010c4:	200000cc 	.word	0x200000cc

080010c8 <__irq_i2c1_er>:
 80010c8:	4801      	ldr	r0, [pc, #4]	; (80010d0 <__irq_i2c1_er+0x8>)
 80010ca:	f7ff bfdd 	b.w	8001088 <_i2c_irq_error_handler>
 80010ce:	bf00      	nop
 80010d0:	200000a8 	.word	0x200000a8

080010d4 <__irq_i2c2_er>:
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <__irq_i2c2_er+0x8>)
 80010d6:	f7ff bfd7 	b.w	8001088 <_i2c_irq_error_handler>
 80010da:	bf00      	nop
 80010dc:	200000cc 	.word	0x200000cc

080010e0 <_i2c_irq_priority_fixup>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	4604      	mov	r4, r0
 80010e4:	2100      	movs	r1, #0
 80010e6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80010ea:	f000 f807 	bl	80010fc <nvic_irq_set_priority>
 80010ee:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 80010f2:	2100      	movs	r1, #0
 80010f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f8:	f000 b800 	b.w	80010fc <nvic_irq_set_priority>

080010fc <nvic_irq_set_priority>:
 80010fc:	2800      	cmp	r0, #0
 80010fe:	bfa8      	it	ge
 8001100:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001104:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001108:	bfb8      	it	lt
 800110a:	4b05      	ldrlt	r3, [pc, #20]	; (8001120 <nvic_irq_set_priority+0x24>)
 800110c:	b2c9      	uxtb	r1, r1
 800110e:	bfb5      	itete	lt
 8001110:	f000 000f 	andlt.w	r0, r0, #15
 8001114:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001118:	5419      	strblt	r1, [r3, r0]
 800111a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
 800111e:	4770      	bx	lr
 8001120:	e000ed14 	.word	0xe000ed14

08001124 <nvic_init>:
 8001124:	b510      	push	{r4, lr}
 8001126:	2400      	movs	r4, #0
 8001128:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800112c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <nvic_init+0x28>)
 8001132:	4301      	orrs	r1, r0
 8001134:	6091      	str	r1, [r2, #8]
 8001136:	b260      	sxtb	r0, r4
 8001138:	210f      	movs	r1, #15
 800113a:	3401      	adds	r4, #1
 800113c:	f7ff ffde 	bl	80010fc <nvic_irq_set_priority>
 8001140:	2c2b      	cmp	r4, #43	; 0x2b
 8001142:	d1f8      	bne.n	8001136 <nvic_init+0x12>
 8001144:	23f0      	movs	r3, #240	; 0xf0
 8001146:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
 800114a:	bd10      	pop	{r4, pc}
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <nvic_sys_reset>:
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <nvic_sys_reset+0x14>)
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <nvic_sys_reset+0x18>)
 8001154:	68ca      	ldr	r2, [r1, #12]
 8001156:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800115a:	4313      	orrs	r3, r2
 800115c:	60cb      	str	r3, [r1, #12]
 800115e:	f3bf 8f4f 	dsb	sy
 8001162:	e7fe      	b.n	8001162 <nvic_sys_reset+0x12>
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0004 	.word	0x05fa0004

0800116c <rcc_dev_clk>:
 800116c:	4b01      	ldr	r3, [pc, #4]	; (8001174 <rcc_dev_clk+0x8>)
 800116e:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8001172:	4770      	bx	lr
 8001174:	08009f69 	.word	0x08009f69

08001178 <rcc_switch_sysclk>:
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <rcc_switch_sysclk+0x1c>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	f022 0203 	bic.w	r2, r2, #3
 8001180:	4302      	orrs	r2, r0
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	0080      	lsls	r0, r0, #2
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	f002 020c 	and.w	r2, r2, #12
 800118c:	4282      	cmp	r2, r0
 800118e:	d1fa      	bne.n	8001186 <rcc_switch_sysclk+0xe>
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <rcc_turn_on_clk>:
 8001198:	0a03      	lsrs	r3, r0, #8
 800119a:	b2c2      	uxtb	r2, r0
 800119c:	2001      	movs	r0, #1
 800119e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4090      	lsls	r0, r2
 80011aa:	4308      	orrs	r0, r1
 80011ac:	6018      	str	r0, [r3, #0]
 80011ae:	4770      	bx	lr

080011b0 <rcc_turn_off_clk>:
 80011b0:	2101      	movs	r1, #1
 80011b2:	0a03      	lsrs	r3, r0, #8
 80011b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	b2c0      	uxtb	r0, r0
 80011c0:	fa01 f000 	lsl.w	r0, r1, r0
 80011c4:	ea22 0000 	bic.w	r0, r2, r0
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	4770      	bx	lr

080011cc <rcc_is_clk_on>:
 80011cc:	0a03      	lsrs	r3, r0, #8
 80011ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	b2c0      	uxtb	r0, r0
 80011dc:	fa03 f000 	lsl.w	r0, r3, r0
 80011e0:	4210      	tst	r0, r2
 80011e2:	bf14      	ite	ne
 80011e4:	4618      	movne	r0, r3
 80011e6:	2000      	moveq	r0, #0
 80011e8:	4770      	bx	lr

080011ea <rcc_is_clk_ready>:
 80011ea:	0a03      	lsrs	r3, r0, #8
 80011ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	b2c0      	uxtb	r0, r0
 80011fa:	fa03 f000 	lsl.w	r0, r3, r0
 80011fe:	4010      	ands	r0, r2
 8001200:	4770      	bx	lr
	...

08001204 <rcc_configure_pll>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	6843      	ldr	r3, [r0, #4]
 8001208:	4605      	mov	r5, r0
 800120a:	2018      	movs	r0, #24
 800120c:	681c      	ldr	r4, [r3, #0]
 800120e:	f7ff ffdd 	bl	80011cc <rcc_is_clk_on>
 8001212:	b120      	cbz	r0, 800121e <rcc_configure_pll+0x1a>
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <rcc_configure_pll+0x2c>)
 8001216:	2183      	movs	r1, #131	; 0x83
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <rcc_configure_pll+0x30>)
 800121a:	f001 fe1f 	bl	8002e5c <_fail>
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <rcc_configure_pll+0x34>)
 8001220:	6829      	ldr	r1, [r5, #0]
 8001222:	6853      	ldr	r3, [r2, #4]
 8001224:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001228:	430b      	orrs	r3, r1
 800122a:	4323      	orrs	r3, r4
 800122c:	6053      	str	r3, [r2, #4]
 800122e:	bd38      	pop	{r3, r4, r5, pc}
 8001230:	08009f4d 	.word	0x08009f4d
 8001234:	08009ede 	.word	0x08009ede
 8001238:	40021000 	.word	0x40021000

0800123c <rcc_clk_enable>:
 800123c:	b510      	push	{r4, lr}
 800123e:	4604      	mov	r4, r0
 8001240:	f7ff ff94 	bl	800116c <rcc_dev_clk>
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <rcc_clk_enable+0x28>)
 8001246:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <rcc_clk_enable+0x2c>)
 800124c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8001250:	7843      	ldrb	r3, [r0, #1]
 8001252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001256:	2201      	movs	r2, #1
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	bd10      	pop	{r4, pc}
 8001262:	bf00      	nop
 8001264:	200000f0 	.word	0x200000f0
 8001268:	08009f69 	.word	0x08009f69

0800126c <rcc_reset_dev>:
 800126c:	b510      	push	{r4, lr}
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff ff7c 	bl	800116c <rcc_dev_clk>
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <rcc_reset_dev+0x2c>)
 8001276:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <rcc_reset_dev+0x30>)
 800127c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8001280:	7843      	ldrb	r3, [r0, #1]
 8001282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001286:	2201      	movs	r2, #1
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	bd10      	pop	{r4, pc}
 8001296:	bf00      	nop
 8001298:	20000108 	.word	0x20000108
 800129c:	08009f69 	.word	0x08009f69

080012a0 <rcc_set_prescaler>:
 80012a0:	b510      	push	{r4, lr}
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <rcc_set_prescaler+0x18>)
 80012a4:	4c05      	ldr	r4, [pc, #20]	; (80012bc <rcc_set_prescaler+0x1c>)
 80012a6:	6853      	ldr	r3, [r2, #4]
 80012a8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80012ac:	ea23 0300 	bic.w	r3, r3, r0
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6053      	str	r3, [r2, #4]
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	08009e90 	.word	0x08009e90

080012c0 <rcc_clk_disable>:
 80012c0:	b510      	push	{r4, lr}
 80012c2:	4604      	mov	r4, r0
 80012c4:	f7ff ff52 	bl	800116c <rcc_dev_clk>
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <rcc_clk_disable+0x28>)
 80012ca:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <rcc_clk_disable+0x2c>)
 80012d0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80012d4:	7843      	ldrb	r3, [r0, #1]
 80012d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012da:	2200      	movs	r2, #0
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	bd10      	pop	{r4, pc}
 80012e6:	bf00      	nop
 80012e8:	200000fc 	.word	0x200000fc
 80012ec:	08009f69 	.word	0x08009f69

080012f0 <bb_peri_set_bit>:
 80012f0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80012f4:	0080      	lsls	r0, r0, #2
 80012f6:	f100 4084 	add.w	r0, r0, #1107296256	; 0x42000000
 80012fa:	6002      	str	r2, [r0, #0]
 80012fc:	4770      	bx	lr

080012fe <spi_init>:
 80012fe:	b510      	push	{r4, lr}
 8001300:	4604      	mov	r4, r0
 8001302:	7900      	ldrb	r0, [r0, #4]
 8001304:	f7ff ff9a 	bl	800123c <rcc_clk_enable>
 8001308:	7920      	ldrb	r0, [r4, #4]
 800130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800130e:	f7ff bfad 	b.w	800126c <rcc_reset_dev>

08001312 <spi_peripheral_enable>:
 8001312:	2201      	movs	r2, #1
 8001314:	2106      	movs	r1, #6
 8001316:	6800      	ldr	r0, [r0, #0]
 8001318:	f7ff bfea 	b.w	80012f0 <bb_peri_set_bit>

0800131c <spi_peripheral_disable>:
 800131c:	2200      	movs	r2, #0
 800131e:	2106      	movs	r1, #6
 8001320:	6800      	ldr	r0, [r0, #0]
 8001322:	f7ff bfe5 	b.w	80012f0 <bb_peri_set_bit>

08001326 <spi_reconfigure>:
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	6854      	ldr	r4, [r2, #4]
 800132c:	4603      	mov	r3, r0
 800132e:	f024 04e0 	bic.w	r4, r4, #224	; 0xe0
 8001332:	6054      	str	r4, [r2, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	460d      	mov	r5, r1
 8001338:	404a      	eors	r2, r1
 800133a:	f412 5f20 	tst.w	r2, #10240	; 0x2800
 800133e:	d001      	beq.n	8001344 <spi_reconfigure+0x1e>
 8001340:	f7ff ffec 	bl	800131c <spi_peripheral_disable>
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	6015      	str	r5, [r2, #0]
 800134a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800134e:	f7ff bfe0 	b.w	8001312 <spi_peripheral_enable>

08001352 <spi_master_enable>:
 8001352:	4313      	orrs	r3, r2
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	4319      	orrs	r1, r3
 800135a:	f7ff bfe4 	b.w	8001326 <spi_reconfigure>

0800135e <spi_tx_dma_enable>:
 800135e:	2201      	movs	r2, #1
 8001360:	6800      	ldr	r0, [r0, #0]
 8001362:	4611      	mov	r1, r2
 8001364:	3004      	adds	r0, #4
 8001366:	f7ff bfc3 	b.w	80012f0 <bb_peri_set_bit>

0800136a <spi_tx_dma_disable>:
 800136a:	6800      	ldr	r0, [r0, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	3004      	adds	r0, #4
 8001372:	f7ff bfbd 	b.w	80012f0 <bb_peri_set_bit>

08001376 <spi_rx_dma_enable>:
 8001376:	6800      	ldr	r0, [r0, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	2100      	movs	r1, #0
 800137c:	3004      	adds	r0, #4
 800137e:	f7ff bfb7 	b.w	80012f0 <bb_peri_set_bit>

08001382 <spi_rx_dma_disable>:
 8001382:	2200      	movs	r2, #0
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800138c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001390:	4770      	bx	lr

08001392 <spi_config_gpios>:
 8001392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001394:	4610      	mov	r0, r2
 8001396:	9c06      	ldr	r4, [sp, #24]
 8001398:	f89d 701c 	ldrb.w	r7, [sp, #28]
 800139c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80013a0:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 80013a4:	b181      	cbz	r1, 80013c8 <spi_config_gpios+0x36>
 80013a6:	220b      	movs	r2, #11
 80013a8:	4639      	mov	r1, r7
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fd62 	bl	8000e74 <gpio_set_mode>
 80013b0:	2204      	movs	r2, #4
 80013b2:	4631      	mov	r1, r6
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff fd5d 	bl	8000e74 <gpio_set_mode>
 80013ba:	220b      	movs	r2, #11
 80013bc:	4629      	mov	r1, r5
 80013be:	4620      	mov	r0, r4
 80013c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80013c4:	f7ff bd56 	b.w	8000e74 <gpio_set_mode>
 80013c8:	4619      	mov	r1, r3
 80013ca:	2204      	movs	r2, #4
 80013cc:	f7ff fd52 	bl	8000e74 <gpio_set_mode>
 80013d0:	2204      	movs	r2, #4
 80013d2:	4639      	mov	r1, r7
 80013d4:	4620      	mov	r0, r4
 80013d6:	f7ff fd4d 	bl	8000e74 <gpio_set_mode>
 80013da:	220b      	movs	r2, #11
 80013dc:	4631      	mov	r1, r6
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff fd48 	bl	8000e74 <gpio_set_mode>
 80013e4:	2204      	movs	r2, #4
 80013e6:	e7e9      	b.n	80013bc <spi_config_gpios+0x2a>

080013e8 <__default_handler>:
 80013e8:	e7fe      	b.n	80013e8 <__default_handler>
	...

080013ec <systick_init>:
 80013ec:	2207      	movs	r2, #7
 80013ee:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <systick_init+0xc>)
 80013f0:	6058      	str	r0, [r3, #4]
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <__exc_systick>:
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__exc_systick+0x14>)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <__exc_systick+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b103      	cbz	r3, 800140c <__exc_systick+0x10>
 800140a:	4718      	bx	r3
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20001bd8 	.word	0x20001bd8
 8001414:	20000da8 	.word	0x20000da8

08001418 <timer_oc_set_mode>:
 8001418:	f011 0f01 	tst.w	r1, #1
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	f101 34ff 	add.w	r4, r1, #4294967295
 8001422:	bf0d      	iteet	eq
 8001424:	2508      	moveq	r5, #8
 8001426:	2500      	movne	r5, #0
 8001428:	f06f 01ff 	mvnne.w	r1, #255	; 0xff
 800142c:	f46f 417f 	mvneq.w	r1, #65280	; 0xff00
 8001430:	6800      	ldr	r0, [r0, #0]
 8001432:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8001436:	3018      	adds	r0, #24
 8001438:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800143c:	4313      	orrs	r3, r2
 800143e:	4031      	ands	r1, r6
 8001440:	40ab      	lsls	r3, r5
 8001442:	430b      	orrs	r3, r1
 8001444:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
 8001448:	bd70      	pop	{r4, r5, r6, pc}

0800144a <timer_cc_enable>:
 800144a:	6802      	ldr	r2, [r0, #0]
 800144c:	1e4b      	subs	r3, r1, #1
 800144e:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8001452:	3220      	adds	r2, #32
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800145a:	2201      	movs	r2, #1
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	4770      	bx	lr
	...

08001468 <timer_foreach>:
 8001468:	b510      	push	{r4, lr}
 800146a:	4604      	mov	r4, r0
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <timer_foreach+0x1c>)
 800146e:	47a0      	blx	r4
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <timer_foreach+0x20>)
 8001472:	47a0      	blx	r4
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <timer_foreach+0x24>)
 8001476:	47a0      	blx	r4
 8001478:	4623      	mov	r3, r4
 800147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <timer_foreach+0x28>)
 8001480:	4718      	bx	r3
 8001482:	bf00      	nop
 8001484:	20000128 	.word	0x20000128
 8001488:	20000150 	.word	0x20000150
 800148c:	20000174 	.word	0x20000174
 8001490:	20000198 	.word	0x20000198

08001494 <timer_init>:
 8001494:	b510      	push	{r4, lr}
 8001496:	4604      	mov	r4, r0
 8001498:	7900      	ldrb	r0, [r0, #4]
 800149a:	f7ff fecf 	bl	800123c <rcc_clk_enable>
 800149e:	7920      	ldrb	r0, [r4, #4]
 80014a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014a4:	f7ff bee2 	b.w	800126c <rcc_reset_dev>

080014a8 <timer_disable>:
 80014a8:	2200      	movs	r2, #0
 80014aa:	7941      	ldrb	r1, [r0, #5]
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	2901      	cmp	r1, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	bf98      	it	ls
 80014b6:	621a      	strls	r2, [r3, #32]
 80014b8:	4770      	bx	lr
	...

080014bc <timer_has_cc_channel>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	1e4b      	subs	r3, r1, #1
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	460c      	mov	r4, r1
 80014c4:	7905      	ldrb	r5, [r0, #4]
 80014c6:	d905      	bls.n	80014d4 <timer_has_cc_channel+0x18>
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <timer_has_cc_channel+0x48>)
 80014ca:	f240 1105 	movw	r1, #261	; 0x105
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <timer_has_cc_channel+0x4c>)
 80014d0:	f001 fcc4 	bl	8002e5c <_fail>
 80014d4:	2d1e      	cmp	r5, #30
 80014d6:	d910      	bls.n	80014fa <timer_has_cc_channel+0x3e>
 80014d8:	2d21      	cmp	r5, #33	; 0x21
 80014da:	d00e      	beq.n	80014fa <timer_has_cc_channel+0x3e>
 80014dc:	2d20      	cmp	r5, #32
 80014de:	d90e      	bls.n	80014fe <timer_has_cc_channel+0x42>
 80014e0:	2d22      	cmp	r5, #34	; 0x22
 80014e2:	d001      	beq.n	80014e8 <timer_has_cc_channel+0x2c>
 80014e4:	2d25      	cmp	r5, #37	; 0x25
 80014e6:	d104      	bne.n	80014f2 <timer_has_cc_channel+0x36>
 80014e8:	2c02      	cmp	r4, #2
 80014ea:	bf8c      	ite	hi
 80014ec:	2000      	movhi	r0, #0
 80014ee:	2001      	movls	r0, #1
 80014f0:	bd38      	pop	{r3, r4, r5, pc}
 80014f2:	1e63      	subs	r3, r4, #1
 80014f4:	4258      	negs	r0, r3
 80014f6:	4158      	adcs	r0, r3
 80014f8:	e7fa      	b.n	80014f0 <timer_has_cc_channel+0x34>
 80014fa:	2001      	movs	r0, #1
 80014fc:	e7f8      	b.n	80014f0 <timer_has_cc_channel+0x34>
 80014fe:	2000      	movs	r0, #0
 8001500:	e7f6      	b.n	80014f0 <timer_has_cc_channel+0x34>
 8001502:	bf00      	nop
 8001504:	08009fc5 	.word	0x08009fc5
 8001508:	08009fe6 	.word	0x08009fe6

0800150c <timer_detach_interrupt>:
 800150c:	2200      	movs	r2, #0
 800150e:	6803      	ldr	r3, [r0, #0]
 8001510:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8001514:	330c      	adds	r3, #12
 8001516:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001520:	3102      	adds	r1, #2
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 8001528:	4770      	bx	lr

0800152a <input_capture_mode>:
 800152a:	b538      	push	{r3, r4, r5, lr}
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4613      	mov	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	f7ff ff70 	bl	8001418 <timer_oc_set_mode>
 8001538:	4629      	mov	r1, r5
 800153a:	4620      	mov	r0, r4
 800153c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001540:	f7ff bf83 	b.w	800144a <timer_cc_enable>

08001544 <timer_set_mode>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	1e4d      	subs	r5, r1, #1
 8001548:	b2eb      	uxtb	r3, r5
 800154a:	2b03      	cmp	r3, #3
 800154c:	4604      	mov	r4, r0
 800154e:	460e      	mov	r6, r1
 8001550:	4617      	mov	r7, r2
 8001552:	d904      	bls.n	800155e <timer_set_mode+0x1a>
 8001554:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <timer_set_mode+0xbc>)
 8001556:	21d9      	movs	r1, #217	; 0xd9
 8001558:	482a      	ldr	r0, [pc, #168]	; (8001604 <timer_set_mode+0xc0>)
 800155a:	f001 fc7f 	bl	8002e5c <_fail>
 800155e:	7963      	ldrb	r3, [r4, #5]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d104      	bne.n	800156e <timer_set_mode+0x2a>
 8001564:	4a28      	ldr	r2, [pc, #160]	; (8001608 <timer_set_mode+0xc4>)
 8001566:	21dc      	movs	r1, #220	; 0xdc
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <timer_set_mode+0xc0>)
 800156a:	f001 fc77 	bl	8002e5c <_fail>
 800156e:	7963      	ldrb	r3, [r4, #5]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d016      	beq.n	80015a2 <timer_set_mode+0x5e>
 8001574:	2f04      	cmp	r7, #4
 8001576:	d814      	bhi.n	80015a2 <timer_set_mode+0x5e>
 8001578:	e8df f007 	tbb	[pc, r7]
 800157c:	2e2b1403 	.word	0x2e2b1403
 8001580:	3a          	.byte	0x3a
 8001581:	00          	.byte	0x00
 8001582:	4631      	mov	r1, r6
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff ffc1 	bl	800150c <timer_detach_interrupt>
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	00ad      	lsls	r5, r5, #2
 800158e:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8001592:	3320      	adds	r3, #32
 8001594:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001598:	2300      	movs	r3, #0
 800159a:	00ad      	lsls	r5, r5, #2
 800159c:	f105 4584 	add.w	r5, r5, #1107296256	; 0x42000000
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a4:	2200      	movs	r2, #0
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80015ac:	330c      	adds	r3, #12
 80015ae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	2308      	movs	r3, #8
 80015bc:	2260      	movs	r2, #96	; 0x60
 80015be:	4631      	mov	r1, r6
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff ff29 	bl	8001418 <timer_oc_set_mode>
 80015c6:	4631      	mov	r1, r6
 80015c8:	4620      	mov	r0, r4
 80015ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80015ce:	f7ff bf3c 	b.w	800144a <timer_cc_enable>
 80015d2:	2300      	movs	r3, #0
 80015d4:	2210      	movs	r2, #16
 80015d6:	e7f2      	b.n	80015be <timer_set_mode+0x7a>
 80015d8:	f24f 12f1 	movw	r2, #61937	; 0xf1f1
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	2203      	movs	r2, #3
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	2201      	movs	r2, #1
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e7d8      	b.n	80015a2 <timer_set_mode+0x5e>
 80015f0:	4631      	mov	r1, r6
 80015f2:	4620      	mov	r0, r4
 80015f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80015f8:	2201      	movs	r2, #1
 80015fa:	f7ff bf96 	b.w	800152a <input_capture_mode>
 80015fe:	bf00      	nop
 8001600:	0800a054 	.word	0x0800a054
 8001604:	08009fe6 	.word	0x08009fe6
 8001608:	0800a070 	.word	0x0800a070

0800160c <__irq_tim1_brk>:
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <__irq_tim1_brk+0x20>)
 800160e:	b510      	push	{r4, lr}
 8001610:	6814      	ldr	r4, [r2, #0]
 8001612:	68e3      	ldr	r3, [r4, #12]
 8001614:	6921      	ldr	r1, [r4, #16]
 8001616:	400b      	ands	r3, r1
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	d506      	bpl.n	800162a <__irq_tim1_brk+0x1e>
 800161c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800161e:	b123      	cbz	r3, 800162a <__irq_tim1_brk+0x1e>
 8001620:	4798      	blx	r3
 8001622:	6923      	ldr	r3, [r4, #16]
 8001624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001628:	6123      	str	r3, [r4, #16]
 800162a:	bd10      	pop	{r4, pc}
 800162c:	20000128 	.word	0x20000128

08001630 <__irq_tim1_up>:
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <__irq_tim1_up+0x20>)
 8001632:	b510      	push	{r4, lr}
 8001634:	6814      	ldr	r4, [r2, #0]
 8001636:	68e3      	ldr	r3, [r4, #12]
 8001638:	6921      	ldr	r1, [r4, #16]
 800163a:	400b      	ands	r3, r1
 800163c:	07db      	lsls	r3, r3, #31
 800163e:	d506      	bpl.n	800164e <__irq_tim1_up+0x1e>
 8001640:	6893      	ldr	r3, [r2, #8]
 8001642:	b123      	cbz	r3, 800164e <__irq_tim1_up+0x1e>
 8001644:	4798      	blx	r3
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6123      	str	r3, [r4, #16]
 800164e:	bd10      	pop	{r4, pc}
 8001650:	20000128 	.word	0x20000128

08001654 <__irq_tim1_trg_com>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	4d0c      	ldr	r5, [pc, #48]	; (8001688 <__irq_tim1_trg_com+0x34>)
 8001658:	682f      	ldr	r7, [r5, #0]
 800165a:	68fe      	ldr	r6, [r7, #12]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	401e      	ands	r6, r3
 8001660:	f016 0440 	ands.w	r4, r6, #64	; 0x40
 8001664:	d003      	beq.n	800166e <__irq_tim1_trg_com+0x1a>
 8001666:	6a2c      	ldr	r4, [r5, #32]
 8001668:	b10c      	cbz	r4, 800166e <__irq_tim1_trg_com+0x1a>
 800166a:	47a0      	blx	r4
 800166c:	2440      	movs	r4, #64	; 0x40
 800166e:	06b3      	lsls	r3, r6, #26
 8001670:	d504      	bpl.n	800167c <__irq_tim1_trg_com+0x28>
 8001672:	69eb      	ldr	r3, [r5, #28]
 8001674:	b113      	cbz	r3, 800167c <__irq_tim1_trg_com+0x28>
 8001676:	4798      	blx	r3
 8001678:	f044 0420 	orr.w	r4, r4, #32
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	ea23 0404 	bic.w	r4, r3, r4
 8001682:	613c      	str	r4, [r7, #16]
 8001684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001686:	bf00      	nop
 8001688:	20000128 	.word	0x20000128

0800168c <__irq_tim1_cc>:
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	4d13      	ldr	r5, [pc, #76]	; (80016dc <__irq_tim1_cc+0x50>)
 8001690:	682f      	ldr	r7, [r5, #0]
 8001692:	68fe      	ldr	r6, [r7, #12]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	401e      	ands	r6, r3
 8001698:	f016 0410 	ands.w	r4, r6, #16
 800169c:	d003      	beq.n	80016a6 <__irq_tim1_cc+0x1a>
 800169e:	69ac      	ldr	r4, [r5, #24]
 80016a0:	b10c      	cbz	r4, 80016a6 <__irq_tim1_cc+0x1a>
 80016a2:	47a0      	blx	r4
 80016a4:	2410      	movs	r4, #16
 80016a6:	0731      	lsls	r1, r6, #28
 80016a8:	d504      	bpl.n	80016b4 <__irq_tim1_cc+0x28>
 80016aa:	696b      	ldr	r3, [r5, #20]
 80016ac:	b113      	cbz	r3, 80016b4 <__irq_tim1_cc+0x28>
 80016ae:	4798      	blx	r3
 80016b0:	f044 0408 	orr.w	r4, r4, #8
 80016b4:	0772      	lsls	r2, r6, #29
 80016b6:	d504      	bpl.n	80016c2 <__irq_tim1_cc+0x36>
 80016b8:	692b      	ldr	r3, [r5, #16]
 80016ba:	b113      	cbz	r3, 80016c2 <__irq_tim1_cc+0x36>
 80016bc:	4798      	blx	r3
 80016be:	f044 0404 	orr.w	r4, r4, #4
 80016c2:	07b3      	lsls	r3, r6, #30
 80016c4:	d504      	bpl.n	80016d0 <__irq_tim1_cc+0x44>
 80016c6:	68eb      	ldr	r3, [r5, #12]
 80016c8:	b113      	cbz	r3, 80016d0 <__irq_tim1_cc+0x44>
 80016ca:	4798      	blx	r3
 80016cc:	f044 0402 	orr.w	r4, r4, #2
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	ea23 0404 	bic.w	r4, r3, r4
 80016d6:	613c      	str	r4, [r7, #16]
 80016d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000128 	.word	0x20000128

080016e0 <__irq_tim2>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	4d1a      	ldr	r5, [pc, #104]	; (800174c <__irq_tim2+0x6c>)
 80016e4:	682f      	ldr	r7, [r5, #0]
 80016e6:	68fe      	ldr	r6, [r7, #12]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	401e      	ands	r6, r3
 80016ec:	f016 0440 	ands.w	r4, r6, #64	; 0x40
 80016f0:	d003      	beq.n	80016fa <__irq_tim2+0x1a>
 80016f2:	6a2c      	ldr	r4, [r5, #32]
 80016f4:	b10c      	cbz	r4, 80016fa <__irq_tim2+0x1a>
 80016f6:	47a0      	blx	r4
 80016f8:	2440      	movs	r4, #64	; 0x40
 80016fa:	06f3      	lsls	r3, r6, #27
 80016fc:	d504      	bpl.n	8001708 <__irq_tim2+0x28>
 80016fe:	69ab      	ldr	r3, [r5, #24]
 8001700:	b113      	cbz	r3, 8001708 <__irq_tim2+0x28>
 8001702:	4798      	blx	r3
 8001704:	f044 0410 	orr.w	r4, r4, #16
 8001708:	0730      	lsls	r0, r6, #28
 800170a:	d504      	bpl.n	8001716 <__irq_tim2+0x36>
 800170c:	696b      	ldr	r3, [r5, #20]
 800170e:	b113      	cbz	r3, 8001716 <__irq_tim2+0x36>
 8001710:	4798      	blx	r3
 8001712:	f044 0408 	orr.w	r4, r4, #8
 8001716:	0771      	lsls	r1, r6, #29
 8001718:	d504      	bpl.n	8001724 <__irq_tim2+0x44>
 800171a:	692b      	ldr	r3, [r5, #16]
 800171c:	b113      	cbz	r3, 8001724 <__irq_tim2+0x44>
 800171e:	4798      	blx	r3
 8001720:	f044 0404 	orr.w	r4, r4, #4
 8001724:	07b2      	lsls	r2, r6, #30
 8001726:	d504      	bpl.n	8001732 <__irq_tim2+0x52>
 8001728:	68eb      	ldr	r3, [r5, #12]
 800172a:	b113      	cbz	r3, 8001732 <__irq_tim2+0x52>
 800172c:	4798      	blx	r3
 800172e:	f044 0402 	orr.w	r4, r4, #2
 8001732:	07f3      	lsls	r3, r6, #31
 8001734:	d504      	bpl.n	8001740 <__irq_tim2+0x60>
 8001736:	68ab      	ldr	r3, [r5, #8]
 8001738:	b113      	cbz	r3, 8001740 <__irq_tim2+0x60>
 800173a:	4798      	blx	r3
 800173c:	f044 0401 	orr.w	r4, r4, #1
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	ea23 0404 	bic.w	r4, r3, r4
 8001746:	613c      	str	r4, [r7, #16]
 8001748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000150 	.word	0x20000150

08001750 <__irq_tim3>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	4d1a      	ldr	r5, [pc, #104]	; (80017bc <__irq_tim3+0x6c>)
 8001754:	682f      	ldr	r7, [r5, #0]
 8001756:	68fe      	ldr	r6, [r7, #12]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	401e      	ands	r6, r3
 800175c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
 8001760:	d003      	beq.n	800176a <__irq_tim3+0x1a>
 8001762:	6a2c      	ldr	r4, [r5, #32]
 8001764:	b10c      	cbz	r4, 800176a <__irq_tim3+0x1a>
 8001766:	47a0      	blx	r4
 8001768:	2440      	movs	r4, #64	; 0x40
 800176a:	06f3      	lsls	r3, r6, #27
 800176c:	d504      	bpl.n	8001778 <__irq_tim3+0x28>
 800176e:	69ab      	ldr	r3, [r5, #24]
 8001770:	b113      	cbz	r3, 8001778 <__irq_tim3+0x28>
 8001772:	4798      	blx	r3
 8001774:	f044 0410 	orr.w	r4, r4, #16
 8001778:	0730      	lsls	r0, r6, #28
 800177a:	d504      	bpl.n	8001786 <__irq_tim3+0x36>
 800177c:	696b      	ldr	r3, [r5, #20]
 800177e:	b113      	cbz	r3, 8001786 <__irq_tim3+0x36>
 8001780:	4798      	blx	r3
 8001782:	f044 0408 	orr.w	r4, r4, #8
 8001786:	0771      	lsls	r1, r6, #29
 8001788:	d504      	bpl.n	8001794 <__irq_tim3+0x44>
 800178a:	692b      	ldr	r3, [r5, #16]
 800178c:	b113      	cbz	r3, 8001794 <__irq_tim3+0x44>
 800178e:	4798      	blx	r3
 8001790:	f044 0404 	orr.w	r4, r4, #4
 8001794:	07b2      	lsls	r2, r6, #30
 8001796:	d504      	bpl.n	80017a2 <__irq_tim3+0x52>
 8001798:	68eb      	ldr	r3, [r5, #12]
 800179a:	b113      	cbz	r3, 80017a2 <__irq_tim3+0x52>
 800179c:	4798      	blx	r3
 800179e:	f044 0402 	orr.w	r4, r4, #2
 80017a2:	07f3      	lsls	r3, r6, #31
 80017a4:	d504      	bpl.n	80017b0 <__irq_tim3+0x60>
 80017a6:	68ab      	ldr	r3, [r5, #8]
 80017a8:	b113      	cbz	r3, 80017b0 <__irq_tim3+0x60>
 80017aa:	4798      	blx	r3
 80017ac:	f044 0401 	orr.w	r4, r4, #1
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	ea23 0404 	bic.w	r4, r3, r4
 80017b6:	613c      	str	r4, [r7, #16]
 80017b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000174 	.word	0x20000174

080017c0 <__irq_tim4>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	4d1a      	ldr	r5, [pc, #104]	; (800182c <__irq_tim4+0x6c>)
 80017c4:	682f      	ldr	r7, [r5, #0]
 80017c6:	68fe      	ldr	r6, [r7, #12]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	401e      	ands	r6, r3
 80017cc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
 80017d0:	d003      	beq.n	80017da <__irq_tim4+0x1a>
 80017d2:	6a2c      	ldr	r4, [r5, #32]
 80017d4:	b10c      	cbz	r4, 80017da <__irq_tim4+0x1a>
 80017d6:	47a0      	blx	r4
 80017d8:	2440      	movs	r4, #64	; 0x40
 80017da:	06f3      	lsls	r3, r6, #27
 80017dc:	d504      	bpl.n	80017e8 <__irq_tim4+0x28>
 80017de:	69ab      	ldr	r3, [r5, #24]
 80017e0:	b113      	cbz	r3, 80017e8 <__irq_tim4+0x28>
 80017e2:	4798      	blx	r3
 80017e4:	f044 0410 	orr.w	r4, r4, #16
 80017e8:	0730      	lsls	r0, r6, #28
 80017ea:	d504      	bpl.n	80017f6 <__irq_tim4+0x36>
 80017ec:	696b      	ldr	r3, [r5, #20]
 80017ee:	b113      	cbz	r3, 80017f6 <__irq_tim4+0x36>
 80017f0:	4798      	blx	r3
 80017f2:	f044 0408 	orr.w	r4, r4, #8
 80017f6:	0771      	lsls	r1, r6, #29
 80017f8:	d504      	bpl.n	8001804 <__irq_tim4+0x44>
 80017fa:	692b      	ldr	r3, [r5, #16]
 80017fc:	b113      	cbz	r3, 8001804 <__irq_tim4+0x44>
 80017fe:	4798      	blx	r3
 8001800:	f044 0404 	orr.w	r4, r4, #4
 8001804:	07b2      	lsls	r2, r6, #30
 8001806:	d504      	bpl.n	8001812 <__irq_tim4+0x52>
 8001808:	68eb      	ldr	r3, [r5, #12]
 800180a:	b113      	cbz	r3, 8001812 <__irq_tim4+0x52>
 800180c:	4798      	blx	r3
 800180e:	f044 0402 	orr.w	r4, r4, #2
 8001812:	07f3      	lsls	r3, r6, #31
 8001814:	d504      	bpl.n	8001820 <__irq_tim4+0x60>
 8001816:	68ab      	ldr	r3, [r5, #8]
 8001818:	b113      	cbz	r3, 8001820 <__irq_tim4+0x60>
 800181a:	4798      	blx	r3
 800181c:	f044 0401 	orr.w	r4, r4, #1
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	ea23 0404 	bic.w	r4, r3, r4
 8001826:	613c      	str	r4, [r7, #16]
 8001828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800182a:	bf00      	nop
 800182c:	20000198 	.word	0x20000198

08001830 <usart_init>:
 8001830:	b510      	push	{r4, lr}
 8001832:	2200      	movs	r2, #0
 8001834:	4604      	mov	r4, r0
 8001836:	213f      	movs	r1, #63	; 0x3f
 8001838:	6843      	ldr	r3, [r0, #4]
 800183a:	3010      	adds	r0, #16
 800183c:	809a      	strh	r2, [r3, #4]
 800183e:	6018      	str	r0, [r3, #0]
 8001840:	80da      	strh	r2, [r3, #6]
 8001842:	8119      	strh	r1, [r3, #8]
 8001844:	68a3      	ldr	r3, [r4, #8]
 8001846:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 800184a:	809a      	strh	r2, [r3, #4]
 800184c:	80da      	strh	r2, [r3, #6]
 800184e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001852:	8119      	strh	r1, [r3, #8]
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f7ff fcf1 	bl	800123c <rcc_clk_enable>
 800185a:	f994 3091 	ldrsb.w	r3, [r4, #145]	; 0x91
 800185e:	2b00      	cmp	r3, #0
 8001860:	db08      	blt.n	8001874 <usart_init+0x44>
 8001862:	2201      	movs	r2, #1
 8001864:	1159      	asrs	r1, r3, #5
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	4a02      	ldr	r2, [pc, #8]	; (8001878 <usart_init+0x48>)
 8001870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001874:	bd10      	pop	{r4, pc}
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <usart_enable>:
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	4770      	bx	lr

08001890 <usart_disable>:
 8001890:	b510      	push	{r4, lr}
 8001892:	6802      	ldr	r2, [r0, #0]
 8001894:	6883      	ldr	r3, [r0, #8]
 8001896:	889c      	ldrh	r4, [r3, #4]
 8001898:	88d9      	ldrh	r1, [r3, #6]
 800189a:	b289      	uxth	r1, r1
 800189c:	42a1      	cmp	r1, r4
 800189e:	d1fa      	bne.n	8001896 <usart_disable+0x6>
 80018a0:	68d1      	ldr	r1, [r2, #12]
 80018a2:	048c      	lsls	r4, r1, #18
 80018a4:	d502      	bpl.n	80018ac <usart_disable+0x1c>
 80018a6:	6811      	ldr	r1, [r2, #0]
 80018a8:	0649      	lsls	r1, r1, #25
 80018aa:	d5f9      	bpl.n	80018a0 <usart_disable+0x10>
 80018ac:	68d1      	ldr	r1, [r2, #12]
 80018ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80018b2:	60d1      	str	r1, [r2, #12]
 80018b4:	6841      	ldr	r1, [r0, #4]
 80018b6:	888a      	ldrh	r2, [r1, #4]
 80018b8:	b292      	uxth	r2, r2
 80018ba:	80ca      	strh	r2, [r1, #6]
 80018bc:	889a      	ldrh	r2, [r3, #4]
 80018be:	b292      	uxth	r2, r2
 80018c0:	80da      	strh	r2, [r3, #6]
 80018c2:	bd10      	pop	{r4, pc}

080018c4 <usart_tx>:
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	460b      	mov	r3, r1
 80018c8:	4606      	mov	r6, r0
 80018ca:	6804      	ldr	r4, [r0, #0]
 80018cc:	6887      	ldr	r7, [r0, #8]
 80018ce:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 80018d2:	88fd      	ldrh	r5, [r7, #6]
 80018d4:	1a58      	subs	r0, r3, r1
 80018d6:	b2ad      	uxth	r5, r5
 80018d8:	4565      	cmp	r5, ip
 80018da:	d104      	bne.n	80018e6 <usart_tx+0x22>
 80018dc:	6825      	ldr	r5, [r4, #0]
 80018de:	062d      	lsls	r5, r5, #24
 80018e0:	d501      	bpl.n	80018e6 <usart_tx+0x22>
 80018e2:	4282      	cmp	r2, r0
 80018e4:	d810      	bhi.n	8001908 <usart_tx+0x44>
 80018e6:	68e3      	ldr	r3, [r4, #12]
 80018e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ec:	60e3      	str	r3, [r4, #12]
 80018ee:	4290      	cmp	r0, r2
 80018f0:	68b3      	ldr	r3, [r6, #8]
 80018f2:	d30d      	bcc.n	8001910 <usart_tx+0x4c>
 80018f4:	889a      	ldrh	r2, [r3, #4]
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4293      	cmp	r3, r2
 80018fc:	bf1e      	ittt	ne
 80018fe:	68e3      	ldrne	r3, [r4, #12]
 8001900:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001904:	60e3      	strne	r3, [r4, #12]
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	f813 0b01 	ldrb.w	r0, [r3], #1
 800190c:	6060      	str	r0, [r4, #4]
 800190e:	e7de      	b.n	80018ce <usart_tx+0xa>
 8001910:	88dd      	ldrh	r5, [r3, #6]
 8001912:	889f      	ldrh	r7, [r3, #4]
 8001914:	3501      	adds	r5, #1
 8001916:	42bd      	cmp	r5, r7
 8001918:	d0ec      	beq.n	80018f4 <usart_tx+0x30>
 800191a:	88df      	ldrh	r7, [r3, #6]
 800191c:	891d      	ldrh	r5, [r3, #8]
 800191e:	b2ad      	uxth	r5, r5
 8001920:	42bd      	cmp	r5, r7
 8001922:	d103      	bne.n	800192c <usart_tx+0x68>
 8001924:	889d      	ldrh	r5, [r3, #4]
 8001926:	b2ad      	uxth	r5, r5
 8001928:	2d00      	cmp	r5, #0
 800192a:	d0e3      	beq.n	80018f4 <usart_tx+0x30>
 800192c:	88dd      	ldrh	r5, [r3, #6]
 800192e:	f811 c000 	ldrb.w	ip, [r1, r0]
 8001932:	681f      	ldr	r7, [r3, #0]
 8001934:	b2ad      	uxth	r5, r5
 8001936:	f807 c005 	strb.w	ip, [r7, r5]
 800193a:	88df      	ldrh	r7, [r3, #6]
 800193c:	891d      	ldrh	r5, [r3, #8]
 800193e:	3001      	adds	r0, #1
 8001940:	b2ad      	uxth	r5, r5
 8001942:	42bd      	cmp	r5, r7
 8001944:	bf0f      	iteee	eq
 8001946:	2500      	moveq	r5, #0
 8001948:	88dd      	ldrhne	r5, [r3, #6]
 800194a:	3501      	addne	r5, #1
 800194c:	b2ad      	uxthne	r5, r5
 800194e:	80dd      	strh	r5, [r3, #6]
 8001950:	e7cd      	b.n	80018ee <usart_tx+0x2a>

08001952 <usart_putudec>:
 8001952:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001954:	4606      	mov	r6, r0
 8001956:	2400      	movs	r4, #0
 8001958:	220a      	movs	r2, #10
 800195a:	ad01      	add	r5, sp, #4
 800195c:	fbb1 f3f2 	udiv	r3, r1, r2
 8001960:	fb02 1113 	mls	r1, r2, r3, r1
 8001964:	3401      	adds	r4, #1
 8001966:	3130      	adds	r1, #48	; 0x30
 8001968:	1928      	adds	r0, r5, r4
 800196a:	f800 1c01 	strb.w	r1, [r0, #-1]
 800196e:	4619      	mov	r1, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f3      	bne.n	800195c <usart_putudec+0xa>
 8001974:	f114 34ff 	adds.w	r4, r4, #4294967295
 8001978:	d201      	bcs.n	800197e <usart_putudec+0x2c>
 800197a:	b004      	add	sp, #16
 800197c:	bd70      	pop	{r4, r5, r6, pc}
 800197e:	5d2b      	ldrb	r3, [r5, r4]
 8001980:	f88d 3003 	strb.w	r3, [sp, #3]
 8001984:	2201      	movs	r2, #1
 8001986:	f10d 0103 	add.w	r1, sp, #3
 800198a:	4630      	mov	r0, r6
 800198c:	f7ff ff9a 	bl	80018c4 <usart_tx>
 8001990:	2800      	cmp	r0, #0
 8001992:	d0f7      	beq.n	8001984 <usart_putudec+0x32>
 8001994:	e7ee      	b.n	8001974 <usart_putudec+0x22>

08001996 <rb_remove>:
 8001996:	4603      	mov	r3, r0
 8001998:	8882      	ldrh	r2, [r0, #4]
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	b292      	uxth	r2, r2
 800199e:	5c88      	ldrb	r0, [r1, r2]
 80019a0:	8899      	ldrh	r1, [r3, #4]
 80019a2:	891a      	ldrh	r2, [r3, #8]
 80019a4:	b2c0      	uxtb	r0, r0
 80019a6:	b292      	uxth	r2, r2
 80019a8:	428a      	cmp	r2, r1
 80019aa:	bf0f      	iteee	eq
 80019ac:	2200      	moveq	r2, #0
 80019ae:	889a      	ldrhne	r2, [r3, #4]
 80019b0:	3201      	addne	r2, #1
 80019b2:	b292      	uxthne	r2, r2
 80019b4:	809a      	strh	r2, [r3, #4]
 80019b6:	4770      	bx	lr

080019b8 <rb_push_insert>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	88c3      	ldrh	r3, [r0, #6]
 80019bc:	8882      	ldrh	r2, [r0, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	4293      	cmp	r3, r2
 80019c2:	4604      	mov	r4, r0
 80019c4:	460d      	mov	r5, r1
 80019c6:	d007      	beq.n	80019d8 <rb_push_insert+0x20>
 80019c8:	88c2      	ldrh	r2, [r0, #6]
 80019ca:	8903      	ldrh	r3, [r0, #8]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d114      	bne.n	80019fc <rb_push_insert+0x44>
 80019d2:	8883      	ldrh	r3, [r0, #4]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b98b      	cbnz	r3, 80019fc <rb_push_insert+0x44>
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ffdc 	bl	8001996 <rb_remove>
 80019de:	88e3      	ldrh	r3, [r4, #6]
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	54d5      	strb	r5, [r2, r3]
 80019e6:	88e2      	ldrh	r2, [r4, #6]
 80019e8:	8923      	ldrh	r3, [r4, #8]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bf0f      	iteee	eq
 80019f0:	2300      	moveq	r3, #0
 80019f2:	88e3      	ldrhne	r3, [r4, #6]
 80019f4:	3301      	addne	r3, #1
 80019f6:	b29b      	uxthne	r3, r3
 80019f8:	80e3      	strh	r3, [r4, #6]
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	e7ed      	b.n	80019de <rb_push_insert+0x26>

08001a02 <usart_config_gpios_async>:
 8001a02:	b570      	push	{r4, r5, r6, lr}
 8001a04:	461e      	mov	r6, r3
 8001a06:	4605      	mov	r5, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	9c05      	ldr	r4, [sp, #20]
 8001a10:	f7ff fa30 	bl	8000e74 <gpio_set_mode>
 8001a14:	220b      	movs	r2, #11
 8001a16:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f7ff fa2a 	bl	8000e74 <gpio_set_mode>
 8001a20:	682a      	ldr	r2, [r5, #0]
 8001a22:	0263      	lsls	r3, r4, #9
 8001a24:	68d1      	ldr	r1, [r2, #12]
 8001a26:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
 8001a2a:	f421 51f0 	bic.w	r1, r1, #7680	; 0x1e00
 8001a2e:	0409      	lsls	r1, r1, #16
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	430b      	orrs	r3, r1
 8001a34:	60d3      	str	r3, [r2, #12]
 8001a36:	6913      	ldr	r3, [r2, #16]
 8001a38:	0224      	lsls	r4, r4, #8
 8001a3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	f404 5440 	and.w	r4, r4, #12288	; 0x3000
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	431c      	orrs	r4, r3
 8001a48:	6114      	str	r4, [r2, #16]
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}

08001a4c <usart_set_baud_rate>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4606      	mov	r6, r0
 8001a50:	4615      	mov	r5, r2
 8001a52:	460c      	mov	r4, r1
 8001a54:	b941      	cbnz	r1, 8001a68 <usart_set_baud_rate+0x1c>
 8001a56:	f000 f8ad 	bl	8001bb4 <_usart_clock_freq>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	b920      	cbnz	r0, 8001a68 <usart_set_baud_rate+0x1c>
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <usart_set_baud_rate+0x48>)
 8001a60:	21ae      	movs	r1, #174	; 0xae
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <usart_set_baud_rate+0x4c>)
 8001a64:	f001 f9fa 	bl	8002e5c <_fail>
 8001a68:	2219      	movs	r2, #25
 8001a6a:	4362      	muls	r2, r4
 8001a6c:	00ad      	lsls	r5, r5, #2
 8001a6e:	2164      	movs	r1, #100	; 0x64
 8001a70:	fbb2 f2f5 	udiv	r2, r2, r5
 8001a74:	fbb2 f0f1 	udiv	r0, r2, r1
 8001a78:	fb01 2310 	mls	r3, r1, r0, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	3332      	adds	r3, #50	; 0x32
 8001a80:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	6834      	ldr	r4, [r6, #0]
 8001a8a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	60a3      	str	r3, [r4, #8]
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	0800a089 	.word	0x0800a089
 8001a98:	0800a095 	.word	0x0800a095

08001a9c <usart_foreach>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <usart_foreach+0x1c>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	47a0      	blx	r4
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <usart_foreach+0x20>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	47a0      	blx	r4
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <usart_foreach+0x24>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ab6:	4718      	bx	r3
 8001ab8:	200001bc 	.word	0x200001bc
 8001abc:	200001c0 	.word	0x200001c0
 8001ac0:	200001c4 	.word	0x200001c4

08001ac4 <__irq_usart1>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	4c10      	ldr	r4, [pc, #64]	; (8001b08 <__irq_usart1+0x44>)
 8001ac8:	68e3      	ldr	r3, [r4, #12]
 8001aca:	0698      	lsls	r0, r3, #26
 8001acc:	d507      	bpl.n	8001ade <__irq_usart1+0x1a>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	0699      	lsls	r1, r3, #26
 8001ad2:	d504      	bpl.n	8001ade <__irq_usart1+0x1a>
 8001ad4:	6861      	ldr	r1, [r4, #4]
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <__irq_usart1+0x48>)
 8001ad8:	b2c9      	uxtb	r1, r1
 8001ada:	f7ff ff6d 	bl	80019b8 <rb_push_insert>
 8001ade:	68e3      	ldr	r3, [r4, #12]
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	d50b      	bpl.n	8001afc <__irq_usart1+0x38>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	d508      	bpl.n	8001afc <__irq_usart1+0x38>
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <__irq_usart1+0x4c>)
 8001aec:	8882      	ldrh	r2, [r0, #4]
 8001aee:	88c3      	ldrh	r3, [r0, #6]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d003      	beq.n	8001afe <__irq_usart1+0x3a>
 8001af6:	f7ff ff4e 	bl	8001996 <rb_remove>
 8001afa:	6060      	str	r0, [r4, #4]
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	68e3      	ldr	r3, [r4, #12]
 8001b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b04:	60e3      	str	r3, [r4, #12]
 8001b06:	e7f9      	b.n	8001afc <__irq_usart1+0x38>
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	20000dac 	.word	0x20000dac
 8001b10:	20000db8 	.word	0x20000db8

08001b14 <__irq_usart2>:
 8001b14:	b510      	push	{r4, lr}
 8001b16:	4c10      	ldr	r4, [pc, #64]	; (8001b58 <__irq_usart2+0x44>)
 8001b18:	68e3      	ldr	r3, [r4, #12]
 8001b1a:	0698      	lsls	r0, r3, #26
 8001b1c:	d507      	bpl.n	8001b2e <__irq_usart2+0x1a>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	0699      	lsls	r1, r3, #26
 8001b22:	d504      	bpl.n	8001b2e <__irq_usart2+0x1a>
 8001b24:	6861      	ldr	r1, [r4, #4]
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <__irq_usart2+0x48>)
 8001b28:	b2c9      	uxtb	r1, r1
 8001b2a:	f7ff ff45 	bl	80019b8 <rb_push_insert>
 8001b2e:	68e3      	ldr	r3, [r4, #12]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	d50b      	bpl.n	8001b4c <__irq_usart2+0x38>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	d508      	bpl.n	8001b4c <__irq_usart2+0x38>
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <__irq_usart2+0x4c>)
 8001b3c:	8882      	ldrh	r2, [r0, #4]
 8001b3e:	88c3      	ldrh	r3, [r0, #6]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d003      	beq.n	8001b4e <__irq_usart2+0x3a>
 8001b46:	f7ff ff26 	bl	8001996 <rb_remove>
 8001b4a:	6060      	str	r0, [r4, #4]
 8001b4c:	bd10      	pop	{r4, pc}
 8001b4e:	68e3      	ldr	r3, [r4, #12]
 8001b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b54:	60e3      	str	r3, [r4, #12]
 8001b56:	e7f9      	b.n	8001b4c <__irq_usart2+0x38>
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	20000dc4 	.word	0x20000dc4
 8001b60:	20000dd0 	.word	0x20000dd0

08001b64 <__irq_usart3>:
 8001b64:	b510      	push	{r4, lr}
 8001b66:	4c10      	ldr	r4, [pc, #64]	; (8001ba8 <__irq_usart3+0x44>)
 8001b68:	68e3      	ldr	r3, [r4, #12]
 8001b6a:	0698      	lsls	r0, r3, #26
 8001b6c:	d507      	bpl.n	8001b7e <__irq_usart3+0x1a>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	0699      	lsls	r1, r3, #26
 8001b72:	d504      	bpl.n	8001b7e <__irq_usart3+0x1a>
 8001b74:	6861      	ldr	r1, [r4, #4]
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <__irq_usart3+0x48>)
 8001b78:	b2c9      	uxtb	r1, r1
 8001b7a:	f7ff ff1d 	bl	80019b8 <rb_push_insert>
 8001b7e:	68e3      	ldr	r3, [r4, #12]
 8001b80:	061a      	lsls	r2, r3, #24
 8001b82:	d50b      	bpl.n	8001b9c <__irq_usart3+0x38>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	d508      	bpl.n	8001b9c <__irq_usart3+0x38>
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <__irq_usart3+0x4c>)
 8001b8c:	8882      	ldrh	r2, [r0, #4]
 8001b8e:	88c3      	ldrh	r3, [r0, #6]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d003      	beq.n	8001b9e <__irq_usart3+0x3a>
 8001b96:	f7ff fefe 	bl	8001996 <rb_remove>
 8001b9a:	6060      	str	r0, [r4, #4]
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	68e3      	ldr	r3, [r4, #12]
 8001ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba4:	60e3      	str	r3, [r4, #12]
 8001ba6:	e7f9      	b.n	8001b9c <__irq_usart3+0x38>
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	20000ddc 	.word	0x20000ddc
 8001bb0:	20000de8 	.word	0x20000de8

08001bb4 <_usart_clock_freq>:
 8001bb4:	b508      	push	{r3, lr}
 8001bb6:	f890 0090 	ldrb.w	r0, [r0, #144]	; 0x90
 8001bba:	f7ff fad7 	bl	800116c <rcc_dev_clk>
 8001bbe:	b120      	cbz	r0, 8001bca <_usart_clock_freq+0x16>
 8001bc0:	2801      	cmp	r0, #1
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <_usart_clock_freq+0x1c>)
 8001bc4:	bf18      	it	ne
 8001bc6:	2000      	movne	r0, #0
 8001bc8:	bd08      	pop	{r3, pc}
 8001bca:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <_usart_clock_freq+0x20>)
 8001bcc:	e7fc      	b.n	8001bc8 <_usart_clock_freq+0x14>
 8001bce:	bf00      	nop
 8001bd0:	044aa200 	.word	0x044aa200
 8001bd4:	02255100 	.word	0x02255100

08001bd8 <set_rx_tx_status0>:
 8001bd8:	b530      	push	{r4, r5, lr}
 8001bda:	f248 0580 	movw	r5, #32896	; 0x8080
 8001bde:	4c09      	ldr	r4, [pc, #36]	; (8001c04 <set_rx_tx_status0+0x2c>)
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bea:	432a      	orrs	r2, r5
 8001bec:	4042      	eors	r2, r0
 8001bee:	6022      	str	r2, [r4, #0]
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bfa:	432b      	orrs	r3, r5
 8001bfc:	404b      	eors	r3, r1
 8001bfe:	6023      	str	r3, [r4, #0]
 8001c00:	bd30      	pop	{r4, r5, pc}
 8001c02:	bf00      	nop
 8001c04:	40005c00 	.word	0x40005c00

08001c08 <usb_resume>:
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <usb_resume+0xa4>)
 8001c0a:	2807      	cmp	r0, #7
 8001c0c:	bf18      	it	ne
 8001c0e:	7018      	strbne	r0, [r3, #0]
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	2a05      	cmp	r2, #5
 8001c14:	d848      	bhi.n	8001ca8 <usb_resume+0xa0>
 8001c16:	e8df f002 	tbb	[pc, r2]
 8001c1a:	1303      	.short	0x1303
 8001c1c:	362b231e 	.word	0x362b231e
 8001c20:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <usb_resume+0xa8>)
 8001c26:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001c28:	4001      	ands	r1, r0
 8001c2a:	6411      	str	r1, [r2, #64]	; 0x40
 8001c2c:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8001c30:	6411      	str	r1, [r2, #64]	; 0x40
 8001c32:	2206      	movs	r2, #6
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <usb_resume+0xac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	7b5a      	ldrb	r2, [r3, #13]
 8001c3c:	731a      	strb	r2, [r3, #12]
 8001c3e:	4770      	bx	lr
 8001c40:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <usb_resume+0xa8>)
 8001c46:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001c48:	4001      	ands	r1, r0
 8001c4a:	6411      	str	r1, [r2, #64]	; 0x40
 8001c4c:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8001c50:	6411      	str	r1, [r2, #64]	; 0x40
 8001c52:	2204      	movs	r2, #4
 8001c54:	e002      	b.n	8001c5c <usb_resume+0x54>
 8001c56:	2202      	movs	r2, #2
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e006      	b.n	8001c6e <usb_resume+0x66>
 8001c60:	785a      	ldrb	r2, [r3, #1]
 8001c62:	3a01      	subs	r2, #1
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	705a      	strb	r2, [r3, #1]
 8001c68:	785a      	ldrb	r2, [r3, #1]
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	d0f1      	beq.n	8001c52 <usb_resume+0x4a>
 8001c6e:	4770      	bx	lr
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <usb_resume+0xa8>)
 8001c72:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001c74:	b292      	uxth	r2, r2
 8001c76:	f042 0210 	orr.w	r2, r2, #16
 8001c7a:	640a      	str	r2, [r1, #64]	; 0x40
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	220a      	movs	r2, #10
 8001c82:	705a      	strb	r2, [r3, #1]
 8001c84:	4770      	bx	lr
 8001c86:	785a      	ldrb	r2, [r3, #1]
 8001c88:	3a01      	subs	r2, #1
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	705a      	strb	r2, [r3, #1]
 8001c8e:	785a      	ldrb	r2, [r3, #1]
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d1ec      	bne.n	8001c6e <usb_resume+0x66>
 8001c94:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001c98:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <usb_resume+0xa8>)
 8001c9a:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8001c9c:	4002      	ands	r2, r0
 8001c9e:	640a      	str	r2, [r1, #64]	; 0x40
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <usb_resume+0xac>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	7b51      	ldrb	r1, [r2, #13]
 8001ca6:	7311      	strb	r1, [r2, #12]
 8001ca8:	2206      	movs	r2, #6
 8001caa:	e7d7      	b.n	8001c5c <usb_resume+0x54>
 8001cac:	20001be0 	.word	0x20001be0
 8001cb0:	40005c00 	.word	0x40005c00
 8001cb4:	20000384 	.word	0x20000384

08001cb8 <usb_init_usblib>:
 8001cb8:	b570      	push	{r4, r5, r6, lr}
 8001cba:	4604      	mov	r4, r0
 8001cbc:	7b80      	ldrb	r0, [r0, #14]
 8001cbe:	460e      	mov	r6, r1
 8001cc0:	4615      	mov	r5, r2
 8001cc2:	f7ff fabb 	bl	800123c <rcc_clk_enable>
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <usb_init_usblib+0x30>)
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <usb_init_usblib+0x34>)
 8001cca:	4909      	ldr	r1, [pc, #36]	; (8001cf0 <usb_init_usblib+0x38>)
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <usb_init_usblib+0x3c>)
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <usb_init_usblib+0x40>)
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	4909      	ldr	r1, [pc, #36]	; (8001cfc <usb_init_usblib+0x44>)
 8001cd6:	e9c4 6501 	strd	r6, r5, [r4, #4]
 8001cda:	6008      	str	r0, [r1, #0]
 8001cdc:	2102      	movs	r1, #2
 8001cde:	7211      	strb	r1, [r2, #8]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ce6:	4718      	bx	r3
 8001ce8:	20001bf0 	.word	0x20001bf0
 8001cec:	20001c10 	.word	0x20001c10
 8001cf0:	20001be8 	.word	0x20001be8
 8001cf4:	200003a8 	.word	0x200003a8
 8001cf8:	200003f4 	.word	0x200003f4
 8001cfc:	20001c0c 	.word	0x20001c0c

08001d00 <__irq_usb_lp_can_rx0>:
 8001d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d04:	4d66      	ldr	r5, [pc, #408]	; (8001ea0 <__irq_usb_lp_can_rx0+0x1a0>)
 8001d06:	4a67      	ldr	r2, [pc, #412]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b2a4      	uxth	r4, r4
 8001d10:	4023      	ands	r3, r4
 8001d12:	0558      	lsls	r0, r3, #21
 8001d14:	d506      	bpl.n	8001d24 <__irq_usb_lp_can_rx0+0x24>
 8001d16:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <__irq_usb_lp_can_rx0+0x1a8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4798      	blx	r3
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4023      	ands	r3, r4
 8001d2a:	0499      	lsls	r1, r3, #18
 8001d2c:	bf42      	ittt	mi
 8001d2e:	f46f 5100 	mvnmi.w	r1, #8192	; 0x2000
 8001d32:	4a5c      	ldrmi	r2, [pc, #368]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d34:	6451      	strmi	r1, [r2, #68]	; 0x44
 8001d36:	04da      	lsls	r2, r3, #19
 8001d38:	d506      	bpl.n	8001d48 <__irq_usb_lp_can_rx0+0x48>
 8001d3a:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8001d3e:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
 8001d44:	f7ff ff60 	bl	8001c08 <usb_resume>
 8001d48:	6828      	ldr	r0, [r5, #0]
 8001d4a:	6802      	ldr	r2, [r0, #0]
 8001d4c:	4022      	ands	r2, r4
 8001d4e:	0513      	lsls	r3, r2, #20
 8001d50:	d50f      	bpl.n	8001d72 <__irq_usb_lp_can_rx0+0x72>
 8001d52:	4954      	ldr	r1, [pc, #336]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f043 0608 	orr.w	r6, r3, #8
 8001d5c:	f043 030c 	orr.w	r3, r3, #12
 8001d60:	640e      	str	r6, [r1, #64]	; 0x40
 8001d62:	640b      	str	r3, [r1, #64]	; 0x40
 8001d64:	7b03      	ldrb	r3, [r0, #12]
 8001d66:	7343      	strb	r3, [r0, #13]
 8001d68:	2303      	movs	r3, #3
 8001d6a:	7303      	strb	r3, [r0, #12]
 8001d6c:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8001d70:	644b      	str	r3, [r1, #68]	; 0x44
 8001d72:	0597      	lsls	r7, r2, #22
 8001d74:	bf42      	ittt	mi
 8001d76:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
 8001d7a:	4b4a      	ldrmi	r3, [pc, #296]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d7c:	6459      	strmi	r1, [r3, #68]	; 0x44
 8001d7e:	05d6      	lsls	r6, r2, #23
 8001d80:	d506      	bpl.n	8001d90 <__irq_usb_lp_can_rx0+0x90>
 8001d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001d88:	2007      	movs	r0, #7
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d8c:	f7ff ff3c 	bl	8001c08 <usb_resume>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	401c      	ands	r4, r3
 8001d96:	0420      	lsls	r0, r4, #16
 8001d98:	d507      	bpl.n	8001daa <__irq_usb_lp_can_rx0+0xaa>
 8001d9a:	f46f 4800 	mvn.w	r8, #32768	; 0x8000
 8001d9e:	f648 790f 	movw	r9, #36623	; 0x8f0f
 8001da2:	4f40      	ldr	r7, [pc, #256]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001da4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001da6:	0423      	lsls	r3, r4, #16
 8001da8:	d401      	bmi.n	8001dae <__irq_usb_lp_can_rx0+0xae>
 8001daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dae:	f014 060f 	ands.w	r6, r4, #15
 8001db2:	f8c7 8044 	str.w	r8, [r7, #68]	; 0x44
 8001db6:	d14b      	bne.n	8001e50 <__irq_usb_lp_can_rx0+0x150>
 8001db8:	f648 0380 	movw	r3, #34944	; 0x8880
 8001dbc:	683e      	ldr	r6, [r7, #0]
 8001dbe:	421e      	tst	r6, r3
 8001dc0:	d0f0      	beq.n	8001da4 <__irq_usb_lp_can_rx0+0xa4>
 8001dc2:	b2b3      	uxth	r3, r6
 8001dc4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001eb8 <__irq_usb_lp_can_rx0+0x1b8>
 8001dc8:	4d38      	ldr	r5, [pc, #224]	; (8001eac <__irq_usb_lp_can_rx0+0x1ac>)
 8001dca:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8001dce:	2120      	movs	r1, #32
 8001dd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001dd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dd8:	802b      	strh	r3, [r5, #0]
 8001dda:	f8a8 2000 	strh.w	r2, [r8]
 8001dde:	f7ff fefb 	bl	8001bd8 <set_rx_tx_status0>
 8001de2:	06e1      	lsls	r1, r4, #27
 8001de4:	f006 0380 	and.w	r3, r6, #128	; 0x80
 8001de8:	d418      	bmi.n	8001e1c <__irq_usb_lp_can_rx0+0x11c>
 8001dea:	b92b      	cbnz	r3, 8001df8 <__irq_usb_lp_can_rx0+0xf8>
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <__irq_usb_lp_can_rx0+0x1b0>)
 8001dee:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001df2:	4830      	ldr	r0, [pc, #192]	; (8001eb4 <__irq_usb_lp_can_rx0+0x1b4>)
 8001df4:	f001 f832 	bl	8002e5c <_fail>
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <__irq_usb_lp_can_rx0+0x1a4>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	f000 ff01 	bl	8002c10 <In0_Process>
 8001e0e:	8829      	ldrh	r1, [r5, #0]
 8001e10:	f8b8 0000 	ldrh.w	r0, [r8]
 8001e14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e18:	f7ff bede 	b.w	8001bd8 <set_rx_tx_status0>
 8001e1c:	b143      	cbz	r3, 8001e30 <__irq_usb_lp_can_rx0+0x130>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	e7ec      	b.n	8001e0a <__irq_usb_lp_can_rx0+0x10a>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	0532      	lsls	r2, r6, #20
 8001e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e38:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001e3c:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	d502      	bpl.n	8001e4a <__irq_usb_lp_can_rx0+0x14a>
 8001e44:	f000 fd0c 	bl	8002860 <Setup0_Process>
 8001e48:	e7e1      	b.n	8001e0e <__irq_usb_lp_can_rx0+0x10e>
 8001e4a:	f000 fe65 	bl	8002b18 <Out0_Process>
 8001e4e:	e7de      	b.n	8001e0e <__irq_usb_lp_can_rx0+0x10e>
 8001e50:	00b4      	lsls	r4, r6, #2
 8001e52:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001e56:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001e5a:	f8d4 a000 	ldr.w	sl, [r4]
 8001e5e:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8001e62:	d00d      	beq.n	8001e80 <__irq_usb_lp_can_rx0+0x180>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	682a      	ldr	r2, [r5, #0]
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	0d1b      	lsrs	r3, r3, #20
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	6892      	ldr	r2, [r2, #8]
 8001e74:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	4798      	blx	r3
 8001e80:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001e84:	d08e      	beq.n	8001da4 <__irq_usb_lp_can_rx0+0xa4>
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001e8c:	ea03 0309 	and.w	r3, r3, r9
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	3e01      	subs	r6, #1
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8001e9c:	4798      	blx	r3
 8001e9e:	e781      	b.n	8001da4 <__irq_usb_lp_can_rx0+0xa4>
 8001ea0:	20000384 	.word	0x20000384
 8001ea4:	40005c00 	.word	0x40005c00
 8001ea8:	20001be8 	.word	0x20001be8
 8001eac:	20001bde 	.word	0x20001bde
 8001eb0:	0800a106 	.word	0x0800a106
 8001eb4:	0800a11a 	.word	0x0800a11a
 8001eb8:	20001bdc 	.word	0x20001bdc

08001ebc <usb_set_ep_rx_stat>:
 8001ebc:	0080      	lsls	r0, r0, #2
 8001ebe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ec2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001ec6:	6803      	ldr	r3, [r0, #0]
 8001ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	4059      	eors	r1, r3
 8001eda:	6001      	str	r1, [r0, #0]
 8001edc:	4770      	bx	lr
	...

08001ee0 <vcomGetSetLineCoding>:
 8001ee0:	b918      	cbnz	r0, 8001eea <vcomGetSetLineCoding+0xa>
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <vcomGetSetLineCoding+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	821a      	strh	r2, [r3, #16]
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <vcomGetSetLineCoding+0x14>)
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20001c10 	.word	0x20001c10
 8001ef4:	20000450 	.word	0x20000450

08001ef8 <usbInit>:
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2101      	movs	r1, #1
 8001efc:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <usbInit+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	729a      	strb	r2, [r3, #10]
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <usbInit+0x38>)
 8001f08:	6419      	str	r1, [r3, #64]	; 0x40
 8001f0a:	490a      	ldr	r1, [pc, #40]	; (8001f34 <usbInit+0x3c>)
 8001f0c:	6809      	ldr	r1, [r1, #0]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
 8001f12:	6418      	str	r0, [r3, #64]	; 0x40
 8001f14:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
 8001f1a:	6008      	str	r0, [r1, #0]
 8001f1c:	6418      	str	r0, [r3, #64]	; 0x40
 8001f1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <usbInit+0x40>)
 8001f24:	6018      	str	r0, [r3, #0]
 8001f26:	730a      	strb	r2, [r1, #12]
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20001c10 	.word	0x20001c10
 8001f30:	40005c00 	.word	0x40005c00
 8001f34:	20000384 	.word	0x20000384
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <usbNoDataSetup>:
 8001f3c:	b513      	push	{r0, r1, r4, lr}
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <usbNoDataSetup+0x44>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	7813      	ldrb	r3, [r2, #0]
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	2b21      	cmp	r3, #33	; 0x21
 8001f4a:	d116      	bne.n	8001f7a <usbNoDataSetup+0x3e>
 8001f4c:	2802      	cmp	r0, #2
 8001f4e:	d008      	beq.n	8001f62 <usbNoDataSetup+0x26>
 8001f50:	2822      	cmp	r0, #34	; 0x22
 8001f52:	d001      	beq.n	8001f58 <usbNoDataSetup+0x1c>
 8001f54:	2402      	movs	r4, #2
 8001f56:	e005      	b.n	8001f64 <usbNoDataSetup+0x28>
 8001f58:	7893      	ldrb	r3, [r2, #2]
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <usbNoDataSetup+0x48>)
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	7013      	strb	r3, [r2, #0]
 8001f62:	2400      	movs	r4, #0
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <usbNoDataSetup+0x4c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b123      	cbz	r3, 8001f74 <usbNoDataSetup+0x38>
 8001f6a:	a902      	add	r1, sp, #8
 8001f6c:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8001f70:	2002      	movs	r0, #2
 8001f72:	4798      	blx	r3
 8001f74:	4620      	mov	r0, r4
 8001f76:	b002      	add	sp, #8
 8001f78:	bd10      	pop	{r4, pc}
 8001f7a:	2402      	movs	r4, #2
 8001f7c:	e7fa      	b.n	8001f74 <usbNoDataSetup+0x38>
 8001f7e:	bf00      	nop
 8001f80:	20001c10 	.word	0x20001c10
 8001f84:	20000df8 	.word	0x20000df8
 8001f88:	20000df4 	.word	0x20000df4

08001f8c <usbGetInterfaceSetting>:
 8001f8c:	b921      	cbnz	r1, 8001f98 <usbGetInterfaceSetting+0xc>
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	bf8c      	ite	hi
 8001f92:	2002      	movhi	r0, #2
 8001f94:	2000      	movls	r0, #0
 8001f96:	4770      	bx	lr
 8001f98:	2002      	movs	r0, #2
 8001f9a:	4770      	bx	lr

08001f9c <usbSetConfiguration>:
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <usbSetConfiguration+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	7a9b      	ldrb	r3, [r3, #10]
 8001fa2:	b11b      	cbz	r3, 8001fac <usbSetConfiguration+0x10>
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <usbSetConfiguration+0x18>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	731a      	strb	r2, [r3, #12]
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20001c10 	.word	0x20001c10
 8001fb4:	20000384 	.word	0x20000384

08001fb8 <usbSetDeviceAddress>:
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <usbSetDeviceAddress+0xc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	731a      	strb	r2, [r3, #12]
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000384 	.word	0x20000384

08001fc8 <usbGetStringDescriptor>:
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <usbGetStringDescriptor+0x18>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	789b      	ldrb	r3, [r3, #2]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d804      	bhi.n	8001fdc <usbGetStringDescriptor+0x14>
 8001fd2:	4904      	ldr	r1, [pc, #16]	; (8001fe4 <usbGetStringDescriptor+0x1c>)
 8001fd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001fd8:	f000 bc14 	b.w	8002804 <Standard_GetDescriptorData>
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4770      	bx	lr
 8001fe0:	20001c10 	.word	0x20001c10
 8001fe4:	200003dc 	.word	0x200003dc

08001fe8 <usbGetConfigDescriptor>:
 8001fe8:	4901      	ldr	r1, [pc, #4]	; (8001ff0 <usbGetConfigDescriptor+0x8>)
 8001fea:	f000 bc0b 	b.w	8002804 <Standard_GetDescriptorData>
 8001fee:	bf00      	nop
 8001ff0:	20000398 	.word	0x20000398

08001ff4 <usbGetDeviceDescriptor>:
 8001ff4:	4901      	ldr	r1, [pc, #4]	; (8001ffc <usbGetDeviceDescriptor+0x8>)
 8001ff6:	f000 bc05 	b.w	8002804 <Standard_GetDescriptorData>
 8001ffa:	bf00      	nop
 8001ffc:	200003a0 	.word	0x200003a0

08002000 <usbDataSetup>:
 8002000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002002:	4c11      	ldr	r4, [pc, #68]	; (8002048 <usbDataSetup+0x48>)
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800200c:	2a21      	cmp	r2, #33	; 0x21
 800200e:	d002      	beq.n	8002016 <usbDataSetup+0x16>
 8002010:	2002      	movs	r0, #2
 8002012:	b003      	add	sp, #12
 8002014:	bd30      	pop	{r4, r5, pc}
 8002016:	f1a0 0320 	sub.w	r3, r0, #32
 800201a:	2b01      	cmp	r3, #1
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <usbDataSetup+0x4c>)
 800201e:	4d0c      	ldr	r5, [pc, #48]	; (8002050 <usbDataSetup+0x50>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	bf88      	it	hi
 8002024:	2500      	movhi	r5, #0
 8002026:	b123      	cbz	r3, 8002032 <usbDataSetup+0x32>
 8002028:	a902      	add	r1, sp, #8
 800202a:	f801 0d01 	strb.w	r0, [r1, #-1]!
 800202e:	2002      	movs	r0, #2
 8002030:	4798      	blx	r3
 8002032:	2d00      	cmp	r5, #0
 8002034:	d0ec      	beq.n	8002010 <usbDataSetup+0x10>
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	2400      	movs	r4, #0
 800203a:	619d      	str	r5, [r3, #24]
 800203c:	825c      	strh	r4, [r3, #18]
 800203e:	4620      	mov	r0, r4
 8002040:	47a8      	blx	r5
 8002042:	4620      	mov	r0, r4
 8002044:	e7e5      	b.n	8002012 <usbDataSetup+0x12>
 8002046:	bf00      	nop
 8002048:	20001c10 	.word	0x20001c10
 800204c:	20000df4 	.word	0x20000df4
 8002050:	08001ee1 	.word	0x08001ee1

08002054 <vcomDataRxCb>:
 8002054:	491c      	ldr	r1, [pc, #112]	; (80020c8 <vcomDataRxCb+0x74>)
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <vcomDataRxCb+0x78>)
 8002058:	680b      	ldr	r3, [r1, #0]
 800205a:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800205c:	f202 423c 	addw	r2, r2, #1084	; 0x43c
 8002060:	0040      	lsls	r0, r0, #1
 8002062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002066:	5814      	ldr	r4, [r2, r0]
 8002068:	2200      	movs	r2, #0
 800206a:	4608      	mov	r0, r1
 800206c:	4616      	mov	r6, r2
 800206e:	4d18      	ldr	r5, [pc, #96]	; (80020d0 <vcomDataRxCb+0x7c>)
 8002070:	4f18      	ldr	r7, [pc, #96]	; (80020d4 <vcomDataRxCb+0x80>)
 8002072:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002076:	42a2      	cmp	r2, r4
 8002078:	d313      	bcc.n	80020a2 <vcomDataRxCb+0x4e>
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <vcomDataRxCb+0x84>)
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2bbf      	cmp	r3, #191	; 0xbf
 8002086:	d804      	bhi.n	8002092 <vcomDataRxCb+0x3e>
 8002088:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800208c:	2003      	movs	r0, #3
 800208e:	f7ff ff15 	bl	8001ebc <usb_set_ep_rx_stat>
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <vcomDataRxCb+0x88>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b1ab      	cbz	r3, 80020c4 <vcomDataRxCb+0x70>
 8002098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800209c:	2100      	movs	r1, #0
 800209e:	2001      	movs	r0, #1
 80020a0:	4718      	bx	r3
 80020a2:	07d1      	lsls	r1, r2, #31
 80020a4:	bf57      	itett	pl
 80020a6:	6829      	ldrpl	r1, [r5, #0]
 80020a8:	0a31      	lsrmi	r1, r6, #8
 80020aa:	b28e      	uxthpl	r6, r1
 80020ac:	6829      	ldrpl	r1, [r5, #0]
 80020ae:	f102 0201 	add.w	r2, r2, #1
 80020b2:	bf58      	it	pl
 80020b4:	b2c9      	uxtbpl	r1, r1
 80020b6:	54f9      	strb	r1, [r7, r3]
 80020b8:	f103 0301 	add.w	r3, r3, #1
 80020bc:	bf58      	it	pl
 80020be:	3504      	addpl	r5, #4
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e7d8      	b.n	8002076 <vcomDataRxCb+0x22>
 80020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c8:	20000dfc 	.word	0x20000dfc
 80020cc:	40005c00 	.word	0x40005c00
 80020d0:	40006220 	.word	0x40006220
 80020d4:	20000e14 	.word	0x20000e14
 80020d8:	20000e04 	.word	0x20000e04
 80020dc:	20000e00 	.word	0x20000e00

080020e0 <vcomDataTxCb>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <vcomDataTxCb+0x84>)
 80020e4:	4c20      	ldr	r4, [pc, #128]	; (8002168 <vcomDataTxCb+0x88>)
 80020e6:	4921      	ldr	r1, [pc, #132]	; (800216c <vcomDataTxCb+0x8c>)
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80020f2:	d105      	bne.n	8002100 <vcomDataTxCb+0x20>
 80020f4:	780a      	ldrb	r2, [r1, #0]
 80020f6:	3a01      	subs	r2, #1
 80020f8:	b252      	sxtb	r2, r2
 80020fa:	700a      	strb	r2, [r1, #0]
 80020fc:	b302      	cbz	r2, 8002140 <vcomDataTxCb+0x60>
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002100:	2001      	movs	r0, #1
 8002102:	7008      	strb	r0, [r1, #0]
 8002104:	2000      	movs	r0, #0
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	bf28      	it	cs
 800210a:	2340      	movcs	r3, #64	; 0x40
 800210c:	4606      	mov	r6, r0
 800210e:	4d18      	ldr	r5, [pc, #96]	; (8002170 <vcomDataTxCb+0x90>)
 8002110:	4f18      	ldr	r7, [pc, #96]	; (8002174 <vcomDataTxCb+0x94>)
 8002112:	5cb9      	ldrb	r1, [r7, r2]
 8002114:	f010 0f01 	tst.w	r0, #1
 8002118:	b2c9      	uxtb	r1, r1
 800211a:	bf18      	it	ne
 800211c:	ea46 2101 	orrne.w	r1, r6, r1, lsl #8
 8002120:	f100 0001 	add.w	r0, r0, #1
 8002124:	bf18      	it	ne
 8002126:	6029      	strne	r1, [r5, #0]
 8002128:	f102 0201 	add.w	r2, r2, #1
 800212c:	bf0c      	ite	eq
 800212e:	b28e      	uxtheq	r6, r1
 8002130:	3504      	addne	r5, #4
 8002132:	4283      	cmp	r3, r0
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	d1ec      	bne.n	8002112 <vcomDataTxCb+0x32>
 8002138:	07d9      	lsls	r1, r3, #31
 800213a:	bf48      	it	mi
 800213c:	602e      	strmi	r6, [r5, #0]
 800213e:	6022      	str	r2, [r4, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <vcomDataTxCb+0x98>)
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <vcomDataTxCb+0x9c>)
 8002144:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8002146:	0040      	lsls	r0, r0, #1
 8002148:	500b      	str	r3, [r1, r0]
 800214a:	6853      	ldr	r3, [r2, #4]
 800214c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002160:	6053      	str	r3, [r2, #4]
 8002162:	e7cc      	b.n	80020fe <vcomDataTxCb+0x1e>
 8002164:	20000e0c 	.word	0x20000e0c
 8002168:	20000e10 	.word	0x20000e10
 800216c:	20000e08 	.word	0x20000e08
 8002170:	40006180 	.word	0x40006180
 8002174:	20000f14 	.word	0x20000f14
 8002178:	40005c00 	.word	0x40005c00
 800217c:	40006014 	.word	0x40006014

08002180 <usb_cdcacm_tx.part.2>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <usb_cdcacm_tx.part.2+0x44>)
 8002184:	4c10      	ldr	r4, [pc, #64]	; (80021c8 <usb_cdcacm_tx.part.2+0x48>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	6824      	ldr	r4, [r4, #0]
 800218a:	1b1c      	subs	r4, r3, r4
 800218c:	43e4      	mvns	r4, r4
 800218e:	b2e4      	uxtb	r4, r4
 8002190:	428c      	cmp	r4, r1
 8002192:	bf28      	it	cs
 8002194:	460c      	movcs	r4, r1
 8002196:	b16c      	cbz	r4, 80021b4 <usb_cdcacm_tx.part.2+0x34>
 8002198:	2100      	movs	r1, #0
 800219a:	4e0c      	ldr	r6, [pc, #48]	; (80021cc <usb_cdcacm_tx.part.2+0x4c>)
 800219c:	b28d      	uxth	r5, r1
 800219e:	42ac      	cmp	r4, r5
 80021a0:	f101 0101 	add.w	r1, r1, #1
 80021a4:	d808      	bhi.n	80021b8 <usb_cdcacm_tx.part.2+0x38>
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <usb_cdcacm_tx.part.2+0x50>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	d501      	bpl.n	80021b4 <usb_cdcacm_tx.part.2+0x34>
 80021b0:	f7ff ff96 	bl	80020e0 <vcomDataTxCb>
 80021b4:	4620      	mov	r0, r4
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	5d45      	ldrb	r5, [r0, r5]
 80021ba:	54f5      	strb	r5, [r6, r3]
 80021bc:	3301      	adds	r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e7ec      	b.n	800219c <usb_cdcacm_tx.part.2+0x1c>
 80021c2:	bf00      	nop
 80021c4:	20000e0c 	.word	0x20000e0c
 80021c8:	20000e10 	.word	0x20000e10
 80021cc:	20000f14 	.word	0x20000f14
 80021d0:	20000e08 	.word	0x20000e08

080021d4 <usbReset>:
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d8:	2500      	movs	r5, #0
 80021da:	f04f 09c0 	mov.w	r9, #192	; 0xc0
 80021de:	f648 168f 	movw	r6, #35215	; 0x898f
 80021e2:	f248 0780 	movw	r7, #32896	; 0x8080
 80021e6:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <usbReset+0x124>)
 80021ec:	4c43      	ldr	r4, [pc, #268]	; (80022fc <usbReset+0x128>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800232c <usbReset+0x158>
 80021f4:	729d      	strb	r5, [r3, #10]
 80021f6:	f883 9009 	strb.w	r9, [r3, #9]
 80021fa:	6525      	str	r5, [r4, #80]	; 0x50
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	4628      	mov	r0, r5
 8002200:	4033      	ands	r3, r6
 8002202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	ea03 0308 	and.w	r3, r3, r8
 800220e:	433b      	orrs	r3, r7
 8002210:	f083 0310 	eor.w	r3, r3, #16
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <usbReset+0x12c>)
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	f843 a002 	str.w	sl, [r3, r2]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800222a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	6023      	str	r3, [r4, #0]
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <usbReset+0x130>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002248:	f000 f90a 	bl	8002460 <usb_set_ep_rx_count>
 800224c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002250:	4628      	mov	r0, r5
 8002252:	f7ff fe33 	bl	8001ebc <usb_set_ep_rx_stat>
 8002256:	68a3      	ldr	r3, [r4, #8]
 8002258:	4629      	mov	r1, r5
 800225a:	4033      	ands	r3, r6
 800225c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002260:	60a3      	str	r3, [r4, #8]
 8002262:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <usbReset+0x134>)
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	4413      	add	r3, r2
 800226a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	68a2      	ldr	r2, [r4, #8]
 8002272:	2002      	movs	r0, #2
 8002274:	ea02 0208 	and.w	r2, r2, r8
 8002278:	433a      	orrs	r2, r7
 800227a:	f082 0220 	eor.w	r2, r2, #32
 800227e:	60a2      	str	r2, [r4, #8]
 8002280:	f7ff fe1c 	bl	8001ebc <usb_set_ep_rx_stat>
 8002284:	68e3      	ldr	r3, [r4, #12]
 8002286:	4651      	mov	r1, sl
 8002288:	4033      	ands	r3, r6
 800228a:	60e3      	str	r3, [r4, #12]
 800228c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <usbReset+0x138>)
 8002290:	0052      	lsls	r2, r2, #1
 8002292:	4413      	add	r3, r2
 8002294:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002298:	2003      	movs	r0, #3
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f000 f8e0 	bl	8002460 <usb_set_ep_rx_count>
 80022a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80022a4:	2003      	movs	r0, #3
 80022a6:	f7ff fe09 	bl	8001ebc <usb_set_ep_rx_stat>
 80022aa:	6863      	ldr	r3, [r4, #4]
 80022ac:	4629      	mov	r1, r5
 80022ae:	401e      	ands	r6, r3
 80022b0:	6066      	str	r6, [r4, #4]
 80022b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <usbReset+0x13c>)
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	f843 9002 	str.w	r9, [r3, r2]
 80022bc:	6863      	ldr	r3, [r4, #4]
 80022be:	2001      	movs	r0, #1
 80022c0:	ea03 0308 	and.w	r3, r3, r8
 80022c4:	433b      	orrs	r3, r7
 80022c6:	f083 0320 	eor.w	r3, r3, #32
 80022ca:	6063      	str	r3, [r4, #4]
 80022cc:	f7ff fdf6 	bl	8001ebc <usb_set_ep_rx_stat>
 80022d0:	2201      	movs	r2, #1
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <usbReset+0x140>)
 80022d4:	4628      	mov	r0, r5
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	731a      	strb	r2, [r3, #12]
 80022da:	f000 fc7d 	bl	8002bd8 <SetDeviceAddress>
 80022de:	22ff      	movs	r2, #255	; 0xff
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <usbReset+0x144>)
 80022e2:	601d      	str	r5, [r3, #0]
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <usbReset+0x148>)
 80022e6:	601d      	str	r5, [r3, #0]
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <usbReset+0x14c>)
 80022ea:	601d      	str	r5, [r3, #0]
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <usbReset+0x150>)
 80022ee:	601d      	str	r5, [r3, #0]
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <usbReset+0x154>)
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f8:	20001c10 	.word	0x20001c10
 80022fc:	40005c00 	.word	0x40005c00
 8002300:	40006008 	.word	0x40006008
 8002304:	20001be8 	.word	0x20001be8
 8002308:	40006020 	.word	0x40006020
 800230c:	40006038 	.word	0x40006038
 8002310:	40006010 	.word	0x40006010
 8002314:	20000384 	.word	0x20000384
 8002318:	20000dfc 	.word	0x20000dfc
 800231c:	20000e04 	.word	0x20000e04
 8002320:	20000e0c 	.word	0x20000e0c
 8002324:	20000e10 	.word	0x20000e10
 8002328:	20000e08 	.word	0x20000e08
 800232c:	ffff8fbf 	.word	0xffff8fbf

08002330 <usb_cdcacm_set_hooks>:
 8002330:	07c2      	lsls	r2, r0, #31
 8002332:	bf44      	itt	mi
 8002334:	4b03      	ldrmi	r3, [pc, #12]	; (8002344 <usb_cdcacm_set_hooks+0x14>)
 8002336:	6019      	strmi	r1, [r3, #0]
 8002338:	0783      	lsls	r3, r0, #30
 800233a:	bf44      	itt	mi
 800233c:	4b02      	ldrmi	r3, [pc, #8]	; (8002348 <usb_cdcacm_set_hooks+0x18>)
 800233e:	6019      	strmi	r1, [r3, #0]
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000e00 	.word	0x20000e00
 8002348:	20000df4 	.word	0x20000df4

0800234c <usb_cdcacm_enable>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	460c      	mov	r4, r1
 8002350:	4605      	mov	r5, r0
 8002352:	b138      	cbz	r0, 8002364 <usb_cdcacm_enable+0x18>
 8002354:	2203      	movs	r2, #3
 8002356:	f7fe fd8d 	bl	8000e74 <gpio_set_mode>
 800235a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	40a1      	lsls	r1, r4
 8002362:	6119      	str	r1, [r3, #16]
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <usb_cdcacm_enable+0x28>)
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <usb_cdcacm_enable+0x2c>)
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	4904      	ldr	r1, [pc, #16]	; (800237c <usb_cdcacm_enable+0x30>)
 800236c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002370:	f7ff bca2 	b.w	8001cb8 <usb_init_usblib>
 8002374:	20000384 	.word	0x20000384
 8002378:	20000434 	.word	0x20000434
 800237c:	20000418 	.word	0x20000418

08002380 <usb_cdcacm_tx>:
 8002380:	b109      	cbz	r1, 8002386 <usb_cdcacm_tx+0x6>
 8002382:	f7ff befd 	b.w	8002180 <usb_cdcacm_tx.part.2>
 8002386:	4608      	mov	r0, r1
 8002388:	4770      	bx	lr
	...

0800238c <usb_cdcacm_data_available>:
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <usb_cdcacm_data_available+0x10>)
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <usb_cdcacm_data_available+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1ac0      	subs	r0, r0, r3
 8002396:	b2c0      	uxtb	r0, r0
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000dfc 	.word	0x20000dfc
 80023a0:	20000e04 	.word	0x20000e04

080023a4 <usb_cdcacm_peek>:
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <usb_cdcacm_peek+0x2c>)
 80023a6:	b530      	push	{r4, r5, lr}
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <usb_cdcacm_peek+0x30>)
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <usb_cdcacm_peek+0x34>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4299      	cmp	r1, r3
 80023b6:	bf28      	it	cs
 80023b8:	4619      	movcs	r1, r3
 80023ba:	1843      	adds	r3, r0, r1
 80023bc:	4298      	cmp	r0, r3
 80023be:	d101      	bne.n	80023c4 <usb_cdcacm_peek+0x20>
 80023c0:	4608      	mov	r0, r1
 80023c2:	bd30      	pop	{r4, r5, pc}
 80023c4:	5ca5      	ldrb	r5, [r4, r2]
 80023c6:	3201      	adds	r2, #1
 80023c8:	f800 5b01 	strb.w	r5, [r0], #1
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	e7f5      	b.n	80023bc <usb_cdcacm_peek+0x18>
 80023d0:	20000e04 	.word	0x20000e04
 80023d4:	20000dfc 	.word	0x20000dfc
 80023d8:	20000e14 	.word	0x20000e14

080023dc <usb_cdcacm_rx>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	f7ff ffe1 	bl	80023a4 <usb_cdcacm_peek>
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <usb_cdcacm_rx+0x2c>)
 80023e4:	4604      	mov	r4, r0
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	4403      	add	r3, r0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <usb_cdcacm_rx+0x30>)
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d804      	bhi.n	8002404 <usb_cdcacm_rx+0x28>
 80023fa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80023fe:	2003      	movs	r0, #3
 8002400:	f7ff fd5c 	bl	8001ebc <usb_set_ep_rx_stat>
 8002404:	4620      	mov	r0, r4
 8002406:	bd10      	pop	{r4, pc}
 8002408:	20000e04 	.word	0x20000e04
 800240c:	20000dfc 	.word	0x20000dfc

08002410 <usb_cdcacm_peek_ex>:
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <usb_cdcacm_peek_ex+0x34>)
 8002412:	b530      	push	{r4, r5, lr}
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4c0c      	ldr	r4, [pc, #48]	; (8002448 <usb_cdcacm_peek_ex+0x38>)
 8002418:	440b      	add	r3, r1
 800241a:	6824      	ldr	r4, [r4, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	1ae4      	subs	r4, r4, r3
 8002420:	b2e4      	uxtb	r4, r4
 8002422:	188d      	adds	r5, r1, r2
 8002424:	42a5      	cmp	r5, r4
 8002426:	bf88      	it	hi
 8002428:	1a62      	subhi	r2, r4, r1
 800242a:	4c08      	ldr	r4, [pc, #32]	; (800244c <usb_cdcacm_peek_ex+0x3c>)
 800242c:	4601      	mov	r1, r0
 800242e:	4410      	add	r0, r2
 8002430:	4281      	cmp	r1, r0
 8002432:	d101      	bne.n	8002438 <usb_cdcacm_peek_ex+0x28>
 8002434:	4610      	mov	r0, r2
 8002436:	bd30      	pop	{r4, r5, pc}
 8002438:	5ce5      	ldrb	r5, [r4, r3]
 800243a:	3301      	adds	r3, #1
 800243c:	f801 5b01 	strb.w	r5, [r1], #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e7f5      	b.n	8002430 <usb_cdcacm_peek_ex+0x20>
 8002444:	20000e04 	.word	0x20000e04
 8002448:	20000dfc 	.word	0x20000dfc
 800244c:	20000e14 	.word	0x20000e14

08002450 <usb_cdcacm_get_dtr>:
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <usb_cdcacm_get_dtr+0xc>)
 8002452:	7818      	ldrb	r0, [r3, #0]
 8002454:	f000 0001 	and.w	r0, r0, #1
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000df8 	.word	0x20000df8

08002460 <usb_set_ep_rx_count>:
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <usb_set_ep_rx_count+0x38>)
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <usb_set_ep_rx_count+0x3c>)
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	293e      	cmp	r1, #62	; 0x3e
 8002468:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800246c:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8002470:	4402      	add	r2, r0
 8002472:	d90a      	bls.n	800248a <usb_set_ep_rx_count+0x2a>
 8002474:	094b      	lsrs	r3, r1, #5
 8002476:	06c8      	lsls	r0, r1, #27
 8002478:	bf04      	itt	eq
 800247a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800247e:	b29b      	uxtheq	r3, r3
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4770      	bx	lr
 800248a:	084b      	lsrs	r3, r1, #1
 800248c:	07c9      	lsls	r1, r1, #31
 800248e:	bf48      	it	mi
 8002490:	3301      	addmi	r3, #1
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	e7f7      	b.n	8002486 <usb_set_ep_rx_count+0x26>
 8002496:	bf00      	nop
 8002498:	40005c00 	.word	0x40005c00
 800249c:	4000600c 	.word	0x4000600c

080024a0 <Standard_GetConfiguration>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4c06      	ldr	r4, [pc, #24]	; (80024bc <Standard_GetConfiguration+0x1c>)
 80024a4:	b918      	cbnz	r0, 80024ae <Standard_GetConfiguration+0xe>
 80024a6:	2201      	movs	r2, #1
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	821a      	strh	r2, [r3, #16]
 80024ac:	bd10      	pop	{r4, pc}
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <Standard_GetConfiguration+0x20>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4798      	blx	r3
 80024b6:	6820      	ldr	r0, [r4, #0]
 80024b8:	300a      	adds	r0, #10
 80024ba:	e7f7      	b.n	80024ac <Standard_GetConfiguration+0xc>
 80024bc:	20001c10 	.word	0x20001c10
 80024c0:	20001c0c 	.word	0x20001c0c

080024c4 <Standard_GetInterface>:
 80024c4:	b510      	push	{r4, lr}
 80024c6:	4c06      	ldr	r4, [pc, #24]	; (80024e0 <Standard_GetInterface+0x1c>)
 80024c8:	b918      	cbnz	r0, 80024d2 <Standard_GetInterface+0xe>
 80024ca:	2201      	movs	r2, #1
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	821a      	strh	r2, [r3, #16]
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <Standard_GetInterface+0x20>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4798      	blx	r3
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	300c      	adds	r0, #12
 80024de:	e7f7      	b.n	80024d0 <Standard_GetInterface+0xc>
 80024e0:	20001c10 	.word	0x20001c10
 80024e4:	20001c0c 	.word	0x20001c0c

080024e8 <Standard_GetStatus>:
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <Standard_GetStatus+0x7c>)
 80024ea:	b510      	push	{r4, lr}
 80024ec:	681c      	ldr	r4, [r3, #0]
 80024ee:	2300      	movs	r3, #0
 80024f0:	b910      	cbnz	r0, 80024f8 <Standard_GetStatus+0x10>
 80024f2:	2302      	movs	r3, #2
 80024f4:	8223      	strh	r3, [r4, #16]
 80024f6:	bd10      	pop	{r4, pc}
 80024f8:	481b      	ldr	r0, [pc, #108]	; (8002568 <Standard_GetStatus+0x80>)
 80024fa:	8003      	strh	r3, [r0, #0]
 80024fc:	7821      	ldrb	r1, [r4, #0]
 80024fe:	4602      	mov	r2, r0
 8002500:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 8002504:	d112      	bne.n	800252c <Standard_GetStatus+0x44>
 8002506:	7a61      	ldrb	r1, [r4, #9]
 8002508:	068c      	lsls	r4, r1, #26
 800250a:	bf44      	itt	mi
 800250c:	2302      	movmi	r3, #2
 800250e:	7003      	strbmi	r3, [r0, #0]
 8002510:	7803      	ldrb	r3, [r0, #0]
 8002512:	0648      	lsls	r0, r1, #25
 8002514:	bf4c      	ite	mi
 8002516:	f023 0301 	bicmi.w	r3, r3, #1
 800251a:	f043 0301 	orrpl.w	r3, r3, #1
 800251e:	7013      	strb	r3, [r2, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <Standard_GetStatus+0x84>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4798      	blx	r3
 8002528:	480f      	ldr	r0, [pc, #60]	; (8002568 <Standard_GetStatus+0x80>)
 800252a:	e7e4      	b.n	80024f6 <Standard_GetStatus+0xe>
 800252c:	2901      	cmp	r1, #1
 800252e:	d0e2      	beq.n	80024f6 <Standard_GetStatus+0xe>
 8002530:	2902      	cmp	r1, #2
 8002532:	d115      	bne.n	8002560 <Standard_GetStatus+0x78>
 8002534:	7921      	ldrb	r1, [r4, #4]
 8002536:	f001 030f 	and.w	r3, r1, #15
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002540:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002544:	0609      	lsls	r1, r1, #24
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	d505      	bpl.n	8002556 <Standard_GetStatus+0x6e>
 800254a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800254e:	2b10      	cmp	r3, #16
 8002550:	d1e6      	bne.n	8002520 <Standard_GetStatus+0x38>
 8002552:	2301      	movs	r3, #1
 8002554:	e7e3      	b.n	800251e <Standard_GetStatus+0x36>
 8002556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800255a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255e:	e7f7      	b.n	8002550 <Standard_GetStatus+0x68>
 8002560:	4618      	mov	r0, r3
 8002562:	e7c8      	b.n	80024f6 <Standard_GetStatus+0xe>
 8002564:	20001c10 	.word	0x20001c10
 8002568:	20001be2 	.word	0x20001be2
 800256c:	20001c0c 	.word	0x20001c0c

08002570 <DataStageIn>:
 8002570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002574:	4f23      	ldr	r7, [pc, #140]	; (8002604 <DataStageIn+0x94>)
 8002576:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002618 <DataStageIn+0xa8>
 800257a:	683d      	ldr	r5, [r7, #0]
 800257c:	8a2c      	ldrh	r4, [r5, #16]
 800257e:	b9d4      	cbnz	r4, 80025b6 <DataStageIn+0x46>
 8002580:	7a2e      	ldrb	r6, [r5, #8]
 8002582:	2e04      	cmp	r6, #4
 8002584:	d117      	bne.n	80025b6 <DataStageIn+0x46>
 8002586:	4920      	ldr	r1, [pc, #128]	; (8002608 <DataStageIn+0x98>)
 8002588:	780b      	ldrb	r3, [r1, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10e      	bne.n	80025ac <DataStageIn+0x3c>
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <DataStageIn+0x9c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <DataStageIn+0xa0>)
 8002594:	b292      	uxth	r2, r2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	601c      	str	r4, [r3, #0]
 800259c:	2330      	movs	r3, #48	; 0x30
 800259e:	700c      	strb	r4, [r1, #0]
 80025a0:	f8a8 3000 	strh.w	r3, [r8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	721e      	strb	r6, [r3, #8]
 80025a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ac:	2310      	movs	r3, #16
 80025ae:	2607      	movs	r6, #7
 80025b0:	f8a8 3000 	strh.w	r3, [r8]
 80025b4:	e7f6      	b.n	80025a4 <DataStageIn+0x34>
 80025b6:	8aab      	ldrh	r3, [r5, #20]
 80025b8:	429c      	cmp	r4, r3
 80025ba:	bf94      	ite	ls
 80025bc:	2604      	movls	r6, #4
 80025be:	2602      	movhi	r6, #2
 80025c0:	429c      	cmp	r4, r3
 80025c2:	bf28      	it	cs
 80025c4:	461c      	movcs	r4, r3
 80025c6:	69ab      	ldr	r3, [r5, #24]
 80025c8:	4620      	mov	r0, r4
 80025ca:	4798      	blx	r3
 80025cc:	4681      	mov	r9, r0
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 fbaa 	bl	8002d28 <GetEPTxAddr>
 80025d4:	4622      	mov	r2, r4
 80025d6:	4601      	mov	r1, r0
 80025d8:	4648      	mov	r0, r9
 80025da:	f000 fb48 	bl	8002c6e <UserToPMABufferCopy>
 80025de:	4621      	mov	r1, r4
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 fbbd 	bl	8002d60 <SetEPTxCount>
 80025e6:	8a2b      	ldrh	r3, [r5, #16]
 80025e8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80025ec:	1b1b      	subs	r3, r3, r4
 80025ee:	822b      	strh	r3, [r5, #16]
 80025f0:	8a6b      	ldrh	r3, [r5, #18]
 80025f2:	441c      	add	r4, r3
 80025f4:	2330      	movs	r3, #48	; 0x30
 80025f6:	f8a8 3000 	strh.w	r3, [r8]
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <DataStageIn+0xa4>)
 80025fc:	826c      	strh	r4, [r5, #18]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e7d0      	b.n	80025a4 <DataStageIn+0x34>
 8002602:	bf00      	nop
 8002604:	20001c10 	.word	0x20001c10
 8002608:	20001014 	.word	0x20001014
 800260c:	40005c50 	.word	0x40005c50
 8002610:	20003002 	.word	0x20003002
 8002614:	20001bdc 	.word	0x20001bdc
 8002618:	20001bde 	.word	0x20001bde

0800261c <Standard_SetConfiguration>:
 800261c:	b510      	push	{r4, lr}
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Standard_SetConfiguration+0x2c>)
 8002620:	490a      	ldr	r1, [pc, #40]	; (800264c <Standard_SetConfiguration+0x30>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	7849      	ldrb	r1, [r1, #1]
 8002626:	789a      	ldrb	r2, [r3, #2]
 8002628:	4291      	cmp	r1, r2
 800262a:	d30a      	bcc.n	8002642 <Standard_SetConfiguration+0x26>
 800262c:	78d9      	ldrb	r1, [r3, #3]
 800262e:	b941      	cbnz	r1, 8002642 <Standard_SetConfiguration+0x26>
 8002630:	889c      	ldrh	r4, [r3, #4]
 8002632:	b934      	cbnz	r4, 8002642 <Standard_SetConfiguration+0x26>
 8002634:	729a      	strb	r2, [r3, #10]
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <Standard_SetConfiguration+0x34>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4798      	blx	r3
 800263e:	4620      	mov	r0, r4
 8002640:	bd10      	pop	{r4, pc}
 8002642:	2002      	movs	r0, #2
 8002644:	e7fc      	b.n	8002640 <Standard_SetConfiguration+0x24>
 8002646:	bf00      	nop
 8002648:	20001c10 	.word	0x20001c10
 800264c:	200003d8 	.word	0x200003d8
 8002650:	20001c0c 	.word	0x20001c0c

08002654 <Standard_SetInterface>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <Standard_SetInterface+0x40>)
 8002658:	4d0f      	ldr	r5, [pc, #60]	; (8002698 <Standard_SetInterface+0x44>)
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	6992      	ldr	r2, [r2, #24]
 8002660:	7899      	ldrb	r1, [r3, #2]
 8002662:	7918      	ldrb	r0, [r3, #4]
 8002664:	4790      	blx	r2
 8002666:	682b      	ldr	r3, [r5, #0]
 8002668:	4604      	mov	r4, r0
 800266a:	7a9a      	ldrb	r2, [r3, #10]
 800266c:	b17a      	cbz	r2, 800268e <Standard_SetInterface+0x3a>
 800266e:	b970      	cbnz	r0, 800268e <Standard_SetInterface+0x3a>
 8002670:	795a      	ldrb	r2, [r3, #5]
 8002672:	b962      	cbnz	r2, 800268e <Standard_SetInterface+0x3a>
 8002674:	78db      	ldrb	r3, [r3, #3]
 8002676:	b953      	cbnz	r3, 800268e <Standard_SetInterface+0x3a>
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <Standard_SetInterface+0x48>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4798      	blx	r3
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	791a      	ldrb	r2, [r3, #4]
 8002684:	72da      	strb	r2, [r3, #11]
 8002686:	789a      	ldrb	r2, [r3, #2]
 8002688:	731a      	strb	r2, [r3, #12]
 800268a:	4620      	mov	r0, r4
 800268c:	bd38      	pop	{r3, r4, r5, pc}
 800268e:	2402      	movs	r4, #2
 8002690:	e7fb      	b.n	800268a <Standard_SetInterface+0x36>
 8002692:	bf00      	nop
 8002694:	20001be8 	.word	0x20001be8
 8002698:	20001c10 	.word	0x20001c10
 800269c:	20001c0c 	.word	0x20001c0c

080026a0 <Standard_ClearFeature>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <Standard_ClearFeature+0xb0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	7818      	ldrb	r0, [r3, #0]
 80026a8:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80026ac:	d104      	bne.n	80026b8 <Standard_ClearFeature+0x18>
 80026ae:	7a5a      	ldrb	r2, [r3, #9]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	725a      	strb	r2, [r3, #9]
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
 80026b8:	2802      	cmp	r0, #2
 80026ba:	d147      	bne.n	800274c <Standard_ClearFeature+0xac>
 80026bc:	885a      	ldrh	r2, [r3, #2]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d1f9      	bne.n	80026b6 <Standard_ClearFeature+0x16>
 80026c2:	795a      	ldrb	r2, [r3, #5]
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d1f6      	bne.n	80026b6 <Standard_ClearFeature+0x16>
 80026c8:	7919      	ldrb	r1, [r3, #4]
 80026ca:	4d22      	ldr	r5, [pc, #136]	; (8002754 <Standard_ClearFeature+0xb4>)
 80026cc:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 80026d0:	0084      	lsls	r4, r0, #2
 80026d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80026d6:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	b249      	sxtb	r1, r1
 80026de:	782d      	ldrb	r5, [r5, #0]
 80026e0:	2900      	cmp	r1, #0
 80026e2:	bfb4      	ite	lt
 80026e4:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
 80026e8:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
 80026ec:	4285      	cmp	r5, r0
 80026ee:	d92d      	bls.n	800274c <Standard_ClearFeature+0xac>
 80026f0:	b362      	cbz	r2, 800274c <Standard_ClearFeature+0xac>
 80026f2:	7a9b      	ldrb	r3, [r3, #10]
 80026f4:	b353      	cbz	r3, 800274c <Standard_ClearFeature+0xac>
 80026f6:	2900      	cmp	r1, #0
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	da11      	bge.n	8002720 <Standard_ClearFeature+0x80>
 80026fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002700:	2b10      	cmp	r3, #16
 8002702:	d107      	bne.n	8002714 <Standard_ClearFeature+0x74>
 8002704:	b2c4      	uxtb	r4, r0
 8002706:	4620      	mov	r0, r4
 8002708:	f000 fafa 	bl	8002d00 <ClearDTOG_TX>
 800270c:	2130      	movs	r1, #48	; 0x30
 800270e:	4620      	mov	r0, r4
 8002710:	f000 face 	bl	8002cb0 <SetEPTxStatus>
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <Standard_ClearFeature+0xb8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4798      	blx	r3
 800271c:	2000      	movs	r0, #0
 800271e:	e7ca      	b.n	80026b6 <Standard_ClearFeature+0x16>
 8002720:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d1f4      	bne.n	8002714 <Standard_ClearFeature+0x74>
 800272a:	4d0c      	ldr	r5, [pc, #48]	; (800275c <Standard_ClearFeature+0xbc>)
 800272c:	b958      	cbnz	r0, 8002746 <Standard_ClearFeature+0xa6>
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <Standard_ClearFeature+0xc0>)
 8002730:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002734:	f000 fb22 	bl	8002d7c <SetEPRxCount>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	402b      	ands	r3, r5
 800273c:	b29b      	uxth	r3, r3
 800273e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	e7e6      	b.n	8002714 <Standard_ClearFeature+0x74>
 8002746:	f000 fac8 	bl	8002cda <ClearDTOG_RX>
 800274a:	e7f5      	b.n	8002738 <Standard_ClearFeature+0x98>
 800274c:	2002      	movs	r0, #2
 800274e:	e7b2      	b.n	80026b6 <Standard_ClearFeature+0x16>
 8002750:	20001c10 	.word	0x20001c10
 8002754:	200003d8 	.word	0x200003d8
 8002758:	20001c0c 	.word	0x20001c0c
 800275c:	ffffbf8f 	.word	0xffffbf8f
 8002760:	200003a8 	.word	0x200003a8

08002764 <Standard_SetEndPointFeature>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <Standard_SetEndPointFeature+0x70>)
 8002768:	4d1b      	ldr	r5, [pc, #108]	; (80027d8 <Standard_SetEndPointFeature+0x74>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	782d      	ldrb	r5, [r5, #0]
 800276e:	7901      	ldrb	r1, [r0, #4]
 8002770:	f021 0480 	bic.w	r4, r1, #128	; 0x80
 8002774:	00a3      	lsls	r3, r4, #2
 8002776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800277a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	b249      	sxtb	r1, r1
 8002782:	2900      	cmp	r1, #0
 8002784:	bfb4      	ite	lt
 8002786:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
 800278a:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
 800278e:	42a5      	cmp	r5, r4
 8002790:	d91d      	bls.n	80027ce <Standard_SetEndPointFeature+0x6a>
 8002792:	8844      	ldrh	r4, [r0, #2]
 8002794:	b9dc      	cbnz	r4, 80027ce <Standard_SetEndPointFeature+0x6a>
 8002796:	b1d2      	cbz	r2, 80027ce <Standard_SetEndPointFeature+0x6a>
 8002798:	7a82      	ldrb	r2, [r0, #10]
 800279a:	b1c2      	cbz	r2, 80027ce <Standard_SetEndPointFeature+0x6a>
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2900      	cmp	r1, #0
 80027a0:	bfb5      	itete	lt
 80027a2:	f422 42e0 	biclt.w	r2, r2, #28672	; 0x7000
 80027a6:	f422 4280 	bicge.w	r2, r2, #16384	; 0x4000
 80027aa:	f022 0240 	biclt.w	r2, r2, #64	; 0x40
 80027ae:	f022 0270 	bicge.w	r2, r2, #112	; 0x70
 80027b2:	bfb5      	itete	lt
 80027b4:	b292      	uxthlt	r2, r2
 80027b6:	b292      	uxthge	r2, r2
 80027b8:	f082 0210 	eorlt.w	r2, r2, #16
 80027bc:	f482 5280 	eorge.w	r2, r2, #4096	; 0x1000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <Standard_SetEndPointFeature+0x78>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4798      	blx	r3
 80027ca:	2000      	movs	r0, #0
 80027cc:	bd38      	pop	{r3, r4, r5, pc}
 80027ce:	2002      	movs	r0, #2
 80027d0:	e7fc      	b.n	80027cc <Standard_SetEndPointFeature+0x68>
 80027d2:	bf00      	nop
 80027d4:	20001c10 	.word	0x20001c10
 80027d8:	200003d8 	.word	0x200003d8
 80027dc:	20001c0c 	.word	0x20001c0c

080027e0 <Standard_SetDeviceFeature>:
 80027e0:	b508      	push	{r3, lr}
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <Standard_SetDeviceFeature+0x1c>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	7a53      	ldrb	r3, [r2, #9]
 80027e8:	f043 0320 	orr.w	r3, r3, #32
 80027ec:	7253      	strb	r3, [r2, #9]
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <Standard_SetDeviceFeature+0x20>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4798      	blx	r3
 80027f6:	2000      	movs	r0, #0
 80027f8:	bd08      	pop	{r3, pc}
 80027fa:	bf00      	nop
 80027fc:	20001c10 	.word	0x20001c10
 8002800:	20001c0c 	.word	0x20001c0c

08002804 <Standard_GetDescriptorData>:
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <Standard_GetDescriptorData+0x18>)
 8002806:	b510      	push	{r4, lr}
 8002808:	681c      	ldr	r4, [r3, #0]
 800280a:	8a62      	ldrh	r2, [r4, #18]
 800280c:	b918      	cbnz	r0, 8002816 <Standard_GetDescriptorData+0x12>
 800280e:	888b      	ldrh	r3, [r1, #4]
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	8223      	strh	r3, [r4, #16]
 8002814:	bd10      	pop	{r4, pc}
 8002816:	6808      	ldr	r0, [r1, #0]
 8002818:	4410      	add	r0, r2
 800281a:	e7fb      	b.n	8002814 <Standard_GetDescriptorData+0x10>
 800281c:	20001c10 	.word	0x20001c10

08002820 <Post0_Process>:
 8002820:	b508      	push	{r3, lr}
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <Post0_Process+0x30>)
 8002824:	2000      	movs	r0, #0
 8002826:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800282a:	f000 faa7 	bl	8002d7c <SetEPRxCount>
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <Post0_Process+0x34>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	7a18      	ldrb	r0, [r3, #8]
 8002834:	2808      	cmp	r0, #8
 8002836:	d106      	bne.n	8002846 <Post0_Process+0x26>
 8002838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <Post0_Process+0x38>)
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <Post0_Process+0x3c>)
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	f1a0 0309 	sub.w	r3, r0, #9
 800284a:	4258      	negs	r0, r3
 800284c:	4158      	adcs	r0, r3
 800284e:	bd08      	pop	{r3, pc}
 8002850:	200003a8 	.word	0x200003a8
 8002854:	20001c10 	.word	0x20001c10
 8002858:	20001bdc 	.word	0x20001bdc
 800285c:	20001bde 	.word	0x20001bde

08002860 <Setup0_Process>:
 8002860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002862:	4d98      	ldr	r5, [pc, #608]	; (8002ac4 <Setup0_Process+0x264>)
 8002864:	4e98      	ldr	r6, [pc, #608]	; (8002ac8 <Setup0_Process+0x268>)
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	6831      	ldr	r1, [r6, #0]
 800286a:	7a1a      	ldrb	r2, [r3, #8]
 800286c:	2a09      	cmp	r2, #9
 800286e:	d013      	beq.n	8002898 <Setup0_Process+0x38>
 8002870:	4a96      	ldr	r2, [pc, #600]	; (8002acc <Setup0_Process+0x26c>)
 8002872:	b289      	uxth	r1, r1
 8002874:	440a      	add	r2, r1
 8002876:	0052      	lsls	r2, r2, #1
 8002878:	8812      	ldrh	r2, [r2, #0]
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002880:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8002884:	7811      	ldrb	r1, [r2, #0]
 8002886:	7019      	strb	r1, [r3, #0]
 8002888:	7851      	ldrb	r1, [r2, #1]
 800288a:	7059      	strb	r1, [r3, #1]
 800288c:	8891      	ldrh	r1, [r2, #4]
 800288e:	8059      	strh	r1, [r3, #2]
 8002890:	8911      	ldrh	r1, [r2, #8]
 8002892:	8099      	strh	r1, [r3, #4]
 8002894:	8992      	ldrh	r2, [r2, #12]
 8002896:	80da      	strh	r2, [r3, #6]
 8002898:	2201      	movs	r2, #1
 800289a:	721a      	strb	r2, [r3, #8]
 800289c:	88da      	ldrh	r2, [r3, #6]
 800289e:	785c      	ldrb	r4, [r3, #1]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d164      	bne.n	800296e <Setup0_Process+0x10e>
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80028aa:	d14d      	bne.n	8002948 <Setup0_Process+0xe8>
 80028ac:	2c09      	cmp	r4, #9
 80028ae:	d103      	bne.n	80028b8 <Setup0_Process+0x58>
 80028b0:	f7ff feb4 	bl	800261c <Standard_SetConfiguration>
 80028b4:	bb40      	cbnz	r0, 8002908 <Setup0_Process+0xa8>
 80028b6:	e016      	b.n	80028e6 <Setup0_Process+0x86>
 80028b8:	2c05      	cmp	r4, #5
 80028ba:	d120      	bne.n	80028fe <Setup0_Process+0x9e>
 80028bc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	da07      	bge.n	80028d4 <Setup0_Process+0x74>
 80028c4:	2308      	movs	r3, #8
 80028c6:	682a      	ldr	r2, [r5, #0]
 80028c8:	7213      	strb	r3, [r2, #8]
 80028ca:	b002      	add	sp, #8
 80028cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80028d0:	f7ff bfa6 	b.w	8002820 <Post0_Process>
 80028d4:	78da      	ldrb	r2, [r3, #3]
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	d1f4      	bne.n	80028c4 <Setup0_Process+0x64>
 80028da:	889a      	ldrh	r2, [r3, #4]
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d1f1      	bne.n	80028c4 <Setup0_Process+0x64>
 80028e0:	7a9b      	ldrb	r3, [r3, #10]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <Setup0_Process+0x64>
 80028e6:	6832      	ldr	r2, [r6, #0]
 80028e8:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <Setup0_Process+0x270>)
 80028ea:	b292      	uxth	r2, r2
 80028ec:	4413      	add	r3, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	2230      	movs	r2, #48	; 0x30
 80028f6:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <Setup0_Process+0x274>)
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	2306      	movs	r3, #6
 80028fc:	e7e3      	b.n	80028c6 <Setup0_Process+0x66>
 80028fe:	2c03      	cmp	r4, #3
 8002900:	d114      	bne.n	800292c <Setup0_Process+0xcc>
 8002902:	789a      	ldrb	r2, [r3, #2]
 8002904:	2a01      	cmp	r2, #1
 8002906:	d008      	beq.n	800291a <Setup0_Process+0xba>
 8002908:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <Setup0_Process+0x278>)
 800290a:	4620      	mov	r0, r4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4798      	blx	r3
 8002912:	2803      	cmp	r0, #3
 8002914:	d128      	bne.n	8002968 <Setup0_Process+0x108>
 8002916:	2309      	movs	r3, #9
 8002918:	e7d5      	b.n	80028c6 <Setup0_Process+0x66>
 800291a:	889a      	ldrh	r2, [r3, #4]
 800291c:	2a00      	cmp	r2, #0
 800291e:	d1f3      	bne.n	8002908 <Setup0_Process+0xa8>
 8002920:	7a5b      	ldrb	r3, [r3, #9]
 8002922:	069a      	lsls	r2, r3, #26
 8002924:	d5f0      	bpl.n	8002908 <Setup0_Process+0xa8>
 8002926:	f7ff ff5b 	bl	80027e0 <Standard_SetDeviceFeature>
 800292a:	e7c3      	b.n	80028b4 <Setup0_Process+0x54>
 800292c:	2c01      	cmp	r4, #1
 800292e:	d1eb      	bne.n	8002908 <Setup0_Process+0xa8>
 8002930:	789a      	ldrb	r2, [r3, #2]
 8002932:	2a01      	cmp	r2, #1
 8002934:	d1e8      	bne.n	8002908 <Setup0_Process+0xa8>
 8002936:	889a      	ldrh	r2, [r3, #4]
 8002938:	2a00      	cmp	r2, #0
 800293a:	d1e5      	bne.n	8002908 <Setup0_Process+0xa8>
 800293c:	7a5b      	ldrb	r3, [r3, #9]
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	d5e2      	bpl.n	8002908 <Setup0_Process+0xa8>
 8002942:	f7ff fead 	bl	80026a0 <Standard_ClearFeature>
 8002946:	e7b5      	b.n	80028b4 <Setup0_Process+0x54>
 8002948:	2a01      	cmp	r2, #1
 800294a:	d104      	bne.n	8002956 <Setup0_Process+0xf6>
 800294c:	2c0b      	cmp	r4, #11
 800294e:	d1db      	bne.n	8002908 <Setup0_Process+0xa8>
 8002950:	f7ff fe80 	bl	8002654 <Standard_SetInterface>
 8002954:	e7ae      	b.n	80028b4 <Setup0_Process+0x54>
 8002956:	2a02      	cmp	r2, #2
 8002958:	d1d6      	bne.n	8002908 <Setup0_Process+0xa8>
 800295a:	2c01      	cmp	r4, #1
 800295c:	d0f1      	beq.n	8002942 <Setup0_Process+0xe2>
 800295e:	2c03      	cmp	r4, #3
 8002960:	d1d2      	bne.n	8002908 <Setup0_Process+0xa8>
 8002962:	f7ff feff 	bl	8002764 <Standard_SetEndPointFeature>
 8002966:	e7a5      	b.n	80028b4 <Setup0_Process+0x54>
 8002968:	2800      	cmp	r0, #0
 800296a:	d1ab      	bne.n	80028c4 <Setup0_Process+0x64>
 800296c:	e7bb      	b.n	80028e6 <Setup0_Process+0x86>
 800296e:	2c06      	cmp	r4, #6
 8002970:	d112      	bne.n	8002998 <Setup0_Process+0x138>
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	0654      	lsls	r4, r2, #25
 8002976:	d15a      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <Setup0_Process+0x278>)
 800297c:	2b01      	cmp	r3, #1
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	d102      	bne.n	8002988 <Setup0_Process+0x128>
 8002982:	69d3      	ldr	r3, [r2, #28]
 8002984:	b9db      	cbnz	r3, 80029be <Setup0_Process+0x15e>
 8002986:	e052      	b.n	8002a2e <Setup0_Process+0x1ce>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d101      	bne.n	8002990 <Setup0_Process+0x130>
 800298c:	6a13      	ldr	r3, [r2, #32]
 800298e:	e7f9      	b.n	8002984 <Setup0_Process+0x124>
 8002990:	2b03      	cmp	r3, #3
 8002992:	d14c      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002994:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002996:	e7f5      	b.n	8002984 <Setup0_Process+0x124>
 8002998:	2c00      	cmp	r4, #0
 800299a:	d154      	bne.n	8002a46 <Setup0_Process+0x1e6>
 800299c:	8859      	ldrh	r1, [r3, #2]
 800299e:	2900      	cmp	r1, #0
 80029a0:	d145      	bne.n	8002a2e <Setup0_Process+0x1ce>
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80029ac:	d13f      	bne.n	8002a2e <Setup0_Process+0x1ce>
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80029b4:	d116      	bne.n	80029e4 <Setup0_Process+0x184>
 80029b6:	889b      	ldrh	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d138      	bne.n	8002a2e <Setup0_Process+0x1ce>
 80029bc:	4b47      	ldr	r3, [pc, #284]	; (8002adc <Setup0_Process+0x27c>)
 80029be:	2400      	movs	r4, #0
 80029c0:	682a      	ldr	r2, [r5, #0]
 80029c2:	4620      	mov	r0, r4
 80029c4:	8254      	strh	r4, [r2, #18]
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4798      	blx	r3
 80029ca:	4620      	mov	r0, r4
 80029cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	8a1a      	ldrh	r2, [r3, #16]
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d033      	beq.n	8002a40 <Setup0_Process+0x1e0>
 80029d8:	2802      	cmp	r0, #2
 80029da:	d001      	beq.n	80029e0 <Setup0_Process+0x180>
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d155      	bne.n	8002a8c <Setup0_Process+0x22c>
 80029e0:	2208      	movs	r2, #8
 80029e2:	e02e      	b.n	8002a42 <Setup0_Process+0x1e2>
 80029e4:	2a01      	cmp	r2, #1
 80029e6:	d10a      	bne.n	80029fe <Setup0_Process+0x19e>
 80029e8:	4a3b      	ldr	r2, [pc, #236]	; (8002ad8 <Setup0_Process+0x278>)
 80029ea:	7918      	ldrb	r0, [r3, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	6992      	ldr	r2, [r2, #24]
 80029f0:	4790      	blx	r2
 80029f2:	b9e0      	cbnz	r0, 8002a2e <Setup0_Process+0x1ce>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	7a9b      	ldrb	r3, [r3, #10]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1df      	bne.n	80029bc <Setup0_Process+0x15c>
 80029fc:	e017      	b.n	8002a2e <Setup0_Process+0x1ce>
 80029fe:	2a02      	cmp	r2, #2
 8002a00:	d115      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a02:	791a      	ldrb	r2, [r3, #4]
 8002a04:	f002 010f 	and.w	r1, r2, #15
 8002a08:	008b      	lsls	r3, r1, #2
 8002a0a:	0610      	lsls	r0, r2, #24
 8002a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a10:	4833      	ldr	r0, [pc, #204]	; (8002ae0 <Setup0_Process+0x280>)
 8002a12:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	7800      	ldrb	r0, [r0, #0]
 8002a1a:	bf4c      	ite	mi
 8002a1c:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
 8002a20:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
 8002a24:	4288      	cmp	r0, r1
 8002a26:	d902      	bls.n	8002a2e <Setup0_Process+0x1ce>
 8002a28:	f012 0f70 	tst.w	r2, #112	; 0x70
 8002a2c:	d0e4      	beq.n	80029f8 <Setup0_Process+0x198>
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <Setup0_Process+0x278>)
 8002a30:	682a      	ldr	r2, [r5, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	7850      	ldrb	r0, [r2, #1]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4798      	blx	r3
 8002a3a:	2803      	cmp	r0, #3
 8002a3c:	d1c6      	bne.n	80029cc <Setup0_Process+0x16c>
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	2209      	movs	r2, #9
 8002a42:	721a      	strb	r2, [r3, #8]
 8002a44:	e741      	b.n	80028ca <Setup0_Process+0x6a>
 8002a46:	2c08      	cmp	r4, #8
 8002a48:	d104      	bne.n	8002a54 <Setup0_Process+0x1f4>
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	065b      	lsls	r3, r3, #25
 8002a4e:	d1ee      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <Setup0_Process+0x284>)
 8002a52:	e7b4      	b.n	80029be <Setup0_Process+0x15e>
 8002a54:	2c0a      	cmp	r4, #10
 8002a56:	d1ea      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a5e:	2a01      	cmp	r2, #1
 8002a60:	d1e5      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a62:	7a9a      	ldrb	r2, [r3, #10]
 8002a64:	2a00      	cmp	r2, #0
 8002a66:	d0e2      	beq.n	8002a2e <Setup0_Process+0x1ce>
 8002a68:	8859      	ldrh	r1, [r3, #2]
 8002a6a:	2900      	cmp	r1, #0
 8002a6c:	d1df      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a74:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a78:	d1d9      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <Setup0_Process+0x278>)
 8002a7c:	7918      	ldrb	r0, [r3, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	6992      	ldr	r2, [r2, #24]
 8002a82:	4790      	blx	r2
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d1d2      	bne.n	8002a2e <Setup0_Process+0x1ce>
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <Setup0_Process+0x288>)
 8002a8a:	e798      	b.n	80029be <Setup0_Process+0x15e>
 8002a8c:	f993 1000 	ldrsb.w	r1, [r3]
 8002a90:	2900      	cmp	r1, #0
 8002a92:	da36      	bge.n	8002b02 <Setup0_Process+0x2a2>
 8002a94:	88d9      	ldrh	r1, [r3, #6]
 8002a96:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <Setup0_Process+0x278>)
 8002a98:	9101      	str	r1, [sp, #4]
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	9d01      	ldr	r5, [sp, #4]
 8002a9e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002aa2:	42aa      	cmp	r2, r5
 8002aa4:	b284      	uxth	r4, r0
 8002aa6:	d905      	bls.n	8002ab4 <Setup0_Process+0x254>
 8002aa8:	9a01      	ldr	r2, [sp, #4]
 8002aaa:	821a      	strh	r2, [r3, #16]
 8002aac:	829c      	strh	r4, [r3, #20]
 8002aae:	f7ff fd5f 	bl	8002570 <DataStageIn>
 8002ab2:	e70a      	b.n	80028ca <Setup0_Process+0x6a>
 8002ab4:	428a      	cmp	r2, r1
 8002ab6:	d2f9      	bcs.n	8002aac <Setup0_Process+0x24c>
 8002ab8:	42a2      	cmp	r2, r4
 8002aba:	d219      	bcs.n	8002af0 <Setup0_Process+0x290>
 8002abc:	2100      	movs	r1, #0
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <Setup0_Process+0x28c>)
 8002ac0:	7011      	strb	r1, [r2, #0]
 8002ac2:	e7f3      	b.n	8002aac <Setup0_Process+0x24c>
 8002ac4:	20001c10 	.word	0x20001c10
 8002ac8:	40005c50 	.word	0x40005c50
 8002acc:	20003004 	.word	0x20003004
 8002ad0:	20003002 	.word	0x20003002
 8002ad4:	20001bde 	.word	0x20001bde
 8002ad8:	20001be8 	.word	0x20001be8
 8002adc:	080024e9 	.word	0x080024e9
 8002ae0:	200003d8 	.word	0x200003d8
 8002ae4:	080024a1 	.word	0x080024a1
 8002ae8:	080024c5 	.word	0x080024c5
 8002aec:	20001014 	.word	0x20001014
 8002af0:	fb92 f1f0 	sdiv	r1, r2, r0
 8002af4:	fb00 2211 	mls	r2, r0, r1, r2
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d1d7      	bne.n	8002aac <Setup0_Process+0x24c>
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <Setup0_Process+0x2b0>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	e7de      	b.n	8002ac0 <Setup0_Process+0x260>
 8002b02:	2203      	movs	r2, #3
 8002b04:	721a      	strb	r2, [r3, #8]
 8002b06:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002b0a:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <Setup0_Process+0x2b4>)
 8002b0c:	801a      	strh	r2, [r3, #0]
 8002b0e:	e6dc      	b.n	80028ca <Setup0_Process+0x6a>
 8002b10:	20001014 	.word	0x20001014
 8002b14:	20001bdc 	.word	0x20001bdc

08002b18 <Out0_Process>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	4e29      	ldr	r6, [pc, #164]	; (8002bc0 <Out0_Process+0xa8>)
 8002b1c:	6834      	ldr	r4, [r6, #0]
 8002b1e:	7a23      	ldrb	r3, [r4, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d001      	beq.n	8002b28 <Out0_Process+0x10>
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d143      	bne.n	8002bb0 <Out0_Process+0x98>
 8002b28:	69a3      	ldr	r3, [r4, #24]
 8002b2a:	b1b3      	cbz	r3, 8002b5a <Out0_Process+0x42>
 8002b2c:	8a25      	ldrh	r5, [r4, #16]
 8002b2e:	b1a5      	cbz	r5, 8002b5a <Out0_Process+0x42>
 8002b30:	8aa2      	ldrh	r2, [r4, #20]
 8002b32:	4295      	cmp	r5, r2
 8002b34:	bf28      	it	cs
 8002b36:	4615      	movcs	r5, r2
 8002b38:	4628      	mov	r0, r5
 8002b3a:	4798      	blx	r3
 8002b3c:	8a23      	ldrh	r3, [r4, #16]
 8002b3e:	4607      	mov	r7, r0
 8002b40:	1b5b      	subs	r3, r3, r5
 8002b42:	8223      	strh	r3, [r4, #16]
 8002b44:	8a63      	ldrh	r3, [r4, #18]
 8002b46:	2000      	movs	r0, #0
 8002b48:	442b      	add	r3, r5
 8002b4a:	8263      	strh	r3, [r4, #18]
 8002b4c:	f000 f8fa 	bl	8002d44 <GetEPRxAddr>
 8002b50:	462a      	mov	r2, r5
 8002b52:	4601      	mov	r1, r0
 8002b54:	4638      	mov	r0, r7
 8002b56:	f000 f899 	bl	8002c8c <PMAToUserBufferCopy>
 8002b5a:	8a23      	ldrh	r3, [r4, #16]
 8002b5c:	b153      	cbz	r3, 8002b74 <Out0_Process+0x5c>
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <Out0_Process+0xac>)
 8002b66:	4608      	mov	r0, r1
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	f000 f8f9 	bl	8002d60 <SetEPTxCount>
 8002b6e:	2230      	movs	r2, #48	; 0x30
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <Out0_Process+0xb0>)
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	8a21      	ldrh	r1, [r4, #16]
 8002b76:	8aa3      	ldrh	r3, [r4, #20]
 8002b78:	6832      	ldr	r2, [r6, #0]
 8002b7a:	428b      	cmp	r3, r1
 8002b7c:	d808      	bhi.n	8002b90 <Out0_Process+0x78>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	7213      	strb	r3, [r2, #8]
 8002b82:	7a13      	ldrb	r3, [r2, #8]
 8002b84:	6832      	ldr	r2, [r6, #0]
 8002b86:	7213      	strb	r3, [r2, #8]
 8002b88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b8c:	f7ff be48 	b.w	8002820 <Post0_Process>
 8002b90:	b109      	cbz	r1, 8002b96 <Out0_Process+0x7e>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e7f4      	b.n	8002b80 <Out0_Process+0x68>
 8002b96:	2306      	movs	r3, #6
 8002b98:	7213      	strb	r3, [r2, #8]
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <Out0_Process+0xb4>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <Out0_Process+0xb8>)
 8002ba0:	b280      	uxth	r0, r0
 8002ba2:	4403      	add	r3, r0
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	6019      	str	r1, [r3, #0]
 8002ba8:	2130      	movs	r1, #48	; 0x30
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <Out0_Process+0xb0>)
 8002bac:	8019      	strh	r1, [r3, #0]
 8002bae:	e7e8      	b.n	8002b82 <Out0_Process+0x6a>
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d103      	bne.n	8002bbc <Out0_Process+0xa4>
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <Out0_Process+0xbc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4798      	blx	r3
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	e7e1      	b.n	8002b84 <Out0_Process+0x6c>
 8002bc0:	20001c10 	.word	0x20001c10
 8002bc4:	20001bdc 	.word	0x20001bdc
 8002bc8:	20001bde 	.word	0x20001bde
 8002bcc:	40005c50 	.word	0x40005c50
 8002bd0:	20003002 	.word	0x20003002
 8002bd4:	20001be8 	.word	0x20001be8

08002bd8 <SetDeviceAddress>:
 8002bd8:	b530      	push	{r4, r5, lr}
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f648 758f 	movw	r5, #36751	; 0x8f8f
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <SetDeviceAddress+0x30>)
 8002be2:	781c      	ldrb	r4, [r3, #0]
 8002be4:	42a2      	cmp	r2, r4
 8002be6:	d304      	bcc.n	8002bf2 <SetDeviceAddress+0x1a>
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <SetDeviceAddress+0x34>)
 8002bea:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002bee:	6018      	str	r0, [r3, #0]
 8002bf0:	bd30      	pop	{r4, r5, pc}
 8002bf2:	f102 5380 	add.w	r3, r2, #268435456	; 0x10000000
 8002bf6:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	4029      	ands	r1, r5
 8002c00:	4311      	orrs	r1, r2
 8002c02:	6019      	str	r1, [r3, #0]
 8002c04:	3201      	adds	r2, #1
 8002c06:	e7ed      	b.n	8002be4 <SetDeviceAddress+0xc>
 8002c08:	200003d8 	.word	0x200003d8
 8002c0c:	40005c4c 	.word	0x40005c4c

08002c10 <In0_Process>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4c13      	ldr	r4, [pc, #76]	; (8002c60 <In0_Process+0x50>)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	7a1a      	ldrb	r2, [r3, #8]
 8002c18:	2a02      	cmp	r2, #2
 8002c1a:	d001      	beq.n	8002c20 <In0_Process+0x10>
 8002c1c:	2a04      	cmp	r2, #4
 8002c1e:	d109      	bne.n	8002c34 <In0_Process+0x24>
 8002c20:	f7ff fca6 	bl	8002570 <DataStageIn>
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	7a1b      	ldrb	r3, [r3, #8]
 8002c28:	6822      	ldr	r2, [r4, #0]
 8002c2a:	7213      	strb	r3, [r2, #8]
 8002c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c30:	f7ff bdf6 	b.w	8002820 <Post0_Process>
 8002c34:	2a06      	cmp	r2, #6
 8002c36:	d110      	bne.n	8002c5a <In0_Process+0x4a>
 8002c38:	785a      	ldrb	r2, [r3, #1]
 8002c3a:	2a05      	cmp	r2, #5
 8002c3c:	d109      	bne.n	8002c52 <In0_Process+0x42>
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	0652      	lsls	r2, r2, #25
 8002c42:	d106      	bne.n	8002c52 <In0_Process+0x42>
 8002c44:	7898      	ldrb	r0, [r3, #2]
 8002c46:	f7ff ffc7 	bl	8002bd8 <SetDeviceAddress>
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <In0_Process+0x54>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4798      	blx	r3
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <In0_Process+0x58>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4798      	blx	r3
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e7e4      	b.n	8002c28 <In0_Process+0x18>
 8002c5e:	bf00      	nop
 8002c60:	20001c10 	.word	0x20001c10
 8002c64:	20001c0c 	.word	0x20001c0c
 8002c68:	20001be8 	.word	0x20001be8

08002c6c <NOP_Process>:
 8002c6c:	4770      	bx	lr

08002c6e <UserToPMABufferCopy>:
 8002c6e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002c72:	3201      	adds	r2, #1
 8002c74:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 8002c78:	1052      	asrs	r2, r2, #1
 8002c7a:	0049      	lsls	r1, r1, #1
 8002c7c:	b902      	cbnz	r2, 8002c80 <UserToPMABufferCopy+0x12>
 8002c7e:	4770      	bx	lr
 8002c80:	f830 3b02 	ldrh.w	r3, [r0], #2
 8002c84:	3a01      	subs	r2, #1
 8002c86:	f821 3b04 	strh.w	r3, [r1], #4
 8002c8a:	e7f7      	b.n	8002c7c <UserToPMABufferCopy+0xe>

08002c8c <PMAToUserBufferCopy>:
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002c94:	3201      	adds	r2, #1
 8002c96:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 8002c9a:	1052      	asrs	r2, r2, #1
 8002c9c:	0049      	lsls	r1, r1, #1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d100      	bne.n	8002ca4 <PMAToUserBufferCopy+0x18>
 8002ca2:	bd10      	pop	{r4, pc}
 8002ca4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002ca8:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8002cac:	3301      	adds	r3, #1
 8002cae:	e7f6      	b.n	8002c9e <PMAToUserBufferCopy+0x12>

08002cb0 <SetEPTxStatus>:
 8002cb0:	0080      	lsls	r0, r0, #2
 8002cb2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002cb6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002cba:	6803      	ldr	r3, [r0, #0]
 8002cbc:	06ca      	lsls	r2, r1, #27
 8002cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	bf48      	it	mi
 8002cca:	f083 0310 	eormi.w	r3, r3, #16
 8002cce:	068a      	lsls	r2, r1, #26
 8002cd0:	bf48      	it	mi
 8002cd2:	f083 0320 	eormi.w	r3, r3, #32
 8002cd6:	6003      	str	r3, [r0, #0]
 8002cd8:	4770      	bx	lr

08002cda <ClearDTOG_RX>:
 8002cda:	0080      	lsls	r0, r0, #2
 8002cdc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002ce0:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	045b      	lsls	r3, r3, #17
 8002ce8:	d509      	bpl.n	8002cfe <ClearDTOG_RX+0x24>
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6003      	str	r3, [r0, #0]
 8002cfe:	4770      	bx	lr

08002d00 <ClearDTOG_TX>:
 8002d00:	0080      	lsls	r0, r0, #2
 8002d02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002d06:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002d0a:	6803      	ldr	r3, [r0, #0]
 8002d0c:	065b      	lsls	r3, r3, #25
 8002d0e:	d509      	bpl.n	8002d24 <ClearDTOG_TX+0x24>
 8002d10:	6803      	ldr	r3, [r0, #0]
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d22:	6003      	str	r3, [r0, #0]
 8002d24:	4770      	bx	lr
	...

08002d28 <GetEPTxAddr>:
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <GetEPTxAddr+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d32:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8002d36:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8002d3a:	0040      	lsls	r0, r0, #1
 8002d3c:	8800      	ldrh	r0, [r0, #0]
 8002d3e:	4770      	bx	lr
 8002d40:	40005c50 	.word	0x40005c50

08002d44 <GetEPRxAddr>:
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <GetEPRxAddr+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d4e:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <GetEPRxAddr+0x18>)
 8002d50:	4403      	add	r3, r0
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	8818      	ldrh	r0, [r3, #0]
 8002d56:	4770      	bx	lr
 8002d58:	40005c50 	.word	0x40005c50
 8002d5c:	20003004 	.word	0x20003004

08002d60 <SetEPTxCount>:
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <SetEPTxCount+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d6a:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <SetEPTxCount+0x18>)
 8002d6c:	4403      	add	r3, r0
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	6019      	str	r1, [r3, #0]
 8002d72:	4770      	bx	lr
 8002d74:	40005c50 	.word	0x40005c50
 8002d78:	20003002 	.word	0x20003002

08002d7c <SetEPRxCount>:
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <SetEPRxCount+0x38>)
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <SetEPRxCount+0x3c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	293e      	cmp	r1, #62	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d8a:	4402      	add	r2, r0
 8002d8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002d90:	d90a      	bls.n	8002da8 <SetEPRxCount+0x2c>
 8002d92:	094b      	lsrs	r3, r1, #5
 8002d94:	06c8      	lsls	r0, r1, #27
 8002d96:	bf04      	itt	eq
 8002d98:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8002d9c:	b29b      	uxtheq	r3, r3
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4770      	bx	lr
 8002da8:	084b      	lsrs	r3, r1, #1
 8002daa:	07c9      	lsls	r1, r1, #31
 8002dac:	bf48      	it	mi
 8002dae:	3301      	addmi	r3, #1
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	e7f7      	b.n	8002da4 <SetEPRxCount+0x28>
 8002db4:	40005c50 	.word	0x40005c50
 8002db8:	20003006 	.word	0x20003006

08002dbc <usart_putc>:
 8002dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	ac02      	add	r4, sp, #8
 8002dc2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7fe fd7a 	bl	80018c4 <usart_tx>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d0f8      	beq.n	8002dc6 <usart_putc+0xa>
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd30      	pop	{r4, r5, pc}

08002dd8 <usart_putstr>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4605      	mov	r5, r0
 8002ddc:	1e4c      	subs	r4, r1, #1
 8002dde:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002de2:	b901      	cbnz	r1, 8002de6 <usart_putstr+0xe>
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
 8002de6:	4628      	mov	r0, r5
 8002de8:	f7ff ffe8 	bl	8002dbc <usart_putc>
 8002dec:	e7f7      	b.n	8002dde <usart_putstr+0x6>
	...

08002df0 <throb>:
 8002df0:	b508      	push	{r3, lr}
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <throb+0x54>)
 8002df4:	2203      	movs	r2, #3
 8002df6:	681c      	ldr	r4, [r3, #0]
 8002df8:	210d      	movs	r1, #13
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7fe f83a 	bl	8000e74 <gpio_set_mode>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2101      	movs	r1, #1
 8002e04:	461a      	mov	r2, r3
 8002e06:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002e0a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002e0e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002e12:	d00b      	beq.n	8002e2c <throb+0x3c>
 8002e14:	b16a      	cbz	r2, 8002e32 <throb+0x42>
 8002e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1a:	d101      	bne.n	8002e20 <throb+0x30>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	440a      	add	r2, r1
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d90b      	bls.n	8002e3c <throb+0x4c>
 8002e24:	6826      	ldr	r6, [r4, #0]
 8002e26:	6135      	str	r5, [r6, #16]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7f0      	b.n	8002e0e <throb+0x1e>
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	e7f1      	b.n	8002e16 <throb+0x26>
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e36:	f04f 0101 	mov.w	r1, #1
 8002e3a:	d0ef      	beq.n	8002e1c <throb+0x2c>
 8002e3c:	6826      	ldr	r6, [r4, #0]
 8002e3e:	6130      	str	r0, [r6, #16]
 8002e40:	e7f2      	b.n	8002e28 <throb+0x38>
 8002e42:	bf00      	nop
 8002e44:	08009e00 	.word	0x08009e00

08002e48 <__error>:
 8002e48:	b508      	push	{r3, lr}
 8002e4a:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <__error+0x10>)
 8002e4c:	b10b      	cbz	r3, 8002e52 <__error+0xa>
 8002e4e:	f000 f847 	bl	8002ee0 <__lm_error>
 8002e52:	b662      	cpsie	i
 8002e54:	f7ff ffcc 	bl	8002df0 <throb>
 8002e58:	08002ee1 	.word	0x08002ee1

08002e5c <_fail>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <_fail+0x54>)
 8002e60:	4606      	mov	r6, r0
 8002e62:	460d      	mov	r5, r1
 8002e64:	4617      	mov	r7, r2
 8002e66:	b30b      	cbz	r3, 8002eac <_fail+0x50>
 8002e68:	f000 f85a 	bl	8002f20 <__lm_enable_error_usart>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4911      	ldr	r1, [pc, #68]	; (8002eb4 <_fail+0x58>)
 8002e70:	f7ff ffb2 	bl	8002dd8 <usart_putstr>
 8002e74:	4639      	mov	r1, r7
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff ffae 	bl	8002dd8 <usart_putstr>
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <_fail+0x5c>)
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7ff ffaa 	bl	8002dd8 <usart_putstr>
 8002e84:	4631      	mov	r1, r6
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ffa6 	bl	8002dd8 <usart_putstr>
 8002e8c:	490b      	ldr	r1, [pc, #44]	; (8002ebc <_fail+0x60>)
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff ffa2 	bl	8002dd8 <usart_putstr>
 8002e94:	4629      	mov	r1, r5
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fe fd5b 	bl	8001952 <usart_putudec>
 8002e9c:	210a      	movs	r1, #10
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff ff8c 	bl	8002dbc <usart_putc>
 8002ea4:	210d      	movs	r1, #13
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff ff88 	bl	8002dbc <usart_putc>
 8002eac:	f7ff ffcc 	bl	8002e48 <__error>
 8002eb0:	08002f21 	.word	0x08002f21
 8002eb4:	0800a209 	.word	0x0800a209
 8002eb8:	0800a21f 	.word	0x0800a21f
 8002ebc:	0800a220 	.word	0x0800a220

08002ec0 <premain()>:
 8002ec0:	f7fd b9bc 	b.w	800023c <init()>

08002ec4 <main>:
 8002ec4:	b508      	push	{r3, lr}
 8002ec6:	f001 f827 	bl	8003f18 <setup()>
 8002eca:	f001 fd81 	bl	80049d0 <loop()>
 8002ece:	e7fc      	b.n	8002eca <main+0x6>

08002ed0 <adc_disable>:
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6803      	ldr	r3, [r0, #0]
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002eda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002ede:	4770      	bx	lr

08002ee0 <__lm_error>:
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <__lm_error+0x30>)
 8002ee8:	480a      	ldr	r0, [pc, #40]	; (8002f14 <__lm_error+0x34>)
 8002eea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002eee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002ef2:	f7fe fab9 	bl	8001468 <timer_foreach>
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <__lm_error+0x38>)
 8002ef8:	f7fd fd1e 	bl	8000938 <adc_foreach>
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <__lm_error+0x3c>)
 8002efe:	f7fe fdcd 	bl	8001a9c <usart_foreach>
 8002f02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	bd10      	pop	{r4, pc}
 8002f10:	e000e100 	.word	0xe000e100
 8002f14:	080014a9 	.word	0x080014a9
 8002f18:	08002ed1 	.word	0x08002ed1
 8002f1c:	08001891 	.word	0x08001891

08002f20 <__lm_enable_error_usart>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__lm_enable_error_usart+0x28>)
 8002f24:	4c09      	ldr	r4, [pc, #36]	; (8002f4c <__lm_enable_error_usart+0x2c>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	220b      	movs	r2, #11
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	f7fd ffa2 	bl	8000e74 <gpio_set_mode>
 8002f30:	6820      	ldr	r0, [r4, #0]
 8002f32:	f7fe fc7d 	bl	8001830 <usart_init>
 8002f36:	6820      	ldr	r0, [r4, #0]
 8002f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f7fe fd85 	bl	8001a4c <usart_set_baud_rate>
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop
 8002f48:	08009df8 	.word	0x08009df8
 8002f4c:	200001c0 	.word	0x200001c0

08002f50 <pinMode(unsigned char, WiringPinMode)>:
 8002f50:	2822      	cmp	r0, #34	; 0x22
 8002f52:	b538      	push	{r3, r4, r5, lr}
 8002f54:	d842      	bhi.n	8002fdc <pinMode(unsigned char, WiringPinMode)+0x8c>
 8002f56:	2908      	cmp	r1, #8
 8002f58:	d827      	bhi.n	8002faa <pinMode(unsigned char, WiringPinMode)+0x5a>
 8002f5a:	e8df f001 	tbb	[pc, r1]
 8002f5e:	302d      	.short	0x302d
 8002f60:	1d1a1705 	.word	0x1d1a1705
 8002f64:	2005      	.short	0x2005
 8002f66:	23          	.byte	0x23
 8002f67:	00          	.byte	0x00
 8002f68:	2400      	movs	r4, #0
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <pinMode(unsigned char, WiringPinMode)+0x90>)
 8002f6e:	0100      	lsls	r0, r0, #4
 8002f70:	181d      	adds	r5, r3, r0
 8002f72:	7b29      	ldrb	r1, [r5, #12]
 8002f74:	5818      	ldr	r0, [r3, r0]
 8002f76:	f7fd ff7d 	bl	8000e74 <gpio_set_mode>
 8002f7a:	6868      	ldr	r0, [r5, #4]
 8002f7c:	b370      	cbz	r0, 8002fdc <pinMode(unsigned char, WiringPinMode)+0x8c>
 8002f7e:	7b69      	ldrb	r1, [r5, #13]
 8002f80:	b304      	cbz	r4, 8002fc4 <pinMode(unsigned char, WiringPinMode)+0x74>
 8002f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f86:	2201      	movs	r2, #1
 8002f88:	f7fe badc 	b.w	8001544 <timer_set_mode>
 8002f8c:	2400      	movs	r4, #0
 8002f8e:	4622      	mov	r2, r4
 8002f90:	e7ec      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002f92:	2400      	movs	r4, #0
 8002f94:	2209      	movs	r2, #9
 8002f96:	e7e9      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002f98:	2400      	movs	r4, #0
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	e7e6      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002f9e:	2401      	movs	r4, #1
 8002fa0:	220b      	movs	r2, #11
 8002fa2:	e7e3      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002fa4:	2401      	movs	r4, #1
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	e7e0      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <pinMode(unsigned char, WiringPinMode)+0x94>)
 8002fac:	214c      	movs	r1, #76	; 0x4c
 8002fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <pinMode(unsigned char, WiringPinMode)+0x98>)
 8002fb4:	f7ff bf52 	b.w	8002e5c <_fail>
 8002fb8:	2400      	movs	r4, #0
 8002fba:	2203      	movs	r2, #3
 8002fbc:	e7d6      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	e7d3      	b.n	8002f6c <pinMode(unsigned char, WiringPinMode)+0x1c>
 8002fc4:	6802      	ldr	r2, [r0, #0]
 8002fc6:	1e4b      	subs	r3, r1, #1
 8002fc8:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8002fcc:	3220      	adds	r2, #32
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002fda:	601c      	str	r4, [r3, #0]
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	bf00      	nop
 8002fe0:	08009938 	.word	0x08009938
 8002fe4:	0800a5b7 	.word	0x0800a5b7
 8002fe8:	0800a223 	.word	0x0800a223

08002fec <_GLOBAL__sub_I_TTimer1>:
 8002fec:	b508      	push	{r3, lr}
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <_GLOBAL__sub_I_TTimer1+0x28>)
 8002ff2:	f7fd facf 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <_GLOBAL__sub_I_TTimer1+0x2c>)
 8002ffa:	f7fd facb 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 8002ffe:	2103      	movs	r1, #3
 8003000:	4806      	ldr	r0, [pc, #24]	; (800301c <_GLOBAL__sub_I_TTimer1+0x30>)
 8003002:	f7fd fac7 	bl	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 8003006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800300a:	2104      	movs	r1, #4
 800300c:	4804      	ldr	r0, [pc, #16]	; (8003020 <_GLOBAL__sub_I_TTimer1+0x34>)
 800300e:	f7fd bac1 	b.w	8000594 <HardwareTimer::HardwareTimer(unsigned char)>
 8003012:	bf00      	nop
 8003014:	20001018 	.word	0x20001018
 8003018:	2000101c 	.word	0x2000101c
 800301c:	20001020 	.word	0x20001020
 8003020:	20001024 	.word	0x20001024

08003024 <USBSerial::available()>:
 8003024:	f7ff b9b2 	b.w	800238c <usb_cdcacm_data_available>

08003028 <USBSerial::peek()>:
 8003028:	b507      	push	{r0, r1, r2, lr}
 800302a:	2101      	movs	r1, #1
 800302c:	f10d 0007 	add.w	r0, sp, #7
 8003030:	f7ff f9b8 	bl	80023a4 <usb_cdcacm_peek>
 8003034:	2801      	cmp	r0, #1
 8003036:	bf14      	ite	ne
 8003038:	f04f 30ff 	movne.w	r0, #4294967295
 800303c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8003040:	b003      	add	sp, #12
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4

08003046 <USBSerial::read()>:
 8003046:	b507      	push	{r0, r1, r2, lr}
 8003048:	2101      	movs	r1, #1
 800304a:	f10d 0007 	add.w	r0, sp, #7
 800304e:	f7ff f9c5 	bl	80023dc <usb_cdcacm_rx>
 8003052:	b120      	cbz	r0, 800305e <USBSerial::read()+0x18>
 8003054:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003058:	b003      	add	sp, #12
 800305a:	f85d fb04 	ldr.w	pc, [sp], #4
 800305e:	f04f 30ff 	mov.w	r0, #4294967295
 8003062:	e7f9      	b.n	8003058 <USBSerial::read()+0x12>

08003064 <ifaceSetupHook(unsigned int, void*)>:
 8003064:	b508      	push	{r3, lr}
 8003066:	780b      	ldrb	r3, [r1, #0]
 8003068:	2b22      	cmp	r3, #34	; 0x22
 800306a:	d10e      	bne.n	800308a <ifaceSetupHook(unsigned int, void*)+0x26>
 800306c:	f7ff f9f0 	bl	8002450 <usb_cdcacm_get_dtr>
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <ifaceSetupHook(unsigned int, void*)+0x34>)
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	2a03      	cmp	r2, #3
 8003076:	d808      	bhi.n	800308a <ifaceSetupHook(unsigned int, void*)+0x26>
 8003078:	e8df f002 	tbb	[pc, r2]
 800307c:	08080208 	.word	0x08080208
 8003080:	2800      	cmp	r0, #0
 8003082:	bf14      	ite	ne
 8003084:	2201      	movne	r2, #1
 8003086:	2202      	moveq	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	bd08      	pop	{r3, pc}
 800308c:	2800      	cmp	r0, #0
 800308e:	bf14      	ite	ne
 8003090:	2201      	movne	r2, #1
 8003092:	2203      	moveq	r2, #3
 8003094:	e7f8      	b.n	8003088 <ifaceSetupHook(unsigned int, void*)+0x24>
 8003096:	bf00      	nop
 8003098:	20001038 	.word	0x20001038

0800309c <rxHook(unsigned int, void*)>:
 800309c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800309e:	4c27      	ldr	r4, [pc, #156]	; (800313c <rxHook(unsigned int, void*)+0xa0>)
 80030a0:	7822      	ldrb	r2, [r4, #0]
 80030a2:	2a02      	cmp	r2, #2
 80030a4:	d144      	bne.n	8003130 <rxHook(unsigned int, void*)+0x94>
 80030a6:	f7ff f971 	bl	800238c <usb_cdcacm_data_available>
 80030aa:	2803      	cmp	r0, #3
 80030ac:	d940      	bls.n	8003130 <rxHook(unsigned int, void*)+0x94>
 80030ae:	f7ff f96d 	bl	800238c <usb_cdcacm_data_available>
 80030b2:	2204      	movs	r2, #4
 80030b4:	1f01      	subs	r1, r0, #4
 80030b6:	eb0d 0002 	add.w	r0, sp, r2
 80030ba:	f7ff f9a9 	bl	8002410 <usb_cdcacm_peek_ex>
 80030be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030c2:	2b31      	cmp	r3, #49	; 0x31
 80030c4:	d136      	bne.n	8003134 <rxHook(unsigned int, void*)+0x98>
 80030c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80030ca:	2b45      	cmp	r3, #69	; 0x45
 80030cc:	d132      	bne.n	8003134 <rxHook(unsigned int, void*)+0x98>
 80030ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030d2:	2b41      	cmp	r3, #65	; 0x41
 80030d4:	d12e      	bne.n	8003134 <rxHook(unsigned int, void*)+0x98>
 80030d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030da:	2b46      	cmp	r3, #70	; 0x46
 80030dc:	d12a      	bne.n	8003134 <rxHook(unsigned int, void*)+0x98>
 80030de:	f7fd fc56 	bl	800098e <bkp_init>
 80030e2:	f7fd fc61 	bl	80009a8 <bkp_enable_writes>
 80030e6:	f244 214c 	movw	r1, #16972	; 0x424c
 80030ea:	200a      	movs	r0, #10
 80030ec:	f7fd fc68 	bl	80009c0 <bkp_write>
 80030f0:	f7fd fc60 	bl	80009b4 <bkp_disable_writes>
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <rxHook(unsigned int, void*)+0xa4>)
 80030f6:	4c13      	ldr	r4, [pc, #76]	; (8003144 <rxHook(unsigned int, void*)+0xa8>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	f06f 0506 	mvn.w	r5, #6
 8003100:	f04f 46c2 	mov.w	r6, #1627389952	; 0x61000000
 8003104:	4620      	mov	r0, r4
 8003106:	4685      	mov	sp, r0
 8003108:	f04f 0001 	mov.w	r0, #1
 800310c:	4619      	mov	r1, r3
 800310e:	4632      	mov	r2, r6
 8003110:	b404      	push	{r2}
 8003112:	b402      	push	{r1}
 8003114:	b401      	push	{r0}
 8003116:	b401      	push	{r0}
 8003118:	b401      	push	{r0}
 800311a:	b401      	push	{r0}
 800311c:	b401      	push	{r0}
 800311e:	b401      	push	{r0}
 8003120:	46ae      	mov	lr, r5
 8003122:	4770      	bx	lr
 8003124:	4a08      	ldr	r2, [pc, #32]	; (8003148 <rxHook(unsigned int, void*)+0xac>)
 8003126:	f240 115f 	movw	r1, #351	; 0x15f
 800312a:	4808      	ldr	r0, [pc, #32]	; (800314c <rxHook(unsigned int, void*)+0xb0>)
 800312c:	f7ff fe96 	bl	8002e5c <_fail>
 8003130:	b002      	add	sp, #8
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	2303      	movs	r3, #3
 8003136:	7023      	strb	r3, [r4, #0]
 8003138:	e7fa      	b.n	8003130 <rxHook(unsigned int, void*)+0x94>
 800313a:	bf00      	nop
 800313c:	20001038 	.word	0x20001038
 8003140:	08003151 	.word	0x08003151
 8003144:	20000800 	.word	0x20000800
 8003148:	0800a5b7 	.word	0x0800a5b7
 800314c:	0800a29e 	.word	0x0800a29e

08003150 <wait_reset()>:
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <wait_reset()+0xc>)
 8003152:	4618      	mov	r0, r3
 8003154:	3801      	subs	r0, #1
 8003156:	d8fd      	bhi.n	8003154 <wait_reset()+0x4>
 8003158:	f7fd bffa 	b.w	8001150 <nvic_sys_reset>
 800315c:	00124f7f 	.word	0x00124f7f

08003160 <USBSerial::begin()>:
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <USBSerial::begin()+0x28>)
 8003162:	b510      	push	{r4, lr}
 8003164:	7819      	ldrb	r1, [r3, #0]
 8003166:	b971      	cbnz	r1, 8003186 <USBSerial::begin()+0x26>
 8003168:	2401      	movs	r4, #1
 800316a:	4608      	mov	r0, r1
 800316c:	701c      	strb	r4, [r3, #0]
 800316e:	f7ff f8ed 	bl	800234c <usb_cdcacm_enable>
 8003172:	4620      	mov	r0, r4
 8003174:	4905      	ldr	r1, [pc, #20]	; (800318c <USBSerial::begin()+0x2c>)
 8003176:	f7ff f8db 	bl	8002330 <usb_cdcacm_set_hooks>
 800317a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800317e:	4904      	ldr	r1, [pc, #16]	; (8003190 <USBSerial::begin()+0x30>)
 8003180:	2002      	movs	r0, #2
 8003182:	f7ff b8d5 	b.w	8002330 <usb_cdcacm_set_hooks>
 8003186:	bd10      	pop	{r4, pc}
 8003188:	2000103a 	.word	0x2000103a
 800318c:	0800309d 	.word	0x0800309d
 8003190:	08003065 	.word	0x08003065

08003194 <USBSerial::write(unsigned char const*, unsigned long)>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	4616      	mov	r6, r2
 8003198:	460d      	mov	r5, r1
 800319a:	b1b1      	cbz	r1, 80031ca <USBSerial::write(unsigned char const*, unsigned long)+0x36>
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <USBSerial::write(unsigned char const*, unsigned long)+0x3c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	7b1b      	ldrb	r3, [r3, #12]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d111      	bne.n	80031ca <USBSerial::write(unsigned char const*, unsigned long)+0x36>
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <USBSerial::write(unsigned char const*, unsigned long)+0x40>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b143      	cbz	r3, 80031be <USBSerial::write(unsigned char const*, unsigned long)+0x2a>
 80031ac:	2400      	movs	r4, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d90c      	bls.n	80031cc <USBSerial::write(unsigned char const*, unsigned long)+0x38>
 80031b2:	1b31      	subs	r1, r6, r4
 80031b4:	1928      	adds	r0, r5, r4
 80031b6:	f7ff f8e3 	bl	8002380 <usb_cdcacm_tx>
 80031ba:	4404      	add	r4, r0
 80031bc:	e7f7      	b.n	80031ae <USBSerial::write(unsigned char const*, unsigned long)+0x1a>
 80031be:	4628      	mov	r0, r5
 80031c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031c4:	4611      	mov	r1, r2
 80031c6:	f7ff b8db 	b.w	8002380 <usb_cdcacm_tx>
 80031ca:	2400      	movs	r4, #0
 80031cc:	4620      	mov	r0, r4
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	20000384 	.word	0x20000384
 80031d4:	20001039 	.word	0x20001039

080031d8 <USBSerial::write(unsigned char)>:
 80031d8:	b507      	push	{r0, r1, r2, lr}
 80031da:	ab02      	add	r3, sp, #8
 80031dc:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80031e0:	2201      	movs	r2, #1
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7ff ffd6 	bl	8003194 <USBSerial::write(unsigned char const*, unsigned long)>
 80031e8:	b003      	add	sp, #12
 80031ea:	f85d fb04 	ldr.w	pc, [sp], #4

080031ee <USBSerial::write(char const*)>:
 80031ee:	b538      	push	{r3, r4, r5, lr}
 80031f0:	4605      	mov	r5, r0
 80031f2:	4608      	mov	r0, r1
 80031f4:	460c      	mov	r4, r1
 80031f6:	f005 fa67 	bl	80086c8 <strlen>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4602      	mov	r2, r0
 80031fe:	4628      	mov	r0, r5
 8003200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003204:	f7ff bfc6 	b.w	8003194 <USBSerial::write(unsigned char const*, unsigned long)>

08003208 <USBSerial::read(unsigned char*, unsigned long)>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	460e      	mov	r6, r1
 800320c:	4615      	mov	r5, r2
 800320e:	2400      	movs	r4, #0
 8003210:	42ac      	cmp	r4, r5
 8003212:	d205      	bcs.n	8003220 <USBSerial::read(unsigned char*, unsigned long)+0x18>
 8003214:	1b29      	subs	r1, r5, r4
 8003216:	1930      	adds	r0, r6, r4
 8003218:	f7ff f8e0 	bl	80023dc <usb_cdcacm_rx>
 800321c:	4404      	add	r4, r0
 800321e:	e7f7      	b.n	8003210 <USBSerial::read(unsigned char*, unsigned long)+0x8>
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <USBSerial::flush()>:
 8003224:	b513      	push	{r0, r1, r4, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	f7ff f8b0 	bl	800238c <usb_cdcacm_data_available>
 800322c:	b130      	cbz	r0, 800323c <USBSerial::flush()+0x18>
 800322e:	2201      	movs	r2, #1
 8003230:	f10d 0107 	add.w	r1, sp, #7
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ffe7 	bl	8003208 <USBSerial::read(unsigned char*, unsigned long)>
 800323a:	e7f5      	b.n	8003228 <USBSerial::flush()+0x4>
 800323c:	b002      	add	sp, #8
 800323e:	bd10      	pop	{r4, pc}

08003240 <_GLOBAL__sub_I__ZN9USBSerial9_hasBegunE>:
 8003240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003244:	2100      	movs	r1, #0
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <_GLOBAL__sub_I__ZN9USBSerial9_hasBegunE+0x14>)
 8003248:	e9c3 1201 	strd	r1, r2, [r3, #4]
 800324c:	4a02      	ldr	r2, [pc, #8]	; (8003258 <_GLOBAL__sub_I__ZN9USBSerial9_hasBegunE+0x18>)
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20001028 	.word	0x20001028
 8003258:	0800a314 	.word	0x0800a314

0800325c <digitalWrite(unsigned char, unsigned char)>:
 800325c:	2822      	cmp	r0, #34	; 0x22
 800325e:	b510      	push	{r4, lr}
 8003260:	d80e      	bhi.n	8003280 <digitalWrite(unsigned char, unsigned char)+0x24>
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <digitalWrite(unsigned char, unsigned char)+0x28>)
 8003264:	0100      	lsls	r0, r0, #4
 8003266:	181c      	adds	r4, r3, r0
 8003268:	581b      	ldr	r3, [r3, r0]
 800326a:	fab1 f181 	clz	r1, r1
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2301      	movs	r3, #1
 8003272:	7b20      	ldrb	r0, [r4, #12]
 8003274:	0949      	lsrs	r1, r1, #5
 8003276:	4083      	lsls	r3, r0
 8003278:	0109      	lsls	r1, r1, #4
 800327a:	fa03 f101 	lsl.w	r1, r3, r1
 800327e:	6111      	str	r1, [r2, #16]
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	08009938 	.word	0x08009938

08003288 <micros()>:
 8003288:	b510      	push	{r4, lr}
 800328a:	490a      	ldr	r1, [pc, #40]	; (80032b4 <micros()+0x2c>)
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <micros()+0x30>)
 800328e:	6808      	ldr	r0, [r1, #0]
 8003290:	68a3      	ldr	r3, [r4, #8]
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	680a      	ldr	r2, [r1, #0]
 8003298:	4282      	cmp	r2, r0
 800329a:	d1f8      	bne.n	800328e <micros()+0x6>
 800329c:	2048      	movs	r0, #72	; 0x48
 800329e:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 80032a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80032a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80032aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ae:	fb00 3002 	mla	r0, r0, r2, r3
 80032b2:	bd10      	pop	{r4, pc}
 80032b4:	20001bd8 	.word	0x20001bd8
 80032b8:	e000e010 	.word	0xe000e010

080032bc <delay(unsigned long)>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	4604      	mov	r4, r0
 80032c0:	f7ff ffe2 	bl	8003288 <micros()>
 80032c4:	4605      	mov	r5, r0
 80032c6:	b15c      	cbz	r4, 80032e0 <delay(unsigned long)+0x24>
 80032c8:	f7fd facc 	bl	8000864 <yield>
 80032cc:	f7ff ffdc 	bl	8003288 <micros()>
 80032d0:	1b40      	subs	r0, r0, r5
 80032d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032d6:	d3f6      	bcc.n	80032c6 <delay(unsigned long)+0xa>
 80032d8:	3c01      	subs	r4, #1
 80032da:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 80032de:	d1f5      	bne.n	80032cc <delay(unsigned long)+0x10>
 80032e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080032e4 <SCSI_BUS_get_byte()>:
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <SCSI_BUS_get_byte()+0x24>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	f04f 3344 	mov.w	r3, #1145324612	; 0x44444444
 80032fa:	6053      	str	r3, [r2, #4]
 80032fc:	6890      	ldr	r0, [r2, #8]
 80032fe:	43c0      	mvns	r0, r0
 8003300:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	08009dfc 	.word	0x08009dfc

0800330c <SCSI_BUS_put_byte(unsigned char)>:
 800330c:	43c0      	mvns	r0, r0
 800330e:	b2c2      	uxtb	r2, r0
 8003310:	0200      	lsls	r0, r0, #8
 8003312:	b280      	uxth	r0, r0
 8003314:	ea6f 2040 	mvn.w	r0, r0, lsl #9
 8003318:	ea6f 2050 	mvn.w	r0, r0, lsr #9
 800331c:	1053      	asrs	r3, r2, #1
 800331e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8003322:	f002 0255 	and.w	r2, r2, #85	; 0x55
 8003326:	4413      	add	r3, r2
 8003328:	f003 0133 	and.w	r1, r3, #51	; 0x33
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003332:	4419      	add	r1, r3
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SCSI_BUS_put_byte(unsigned char)+0x54>)
 8003336:	f001 030f 	and.w	r3, r1, #15
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	eb03 1311 	add.w	r3, r3, r1, lsr #4
 8003340:	01db      	lsls	r3, r3, #7
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4318      	orrs	r0, r3
 8003348:	6110      	str	r0, [r2, #16]
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003350:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	f04f 3377 	mov.w	r3, #2004318071	; 0x77777777
 800335a:	6053      	str	r3, [r2, #4]
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	08009dfc 	.word	0x08009dfc

08003364 <SdFs::~SdFs()>:
 8003364:	4770      	bx	lr

08003366 <StreamFile<FsBaseFile, unsigned long long>::available()>:
 8003366:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003368:	e92d 4800 	stmdb	sp!, {fp, lr}
 800336c:	b163      	cbz	r3, 8003388 <StreamFile<FsBaseFile, unsigned long long>::available()+0x22>
 800336e:	7818      	ldrb	r0, [r3, #0]
 8003370:	f010 0008 	ands.w	r0, r0, #8
 8003374:	bf1e      	ittt	ne
 8003376:	69d8      	ldrne	r0, [r3, #28]
 8003378:	695b      	ldrne	r3, [r3, #20]
 800337a:	1ac0      	subne	r0, r0, r3
 800337c:	2800      	cmp	r0, #0
 800337e:	bfb8      	it	lt
 8003380:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 8003384:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
 8003388:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800338a:	2800      	cmp	r0, #0
 800338c:	d0fa      	beq.n	8003384 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
 800338e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003392:	071b      	lsls	r3, r3, #28
 8003394:	d512      	bpl.n	80033bc <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
 8003396:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800339a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800339e:	1a12      	subs	r2, r2, r0
 80033a0:	eb63 0301 	sbc.w	r3, r3, r1
 80033a4:	4693      	mov	fp, r2
 80033a6:	469c      	mov	ip, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033ae:	4563      	cmp	r3, ip
 80033b0:	bf08      	it	eq
 80033b2:	455a      	cmpeq	r2, fp
 80033b4:	4658      	mov	r0, fp
 80033b6:	bf38      	it	cc
 80033b8:	4610      	movcc	r0, r2
 80033ba:	e7e3      	b.n	8003384 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
 80033bc:	f04f 0b00 	mov.w	fp, #0
 80033c0:	f04f 0c00 	mov.w	ip, #0
 80033c4:	e7f0      	b.n	80033a8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x42>

080033c6 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
 80033c6:	4603      	mov	r3, r0
 80033c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80033ca:	b108      	cbz	r0, 80033d0 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
 80033cc:	f002 bf1b 	b.w	8006206 <FatFile::peek()>
 80033d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033d2:	b108      	cbz	r0, 80033d8 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
 80033d4:	f001 bdc6 	b.w	8004f64 <ExFatFile::peek()>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	4770      	bx	lr
	...

080033e0 <SCSI_BUS_RST_assert()>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	2401      	movs	r4, #1
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <SCSI_BUS_RST_assert()+0x30>)
 80033e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fa04 f303 	lsl.w	r3, r4, r3
 80033f4:	6891      	ldr	r1, [r2, #8]
 80033f6:	4219      	tst	r1, r3
 80033f8:	d108      	bne.n	800340c <SCSI_BUS_RST_assert()+0x2c>
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	4213      	tst	r3, r2
 80033fe:	d005      	beq.n	800340c <SCSI_BUS_RST_assert()+0x2c>
 8003400:	4904      	ldr	r1, [pc, #16]	; (8003414 <SCSI_BUS_RST_assert()+0x34>)
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <SCSI_BUS_RST_assert()+0x38>)
 8003404:	f7fd f96e 	bl	80006e4 <Print::println(char const*)>
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <SCSI_BUS_RST_assert()+0x3c>)
 800340a:	701c      	strb	r4, [r3, #0]
 800340c:	bd10      	pop	{r4, pc}
 800340e:	bf00      	nop
 8003410:	08009938 	.word	0x08009938
 8003414:	0800a475 	.word	0x0800a475
 8003418:	20000cc4 	.word	0x20000cc4
 800341c:	200016f8 	.word	0x200016f8

08003420 <__tcf_0>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4c06      	ldr	r4, [pc, #24]	; (800343c <__tcf_0+0x1c>)
 8003424:	4e06      	ldr	r6, [pc, #24]	; (8003440 <__tcf_0+0x20>)
 8003426:	f5a4 7550 	sub.w	r5, r4, #832	; 0x340
 800342a:	6066      	str	r6, [r4, #4]
 800342c:	f104 0014 	add.w	r0, r4, #20
 8003430:	3c68      	subs	r4, #104	; 0x68
 8003432:	f003 fdad 	bl	8006f90 <FsBaseFile::close()>
 8003436:	42ac      	cmp	r4, r5
 8003438:	d1f7      	bne.n	800342a <__tcf_0+0xa>
 800343a:	bd70      	pop	{r4, r5, r6, pc}
 800343c:	200019d8 	.word	0x200019d8
 8003440:	0800a338 	.word	0x0800a338

08003444 <FsBaseFile::read(void*, unsigned int)>:
 8003444:	4603      	mov	r3, r0
 8003446:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003448:	b108      	cbz	r0, 800344e <FsBaseFile::read(void*, unsigned int)+0xa>
 800344a:	f002 be26 	b.w	800609a <FatFile::read(void*, unsigned int)>
 800344e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003450:	b108      	cbz	r0, 8003456 <FsBaseFile::read(void*, unsigned int)+0x12>
 8003452:	f001 bcc1 	b.w	8004dd8 <ExFatFile::read(void*, unsigned int)>
 8003456:	f04f 30ff 	mov.w	r0, #4294967295
 800345a:	4770      	bx	lr

0800345c <StreamFile<FsBaseFile, unsigned long long>::read()>:
 800345c:	b507      	push	{r0, r1, r2, lr}
 800345e:	2201      	movs	r2, #1
 8003460:	f10d 0107 	add.w	r1, sp, #7
 8003464:	3010      	adds	r0, #16
 8003466:	f7ff ffed 	bl	8003444 <FsBaseFile::read(void*, unsigned int)>
 800346a:	2801      	cmp	r0, #1
 800346c:	bf14      	ite	ne
 800346e:	f04f 30ff 	movne.w	r0, #4294967295
 8003472:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8003476:	b003      	add	sp, #12
 8003478:	f85d fb04 	ldr.w	pc, [sp], #4

0800347c <FsBaseFile::seekSet(unsigned long long)>:
 800347c:	b4d0      	push	{r4, r6, r7}
 800347e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003480:	b144      	cbz	r4, 8003494 <FsBaseFile::seekSet(unsigned long long)+0x18>
 8003482:	2b01      	cmp	r3, #1
 8003484:	bf08      	it	eq
 8003486:	2a00      	cmpeq	r2, #0
 8003488:	d209      	bcs.n	800349e <FsBaseFile::seekSet(unsigned long long)+0x22>
 800348a:	4620      	mov	r0, r4
 800348c:	bcd0      	pop	{r4, r6, r7}
 800348e:	4611      	mov	r1, r2
 8003490:	f002 bee9 	b.w	8006266 <FatFile::seekSet(unsigned long)>
 8003494:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003496:	b110      	cbz	r0, 800349e <FsBaseFile::seekSet(unsigned long long)+0x22>
 8003498:	bcd0      	pop	{r4, r6, r7}
 800349a:	f001 bd78 	b.w	8004f8e <ExFatFile::seekSet(unsigned long long)>
 800349e:	2000      	movs	r0, #0
 80034a0:	bcd0      	pop	{r4, r6, r7}
 80034a2:	4770      	bx	lr

080034a4 <FsBaseFile::sync()>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80034a8:	b108      	cbz	r0, 80034ae <FsBaseFile::sync()+0xa>
 80034aa:	f002 bf87 	b.w	80063bc <FatFile::sync()>
 80034ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034b0:	b108      	cbz	r0, 80034b6 <FsBaseFile::sync()+0x12>
 80034b2:	f002 b901 	b.w	80056b8 <ExFatFile::sync()>
 80034b6:	4770      	bx	lr

080034b8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
 80034b8:	b508      	push	{r3, lr}
 80034ba:	3010      	adds	r0, #16
 80034bc:	f7ff fff2 	bl	80034a4 <FsBaseFile::sync()>
 80034c0:	bd08      	pop	{r3, pc}

080034c2 <FsBaseFile::write(void const*, unsigned int)>:
 80034c2:	4603      	mov	r3, r0
 80034c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80034c6:	b108      	cbz	r0, 80034cc <FsBaseFile::write(void const*, unsigned int)+0xa>
 80034c8:	f003 b816 	b.w	80064f8 <FatFile::write(void const*, unsigned int)>
 80034cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034ce:	b108      	cbz	r0, 80034d4 <FsBaseFile::write(void const*, unsigned int)+0x12>
 80034d0:	f002 b9ec 	b.w	80058ac <ExFatFile::write(void const*, unsigned int)>
 80034d4:	4770      	bx	lr

080034d6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
 80034d6:	b507      	push	{r0, r1, r2, lr}
 80034d8:	ab02      	add	r3, sp, #8
 80034da:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80034de:	2201      	movs	r2, #1
 80034e0:	4619      	mov	r1, r3
 80034e2:	3010      	adds	r0, #16
 80034e4:	f7ff ffed 	bl	80034c2 <FsBaseFile::write(void const*, unsigned int)>
 80034e8:	b003      	add	sp, #12
 80034ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080034f0 <SCSI_BUS_ItoT()>:
 80034f0:	2204      	movs	r2, #4
 80034f2:	b538      	push	{r3, r4, r5, lr}
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <SCSI_BUS_ItoT()+0x5c>)
 80034f6:	4816      	ldr	r0, [pc, #88]	; (8003550 <SCSI_BUS_ItoT()+0x60>)
 80034f8:	681c      	ldr	r4, [r3, #0]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	611a      	str	r2, [r3, #16]
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <SCSI_BUS_ItoT()+0x64>)
 8003500:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8003504:	f892 113c 	ldrb.w	r1, [r2, #316]	; 0x13c
 8003508:	681d      	ldr	r5, [r3, #0]
 800350a:	2301      	movs	r3, #1
 800350c:	408b      	lsls	r3, r1
 800350e:	4611      	mov	r1, r2
 8003510:	68aa      	ldr	r2, [r5, #8]
 8003512:	421a      	tst	r2, r3
 8003514:	d004      	beq.n	8003520 <SCSI_BUS_ItoT()+0x30>
 8003516:	7802      	ldrb	r2, [r0, #0]
 8003518:	2a00      	cmp	r2, #0
 800351a:	d0f9      	beq.n	8003510 <SCSI_BUS_ItoT()+0x20>
 800351c:	2000      	movs	r0, #0
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	f7ff fee0 	bl	80032e4 <SCSI_BUS_get_byte()>
 8003524:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	611a      	str	r2, [r3, #16]
 800352c:	f8d1 3130 	ldr.w	r3, [r1, #304]	; 0x130
 8003530:	f891 213c 	ldrb.w	r2, [r1, #316]	; 0x13c
 8003534:	681c      	ldr	r4, [r3, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	4905      	ldr	r1, [pc, #20]	; (8003550 <SCSI_BUS_ItoT()+0x60>)
 800353a:	4093      	lsls	r3, r2
 800353c:	68a2      	ldr	r2, [r4, #8]
 800353e:	421a      	tst	r2, r3
 8003540:	d1ed      	bne.n	800351e <SCSI_BUS_ItoT()+0x2e>
 8003542:	780a      	ldrb	r2, [r1, #0]
 8003544:	2a00      	cmp	r2, #0
 8003546:	d0f9      	beq.n	800353c <SCSI_BUS_ItoT()+0x4c>
 8003548:	e7e8      	b.n	800351c <SCSI_BUS_ItoT()+0x2c>
 800354a:	bf00      	nop
 800354c:	08009df8 	.word	0x08009df8
 8003550:	200016f8 	.word	0x200016f8
 8003554:	08009938 	.word	0x08009938

08003558 <SCSI_BUS_IfromT(unsigned char)>:
 8003558:	b510      	push	{r4, lr}
 800355a:	f7ff fed7 	bl	800330c <SCSI_BUS_put_byte(unsigned char)>
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <SCSI_BUS_IfromT(unsigned char)+0x48>)
 8003560:	4c10      	ldr	r4, [pc, #64]	; (80035a4 <SCSI_BUS_IfromT(unsigned char)+0x4c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	2304      	movs	r3, #4
 8003568:	610b      	str	r3, [r1, #16]
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <SCSI_BUS_IfromT(unsigned char)+0x50>)
 800356c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8003570:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8003574:	2301      	movs	r3, #1
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	4083      	lsls	r3, r0
 800357a:	6890      	ldr	r0, [r2, #8]
 800357c:	4218      	tst	r0, r3
 800357e:	d003      	beq.n	8003588 <SCSI_BUS_IfromT(unsigned char)+0x30>
 8003580:	7820      	ldrb	r0, [r4, #0]
 8003582:	2800      	cmp	r0, #0
 8003584:	d0f9      	beq.n	800357a <SCSI_BUS_IfromT(unsigned char)+0x22>
 8003586:	bd10      	pop	{r4, pc}
 8003588:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800358c:	6108      	str	r0, [r1, #16]
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <SCSI_BUS_IfromT(unsigned char)+0x4c>)
 8003590:	6891      	ldr	r1, [r2, #8]
 8003592:	420b      	tst	r3, r1
 8003594:	d1f7      	bne.n	8003586 <SCSI_BUS_IfromT(unsigned char)+0x2e>
 8003596:	7801      	ldrb	r1, [r0, #0]
 8003598:	2900      	cmp	r1, #0
 800359a:	d0f9      	beq.n	8003590 <SCSI_BUS_IfromT(unsigned char)+0x38>
 800359c:	e7f3      	b.n	8003586 <SCSI_BUS_IfromT(unsigned char)+0x2e>
 800359e:	bf00      	nop
 80035a0:	08009df8 	.word	0x08009df8
 80035a4:	200016f8 	.word	0x200016f8
 80035a8:	08009938 	.word	0x08009938

080035ac <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4605      	mov	r5, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	480a      	ldr	r0, [pc, #40]	; (80035dc <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x30>)
 80035b4:	490a      	ldr	r1, [pc, #40]	; (80035e0 <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x34>)
 80035b6:	f7fd f895 	bl	80006e4 <Print::println(char const*)>
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x38>)
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x3c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4e0a      	ldr	r6, [pc, #40]	; (80035ec <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4425      	add	r5, r4
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	42ac      	cmp	r4, r5
 80035ca:	d006      	beq.n	80035da <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x2e>
 80035cc:	7833      	ldrb	r3, [r6, #0]
 80035ce:	b923      	cbnz	r3, 80035da <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x2e>
 80035d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80035d4:	f7ff ffc0 	bl	8003558 <SCSI_BUS_IfromT(unsigned char)>
 80035d8:	e7f6      	b.n	80035c8 <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)+0x1c>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	20000cc4 	.word	0x20000cc4
 80035e0:	0800a47f 	.word	0x0800a47f
 80035e4:	08009df8 	.word	0x08009df8
 80035e8:	000b0008 	.word	0x000b0008
 80035ec:	200016f8 	.word	0x200016f8

080035f0 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)>:
 80035f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	4606      	mov	r6, r0
 80035f6:	4688      	mov	r8, r1
 80035f8:	481e      	ldr	r0, [pc, #120]	; (8003674 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x84>)
 80035fa:	491f      	ldr	r1, [pc, #124]	; (8003678 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x88>)
 80035fc:	f7fd f872 	bl	80006e4 <Print::println(char const*)>
 8003600:	2068      	movs	r0, #104	; 0x68
 8003602:	f04f 0a00 	mov.w	sl, #0
 8003606:	4d1d      	ldr	r5, [pc, #116]	; (800367c <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x8c>)
 8003608:	4c1d      	ldr	r4, [pc, #116]	; (8003680 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x90>)
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	4f1d      	ldr	r7, [pc, #116]	; (8003684 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x94>)
 800360e:	4358      	muls	r0, r3
 8003610:	1823      	adds	r3, r4, r0
 8003612:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003614:	3014      	adds	r0, #20
 8003616:	4372      	muls	r2, r6
 8003618:	2300      	movs	r3, #0
 800361a:	4420      	add	r0, r4
 800361c:	f7ff ff2e 	bl	800347c <FsBaseFile::seekSet(unsigned long long)>
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x98>)
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x9c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003690 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0xa0>
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	45c2      	cmp	sl, r8
 8003630:	d01e      	beq.n	8003670 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x80>
 8003632:	2668      	movs	r6, #104	; 0x68
 8003634:	6828      	ldr	r0, [r5, #0]
 8003636:	4639      	mov	r1, r7
 8003638:	4370      	muls	r0, r6
 800363a:	1823      	adds	r3, r4, r0
 800363c:	3014      	adds	r0, #20
 800363e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003640:	4420      	add	r0, r4
 8003642:	f7ff feff 	bl	8003444 <FsBaseFile::read(void*, unsigned int)>
 8003646:	f04f 0b00 	mov.w	fp, #0
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	fb06 4303 	mla	r3, r6, r3, r4
 8003650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003652:	455b      	cmp	r3, fp
 8003654:	d909      	bls.n	800366a <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x7a>
 8003656:	f899 3000 	ldrb.w	r3, [r9]
 800365a:	b94b      	cbnz	r3, 8003670 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x80>
 800365c:	f817 000b 	ldrb.w	r0, [r7, fp]
 8003660:	f7ff ff7a 	bl	8003558 <SCSI_BUS_IfromT(unsigned char)>
 8003664:	f10b 0b01 	add.w	fp, fp, #1
 8003668:	e7ef      	b.n	800364a <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x5a>
 800366a:	f10a 0a01 	add.w	sl, sl, #1
 800366e:	e7de      	b.n	800362e <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)+0x3e>
 8003670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003674:	20000cc4 	.word	0x20000cc4
 8003678:	0800a48c 	.word	0x0800a48c
 800367c:	20001a40 	.word	0x20001a40
 8003680:	20001700 	.word	0x20001700
 8003684:	2000103b 	.word	0x2000103b
 8003688:	08009df8 	.word	0x08009df8
 800368c:	000b0008 	.word	0x000b0008
 8003690:	200016f8 	.word	0x200016f8

08003694 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)>:
 8003694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003698:	4607      	mov	r7, r0
 800369a:	460d      	mov	r5, r1
 800369c:	4821      	ldr	r0, [pc, #132]	; (8003724 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x90>)
 800369e:	4922      	ldr	r1, [pc, #136]	; (8003728 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x94>)
 80036a0:	f7fd f820 	bl	80006e4 <Print::println(char const*)>
 80036a4:	2068      	movs	r0, #104	; 0x68
 80036a6:	4e21      	ldr	r6, [pc, #132]	; (800372c <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x98>)
 80036a8:	4c21      	ldr	r4, [pc, #132]	; (8003730 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x9c>)
 80036aa:	6833      	ldr	r3, [r6, #0]
 80036ac:	f04f 0900 	mov.w	r9, #0
 80036b0:	4358      	muls	r0, r3
 80036b2:	1823      	adds	r3, r4, r0
 80036b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036b6:	3014      	adds	r0, #20
 80036b8:	437a      	muls	r2, r7
 80036ba:	2300      	movs	r3, #0
 80036bc:	4420      	add	r0, r4
 80036be:	f7ff fedd 	bl	800347c <FsBaseFile::seekSet(unsigned long long)>
 80036c2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0xa0>)
 80036c8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800373c <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0xa8>
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4f1a      	ldr	r7, [pc, #104]	; (8003738 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0xa4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
 80036d4:	45a9      	cmp	r9, r5
 80036d6:	d01c      	beq.n	8003712 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x7e>
 80036d8:	f04f 0a00 	mov.w	sl, #0
 80036dc:	f04f 0b68 	mov.w	fp, #104	; 0x68
 80036e0:	6830      	ldr	r0, [r6, #0]
 80036e2:	fb0b f000 	mul.w	r0, fp, r0
 80036e6:	1823      	adds	r3, r4, r0
 80036e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036ea:	4552      	cmp	r2, sl
 80036ec:	d909      	bls.n	8003702 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x6e>
 80036ee:	f898 3000 	ldrb.w	r3, [r8]
 80036f2:	b9ab      	cbnz	r3, 8003720 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x8c>
 80036f4:	f7ff fefc 	bl	80034f0 <SCSI_BUS_ItoT()>
 80036f8:	f807 000a 	strb.w	r0, [r7, sl]
 80036fc:	f10a 0a01 	add.w	sl, sl, #1
 8003700:	e7ee      	b.n	80036e0 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x4c>
 8003702:	3014      	adds	r0, #20
 8003704:	4639      	mov	r1, r7
 8003706:	4420      	add	r0, r4
 8003708:	f7ff fedb 	bl	80034c2 <FsBaseFile::write(void const*, unsigned int)>
 800370c:	f109 0901 	add.w	r9, r9, #1
 8003710:	e7e0      	b.n	80036d4 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)+0x40>
 8003712:	2368      	movs	r3, #104	; 0x68
 8003714:	6830      	ldr	r0, [r6, #0]
 8003716:	fb03 4000 	mla	r0, r3, r0, r4
 800371a:	3014      	adds	r0, #20
 800371c:	f7ff fec2 	bl	80034a4 <FsBaseFile::sync()>
 8003720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003724:	20000cc4 	.word	0x20000cc4
 8003728:	0800a4b3 	.word	0x0800a4b3
 800372c:	20001a40 	.word	0x20001a40
 8003730:	20001700 	.word	0x20001700
 8003734:	08009df8 	.word	0x08009df8
 8003738:	2000103b 	.word	0x2000103b
 800373c:	200016f8 	.word	0x200016f8

08003740 <SCSI_PROT_MSGIN_phase(unsigned char)>:
 8003740:	b510      	push	{r4, lr}
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <SCSI_PROT_MSGIN_phase(unsigned char)+0x24>)
 8003744:	4604      	mov	r4, r0
 8003746:	4808      	ldr	r0, [pc, #32]	; (8003768 <SCSI_PROT_MSGIN_phase(unsigned char)+0x28>)
 8003748:	f7fc ffcc 	bl	80006e4 <Print::println(char const*)>
 800374c:	f04f 120b 	mov.w	r2, #720907	; 0xb000b
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <SCSI_PROT_MSGIN_phase(unsigned char)+0x2c>)
 8003752:	4620      	mov	r0, r4
 8003754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	f7ff befb 	b.w	8003558 <SCSI_BUS_IfromT(unsigned char)>
 8003762:	bf00      	nop
 8003764:	0800a49d 	.word	0x0800a49d
 8003768:	20000cc4 	.word	0x20000cc4
 800376c:	08009df8 	.word	0x08009df8

08003770 <SCSI_PROT_MSGOUT_phase()>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4909      	ldr	r1, [pc, #36]	; (8003798 <SCSI_PROT_MSGOUT_phase()+0x28>)
 8003774:	4809      	ldr	r0, [pc, #36]	; (800379c <SCSI_PROT_MSGOUT_phase()+0x2c>)
 8003776:	f7fc ffb5 	bl	80006e4 <Print::println(char const*)>
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <SCSI_PROT_MSGOUT_phase()+0x30>)
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <SCSI_PROT_MSGOUT_phase()+0x34>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4d09      	ldr	r5, [pc, #36]	; (80037a8 <SCSI_PROT_MSGOUT_phase()+0x38>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	782c      	ldrb	r4, [r5, #0]
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	f7ff feb2 	bl	80034f0 <SCSI_BUS_ItoT()>
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <SCSI_PROT_MSGOUT_phase()+0x3c>)
 800378e:	5518      	strb	r0, [r3, r4]
 8003790:	3401      	adds	r4, #1
 8003792:	702c      	strb	r4, [r5, #0]
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	bf00      	nop
 8003798:	0800a4c5 	.word	0x0800a4c5
 800379c:	20000cc4 	.word	0x20000cc4
 80037a0:	08009df8 	.word	0x08009df8
 80037a4:	000b0003 	.word	0x000b0003
 80037a8:	20001b44 	.word	0x20001b44
 80037ac:	20001a44 	.word	0x20001a44

080037b0 <SCSI_BUS_attention()>:
 80037b0:	2100      	movs	r1, #0
 80037b2:	b570      	push	{r4, r5, r6, lr}
 80037b4:	4c24      	ldr	r4, [pc, #144]	; (8003848 <SCSI_BUS_attention()+0x98>)
 80037b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ba:	4824      	ldr	r0, [pc, #144]	; (800384c <SCSI_BUS_attention()+0x9c>)
 80037bc:	7021      	strb	r1, [r4, #0]
 80037be:	2601      	movs	r6, #1
 80037c0:	f004 ff1a 	bl	80085f8 <memset>
 80037c4:	4d22      	ldr	r5, [pc, #136]	; (8003850 <SCSI_BUS_attention()+0xa0>)
 80037c6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	f895 316c 	ldrb.w	r3, [r5, #364]	; 0x16c
 80037d2:	fa06 f303 	lsl.w	r3, r6, r3
 80037d6:	4213      	tst	r3, r2
 80037d8:	d010      	beq.n	80037fc <SCSI_BUS_attention()+0x4c>
 80037da:	2100      	movs	r1, #0
 80037dc:	7824      	ldrb	r4, [r4, #0]
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <SCSI_BUS_attention()+0x9c>)
 80037e0:	4d1c      	ldr	r5, [pc, #112]	; (8003854 <SCSI_BUS_attention()+0xa4>)
 80037e2:	428c      	cmp	r4, r1
 80037e4:	dd16      	ble.n	8003814 <SCSI_BUS_attention()+0x64>
 80037e6:	5cc8      	ldrb	r0, [r1, r3]
 80037e8:	1f02      	subs	r2, r0, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	2a1f      	cmp	r2, #31
 80037ee:	d808      	bhi.n	8003802 <SCSI_BUS_attention()+0x52>
 80037f0:	fa25 f202 	lsr.w	r2, r5, r2
 80037f4:	07d2      	lsls	r2, r2, #31
 80037f6:	d525      	bpl.n	8003844 <SCSI_BUS_attention()+0x94>
 80037f8:	2001      	movs	r0, #1
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f7ff ffb8 	bl	8003770 <SCSI_PROT_MSGOUT_phase()>
 8003800:	e7e1      	b.n	80037c6 <SCSI_BUS_attention()+0x16>
 8003802:	2801      	cmp	r0, #1
 8003804:	d11e      	bne.n	8003844 <SCSI_BUS_attention()+0x94>
 8003806:	440b      	add	r3, r1
 8003808:	789c      	ldrb	r4, [r3, #2]
 800380a:	2c01      	cmp	r4, #1
 800380c:	d004      	beq.n	8003818 <SCSI_BUS_attention()+0x68>
 800380e:	2007      	movs	r0, #7
 8003810:	f7ff ff96 	bl	8003740 <SCSI_PROT_MSGIN_phase(unsigned char)>
 8003814:	2000      	movs	r0, #0
 8003816:	e7f0      	b.n	80037fa <SCSI_BUS_attention()+0x4a>
 8003818:	4620      	mov	r0, r4
 800381a:	78de      	ldrb	r6, [r3, #3]
 800381c:	791d      	ldrb	r5, [r3, #4]
 800381e:	f7ff ff8f 	bl	8003740 <SCSI_PROT_MSGIN_phase(unsigned char)>
 8003822:	2003      	movs	r0, #3
 8003824:	f7ff ff8c 	bl	8003740 <SCSI_PROT_MSGIN_phase(unsigned char)>
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ff89 	bl	8003740 <SCSI_PROT_MSGIN_phase(unsigned char)>
 800382e:	2e32      	cmp	r6, #50	; 0x32
 8003830:	4630      	mov	r0, r6
 8003832:	bfa8      	it	ge
 8003834:	2032      	movge	r0, #50	; 0x32
 8003836:	f7ff ff83 	bl	8003740 <SCSI_PROT_MSGIN_phase(unsigned char)>
 800383a:	2d10      	cmp	r5, #16
 800383c:	4628      	mov	r0, r5
 800383e:	bfa8      	it	ge
 8003840:	2010      	movge	r0, #16
 8003842:	e7e5      	b.n	8003810 <SCSI_BUS_attention()+0x60>
 8003844:	3101      	adds	r1, #1
 8003846:	e7cc      	b.n	80037e2 <SCSI_BUS_attention()+0x32>
 8003848:	20001b44 	.word	0x20001b44
 800384c:	20001a44 	.word	0x20001a44
 8003850:	08009938 	.word	0x08009938
 8003854:	8000012d 	.word	0x8000012d

08003858 <SCSI_CMD_RequestSense(unsigned char*)>:
 8003858:	b510      	push	{r4, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	4604      	mov	r4, r0
 800385e:	2212      	movs	r2, #18
 8003860:	2100      	movs	r1, #0
 8003862:	a801      	add	r0, sp, #4
 8003864:	f004 fec8 	bl	80085f8 <memset>
 8003868:	2370      	movs	r3, #112	; 0x70
 800386a:	f88d 3004 	strb.w	r3, [sp, #4]
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <SCSI_CMD_RequestSense(unsigned char*)+0x40>)
 8003870:	7920      	ldrb	r0, [r4, #4]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	2812      	cmp	r0, #18
 8003876:	f88d 2006 	strb.w	r2, [sp, #6]
 800387a:	f04f 020a 	mov.w	r2, #10
 800387e:	f88d 200b 	strb.w	r2, [sp, #11]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	a901      	add	r1, sp, #4
 8003888:	bf28      	it	cs
 800388a:	2012      	movcs	r0, #18
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	f7ff fe8d 	bl	80035ac <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)>
 8003892:	b006      	add	sp, #24
 8003894:	bd10      	pop	{r4, pc}
 8003896:	bf00      	nop
 8003898:	20001b46 	.word	0x20001b46

0800389c <SCSI_CMD_ReadCapacity()>:
 800389c:	b507      	push	{r0, r1, r2, lr}
 800389e:	2168      	movs	r1, #104	; 0x68
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <SCSI_CMD_ReadCapacity()+0x5c>)
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <SCSI_CMD_ReadCapacity()+0x60>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2008      	movs	r0, #8
 80038a8:	fb01 2303 	mla	r3, r1, r3, r2
 80038ac:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 80038b0:	4669      	mov	r1, sp
 80038b2:	f88d 2000 	strb.w	r2, [sp]
 80038b6:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80038ba:	f88d 2001 	strb.w	r2, [sp, #1]
 80038be:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 80038c2:	f88d 2002 	strb.w	r2, [sp, #2]
 80038c6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80038ca:	f88d 2003 	strb.w	r2, [sp, #3]
 80038ce:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 80038d2:	f88d 2004 	strb.w	r2, [sp, #4]
 80038d6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80038da:	f88d 2005 	strb.w	r2, [sp, #5]
 80038de:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80038e2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80038e6:	f88d 2006 	strb.w	r2, [sp, #6]
 80038ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80038ee:	f7ff fe5d 	bl	80035ac <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)>
 80038f2:	b003      	add	sp, #12
 80038f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80038f8:	20001a40 	.word	0x20001a40
 80038fc:	20001700 	.word	0x20001700

08003900 <SCSI_CMD_Read6(unsigned char*)>:
 8003900:	2300      	movs	r3, #0
 8003902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	7903      	ldrb	r3, [r0, #4]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	b913      	cbnz	r3, 8003912 <SCSI_CMD_Read6(unsigned char*)+0x12>
 800390c:	2301      	movs	r3, #1
 800390e:	f88d 3005 	strb.w	r3, [sp, #5]
 8003912:	7843      	ldrb	r3, [r0, #1]
 8003914:	491f      	ldr	r1, [pc, #124]	; (8003994 <SCSI_CMD_Read6(unsigned char*)+0x94>)
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	f88d 3002 	strb.w	r3, [sp, #2]
 800391e:	7883      	ldrb	r3, [r0, #2]
 8003920:	4c1d      	ldr	r4, [pc, #116]	; (8003998 <SCSI_CMD_Read6(unsigned char*)+0x98>)
 8003922:	f88d 3001 	strb.w	r3, [sp, #1]
 8003926:	78c3      	ldrb	r3, [r0, #3]
 8003928:	481c      	ldr	r0, [pc, #112]	; (800399c <SCSI_CMD_Read6(unsigned char*)+0x9c>)
 800392a:	f88d 3000 	strb.w	r3, [sp]
 800392e:	f7fc fec0 	bl	80006b2 <Print::print(char const*)>
 8003932:	9d00      	ldr	r5, [sp, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	4629      	mov	r1, r5
 8003938:	4818      	ldr	r0, [pc, #96]	; (800399c <SCSI_CMD_Read6(unsigned char*)+0x9c>)
 800393a:	f7fc ff4e 	bl	80007da <Print::print(unsigned long, int)>
 800393e:	4918      	ldr	r1, [pc, #96]	; (80039a0 <SCSI_CMD_Read6(unsigned char*)+0xa0>)
 8003940:	4816      	ldr	r0, [pc, #88]	; (800399c <SCSI_CMD_Read6(unsigned char*)+0x9c>)
 8003942:	f7fc feb6 	bl	80006b2 <Print::print(char const*)>
 8003946:	9e01      	ldr	r6, [sp, #4]
 8003948:	2210      	movs	r2, #16
 800394a:	4631      	mov	r1, r6
 800394c:	4813      	ldr	r0, [pc, #76]	; (800399c <SCSI_CMD_Read6(unsigned char*)+0x9c>)
 800394e:	f7fc ff44 	bl	80007da <Print::print(unsigned long, int)>
 8003952:	4914      	ldr	r1, [pc, #80]	; (80039a4 <SCSI_CMD_Read6(unsigned char*)+0xa4>)
 8003954:	4811      	ldr	r0, [pc, #68]	; (800399c <SCSI_CMD_Read6(unsigned char*)+0x9c>)
 8003956:	f7fc fec5 	bl	80006e4 <Print::println(char const*)>
 800395a:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 800395e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003962:	2203      	movs	r2, #3
 8003964:	f7fd fa86 	bl	8000e74 <gpio_set_mode>
 8003968:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800396c:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2301      	movs	r3, #1
 8003974:	408b      	lsls	r3, r1
 8003976:	6113      	str	r3, [r2, #16]
 8003978:	4631      	mov	r1, r6
 800397a:	4628      	mov	r0, r5
 800397c:	f7ff fe38 	bl	80035f0 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)>
 8003980:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003984:	2204      	movs	r2, #4
 8003986:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 800398a:	f7fd fa73 	bl	8000e74 <gpio_set_mode>
 800398e:	2000      	movs	r0, #0
 8003990:	b002      	add	sp, #8
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	0800a43d 	.word	0x0800a43d
 8003998:	08009938 	.word	0x08009938
 800399c:	20000cc4 	.word	0x20000cc4
 80039a0:	0800a448 	.word	0x0800a448
 80039a4:	0800aadd 	.word	0x0800aadd

080039a8 <SCSI_CMD_Read10(unsigned char*)>:
 80039a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039aa:	2500      	movs	r5, #0
 80039ac:	7883      	ldrb	r3, [r0, #2]
 80039ae:	4c24      	ldr	r4, [pc, #144]	; (8003a40 <SCSI_CMD_Read10(unsigned char*)+0x98>)
 80039b0:	f88d 3003 	strb.w	r3, [sp, #3]
 80039b4:	78c3      	ldrb	r3, [r0, #3]
 80039b6:	9501      	str	r5, [sp, #4]
 80039b8:	f88d 3002 	strb.w	r3, [sp, #2]
 80039bc:	7903      	ldrb	r3, [r0, #4]
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <SCSI_CMD_Read10(unsigned char*)+0x9c>)
 80039c0:	f88d 3001 	strb.w	r3, [sp, #1]
 80039c4:	7943      	ldrb	r3, [r0, #5]
 80039c6:	f88d 3000 	strb.w	r3, [sp]
 80039ca:	79c3      	ldrb	r3, [r0, #7]
 80039cc:	f88d 3005 	strb.w	r3, [sp, #5]
 80039d0:	7a03      	ldrb	r3, [r0, #8]
 80039d2:	4620      	mov	r0, r4
 80039d4:	f88d 3004 	strb.w	r3, [sp, #4]
 80039d8:	f7fc fe6b 	bl	80006b2 <Print::print(char const*)>
 80039dc:	9e00      	ldr	r6, [sp, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	4631      	mov	r1, r6
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7fc fef9 	bl	80007da <Print::print(unsigned long, int)>
 80039e8:	4917      	ldr	r1, [pc, #92]	; (8003a48 <SCSI_CMD_Read10(unsigned char*)+0xa0>)
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7fc fe61 	bl	80006b2 <Print::print(char const*)>
 80039f0:	9f01      	ldr	r7, [sp, #4]
 80039f2:	2210      	movs	r2, #16
 80039f4:	4639      	mov	r1, r7
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7fc feef 	bl	80007da <Print::print(unsigned long, int)>
 80039fc:	4620      	mov	r0, r4
 80039fe:	4c13      	ldr	r4, [pc, #76]	; (8003a4c <SCSI_CMD_Read10(unsigned char*)+0xa4>)
 8003a00:	4913      	ldr	r1, [pc, #76]	; (8003a50 <SCSI_CMD_Read10(unsigned char*)+0xa8>)
 8003a02:	f7fc fe6f 	bl	80006e4 <Print::println(char const*)>
 8003a06:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003a0a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003a0e:	2203      	movs	r2, #3
 8003a10:	f7fd fa30 	bl	8000e74 <gpio_set_mode>
 8003a14:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a18:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	408b      	lsls	r3, r1
 8003a22:	6113      	str	r3, [r2, #16]
 8003a24:	4639      	mov	r1, r7
 8003a26:	4630      	mov	r0, r6
 8003a28:	f7ff fde2 	bl	80035f0 <SCSI_PROT_DTIN_direct(unsigned long, unsigned long)>
 8003a2c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003a30:	2204      	movs	r2, #4
 8003a32:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003a36:	f7fd fa1d 	bl	8000e74 <gpio_set_mode>
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	b003      	add	sp, #12
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a40:	20000cc4 	.word	0x20000cc4
 8003a44:	0800a450 	.word	0x0800a450
 8003a48:	0800a448 	.word	0x0800a448
 8003a4c:	08009938 	.word	0x08009938
 8003a50:	0800aadd 	.word	0x0800aadd

08003a54 <SCSI_CMD_Write6(unsigned char*)>:
 8003a54:	2300      	movs	r3, #0
 8003a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	7903      	ldrb	r3, [r0, #4]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	b913      	cbnz	r3, 8003a66 <SCSI_CMD_Write6(unsigned char*)+0x12>
 8003a60:	2301      	movs	r3, #1
 8003a62:	f88d 3005 	strb.w	r3, [sp, #5]
 8003a66:	7843      	ldrb	r3, [r0, #1]
 8003a68:	4922      	ldr	r1, [pc, #136]	; (8003af4 <SCSI_CMD_Write6(unsigned char*)+0xa0>)
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	f88d 3002 	strb.w	r3, [sp, #2]
 8003a72:	7883      	ldrb	r3, [r0, #2]
 8003a74:	4c20      	ldr	r4, [pc, #128]	; (8003af8 <SCSI_CMD_Write6(unsigned char*)+0xa4>)
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	f88d 3001 	strb.w	r3, [sp, #1]
 8003a7e:	78c3      	ldrb	r3, [r0, #3]
 8003a80:	481e      	ldr	r0, [pc, #120]	; (8003afc <SCSI_CMD_Write6(unsigned char*)+0xa8>)
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	f88d 3000 	strb.w	r3, [sp]
 8003a8a:	f7fc fe12 	bl	80006b2 <Print::print(char const*)>
 8003a8e:	9d00      	ldr	r5, [sp, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	4629      	mov	r1, r5
 8003a94:	4819      	ldr	r0, [pc, #100]	; (8003afc <SCSI_CMD_Write6(unsigned char*)+0xa8>)
 8003a96:	f7fc fea0 	bl	80007da <Print::print(unsigned long, int)>
 8003a9a:	4919      	ldr	r1, [pc, #100]	; (8003b00 <SCSI_CMD_Write6(unsigned char*)+0xac>)
 8003a9c:	4817      	ldr	r0, [pc, #92]	; (8003afc <SCSI_CMD_Write6(unsigned char*)+0xa8>)
 8003a9e:	f7fc fe08 	bl	80006b2 <Print::print(char const*)>
 8003aa2:	9e01      	ldr	r6, [sp, #4]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4814      	ldr	r0, [pc, #80]	; (8003afc <SCSI_CMD_Write6(unsigned char*)+0xa8>)
 8003aaa:	f7fc fe96 	bl	80007da <Print::print(unsigned long, int)>
 8003aae:	4915      	ldr	r1, [pc, #84]	; (8003b04 <SCSI_CMD_Write6(unsigned char*)+0xb0>)
 8003ab0:	4812      	ldr	r0, [pc, #72]	; (8003afc <SCSI_CMD_Write6(unsigned char*)+0xa8>)
 8003ab2:	f7fc fe17 	bl	80006e4 <Print::println(char const*)>
 8003ab6:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003aba:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003abe:	2203      	movs	r2, #3
 8003ac0:	f7fd f9d8 	bl	8000e74 <gpio_set_mode>
 8003ac4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ac8:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad2:	408b      	lsls	r3, r1
 8003ad4:	6113      	str	r3, [r2, #16]
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7ff fddb 	bl	8003694 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)>
 8003ade:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003ae8:	f7fd f9c4 	bl	8000e74 <gpio_set_mode>
 8003aec:	2000      	movs	r0, #0
 8003aee:	b002      	add	sp, #8
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	bf00      	nop
 8003af4:	0800a45c 	.word	0x0800a45c
 8003af8:	08009938 	.word	0x08009938
 8003afc:	20000cc4 	.word	0x20000cc4
 8003b00:	0800a448 	.word	0x0800a448
 8003b04:	0800aadd 	.word	0x0800aadd

08003b08 <SCSI_CMD_Write10(unsigned char*)>:
 8003b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b0a:	2500      	movs	r5, #0
 8003b0c:	7883      	ldrb	r3, [r0, #2]
 8003b0e:	4c25      	ldr	r4, [pc, #148]	; (8003ba4 <SCSI_CMD_Write10(unsigned char*)+0x9c>)
 8003b10:	f88d 3003 	strb.w	r3, [sp, #3]
 8003b14:	78c3      	ldrb	r3, [r0, #3]
 8003b16:	9501      	str	r5, [sp, #4]
 8003b18:	f88d 3002 	strb.w	r3, [sp, #2]
 8003b1c:	7903      	ldrb	r3, [r0, #4]
 8003b1e:	4922      	ldr	r1, [pc, #136]	; (8003ba8 <SCSI_CMD_Write10(unsigned char*)+0xa0>)
 8003b20:	f88d 3001 	strb.w	r3, [sp, #1]
 8003b24:	7943      	ldrb	r3, [r0, #5]
 8003b26:	f88d 3000 	strb.w	r3, [sp]
 8003b2a:	79c3      	ldrb	r3, [r0, #7]
 8003b2c:	f88d 3005 	strb.w	r3, [sp, #5]
 8003b30:	7a03      	ldrb	r3, [r0, #8]
 8003b32:	4620      	mov	r0, r4
 8003b34:	f88d 3004 	strb.w	r3, [sp, #4]
 8003b38:	f7fc fdbb 	bl	80006b2 <Print::print(char const*)>
 8003b3c:	9e00      	ldr	r6, [sp, #0]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	4631      	mov	r1, r6
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fc fe49 	bl	80007da <Print::print(unsigned long, int)>
 8003b48:	4918      	ldr	r1, [pc, #96]	; (8003bac <SCSI_CMD_Write10(unsigned char*)+0xa4>)
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7fc fdb1 	bl	80006b2 <Print::print(char const*)>
 8003b50:	9f01      	ldr	r7, [sp, #4]
 8003b52:	2210      	movs	r2, #16
 8003b54:	4639      	mov	r1, r7
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fc fe3f 	bl	80007da <Print::print(unsigned long, int)>
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4c14      	ldr	r4, [pc, #80]	; (8003bb0 <SCSI_CMD_Write10(unsigned char*)+0xa8>)
 8003b60:	4914      	ldr	r1, [pc, #80]	; (8003bb4 <SCSI_CMD_Write10(unsigned char*)+0xac>)
 8003b62:	f7fc fdbf 	bl	80006e4 <Print::println(char const*)>
 8003b66:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003b6a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f7fd f980 	bl	8000e74 <gpio_set_mode>
 8003b74:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b78:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b82:	408b      	lsls	r3, r1
 8003b84:	6113      	str	r3, [r2, #16]
 8003b86:	4639      	mov	r1, r7
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f7ff fd83 	bl	8003694 <SCSI_PROT_DTOUT_direct(unsigned long, unsigned long)>
 8003b8e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003b92:	2204      	movs	r2, #4
 8003b94:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003b98:	f7fd f96c 	bl	8000e74 <gpio_set_mode>
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	b003      	add	sp, #12
 8003ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000cc4 	.word	0x20000cc4
 8003ba8:	0800a468 	.word	0x0800a468
 8003bac:	0800a448 	.word	0x0800a448
 8003bb0:	08009938 	.word	0x08009938
 8003bb4:	0800aadd 	.word	0x0800aadd

08003bb8 <SCSI_CMD_ModeSense(unsigned char*)>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	7803      	ldrb	r3, [r0, #0]
 8003bbc:	7885      	ldrb	r5, [r0, #2]
 8003bbe:	2b1a      	cmp	r3, #26
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8003bc6:	d03d      	beq.n	8003c44 <SCSI_CMD_ModeSense(unsigned char*)+0x8c>
 8003bc8:	f8b0 4007 	ldrh.w	r4, [r0, #7]
 8003bcc:	ba64      	rev16	r4, r4
 8003bce:	b2a4      	uxth	r4, r4
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <SCSI_CMD_ModeSense(unsigned char*)+0xf0>)
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f004 fd0d 	bl	80085f8 <memset>
 8003bde:	7872      	ldrb	r2, [r6, #1]
 8003be0:	4603      	mov	r3, r0
 8003be2:	0712      	lsls	r2, r2, #28
 8003be4:	d430      	bmi.n	8003c48 <SCSI_CMD_ModeSense(unsigned char*)+0x90>
 8003be6:	2208      	movs	r2, #8
 8003be8:	70c2      	strb	r2, [r0, #3]
 8003bea:	2068      	movs	r0, #104	; 0x68
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <SCSI_CMD_ModeSense(unsigned char*)+0xf4>)
 8003bee:	4930      	ldr	r1, [pc, #192]	; (8003cb0 <SCSI_CMD_ModeSense(unsigned char*)+0xf8>)
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	fb00 1202 	mla	r2, r0, r2, r1
 8003bf6:	200c      	movs	r0, #12
 8003bf8:	f892 1063 	ldrb.w	r1, [r2, #99]	; 0x63
 8003bfc:	7119      	strb	r1, [r3, #4]
 8003bfe:	f892 1062 	ldrb.w	r1, [r2, #98]	; 0x62
 8003c02:	7159      	strb	r1, [r3, #5]
 8003c04:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61
 8003c08:	7199      	strb	r1, [r3, #6]
 8003c0a:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 8003c0e:	71d9      	strb	r1, [r3, #7]
 8003c10:	f892 1067 	ldrb.w	r1, [r2, #103]	; 0x67
 8003c14:	7219      	strb	r1, [r3, #8]
 8003c16:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
 8003c1a:	7259      	strb	r1, [r3, #9]
 8003c1c:	f892 1065 	ldrb.w	r1, [r2, #101]	; 0x65
 8003c20:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8003c24:	7299      	strb	r1, [r3, #10]
 8003c26:	72da      	strb	r2, [r3, #11]
 8003c28:	2d03      	cmp	r5, #3
 8003c2a:	d00f      	beq.n	8003c4c <SCSI_CMD_ModeSense(unsigned char*)+0x94>
 8003c2c:	2d04      	cmp	r5, #4
 8003c2e:	d021      	beq.n	8003c74 <SCSI_CMD_ModeSense(unsigned char*)+0xbc>
 8003c30:	1e42      	subs	r2, r0, #1
 8003c32:	42a0      	cmp	r0, r4
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	bf28      	it	cs
 8003c38:	4620      	movcs	r0, r4
 8003c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c3e:	491a      	ldr	r1, [pc, #104]	; (8003ca8 <SCSI_CMD_ModeSense(unsigned char*)+0xf0>)
 8003c40:	f7ff bcb4 	b.w	80035ac <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)>
 8003c44:	7904      	ldrb	r4, [r0, #4]
 8003c46:	e7c3      	b.n	8003bd0 <SCSI_CMD_ModeSense(unsigned char*)+0x18>
 8003c48:	2004      	movs	r0, #4
 8003c4a:	e7ed      	b.n	8003c28 <SCSI_CMD_ModeSense(unsigned char*)+0x70>
 8003c4c:	2116      	movs	r1, #22
 8003c4e:	181a      	adds	r2, r3, r0
 8003c50:	541d      	strb	r5, [r3, r0]
 8003c52:	7051      	strb	r1, [r2, #1]
 8003c54:	213f      	movs	r1, #63	; 0x3f
 8003c56:	2668      	movs	r6, #104	; 0x68
 8003c58:	72d1      	strb	r1, [r2, #11]
 8003c5a:	4914      	ldr	r1, [pc, #80]	; (8003cac <SCSI_CMD_ModeSense(unsigned char*)+0xf4>)
 8003c5c:	4d14      	ldr	r5, [pc, #80]	; (8003cb0 <SCSI_CMD_ModeSense(unsigned char*)+0xf8>)
 8003c5e:	6809      	ldr	r1, [r1, #0]
 8003c60:	fb06 5101 	mla	r1, r6, r1, r5
 8003c64:	f891 5065 	ldrb.w	r5, [r1, #101]	; 0x65
 8003c68:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 8003c6c:	7315      	strb	r5, [r2, #12]
 8003c6e:	7351      	strb	r1, [r2, #13]
 8003c70:	3018      	adds	r0, #24
 8003c72:	e7dd      	b.n	8003c30 <SCSI_CMD_ModeSense(unsigned char*)+0x78>
 8003c74:	2668      	movs	r6, #104	; 0x68
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <SCSI_CMD_ModeSense(unsigned char*)+0xf4>)
 8003c78:	490d      	ldr	r1, [pc, #52]	; (8003cb0 <SCSI_CMD_ModeSense(unsigned char*)+0xf8>)
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	541d      	strb	r5, [r3, r0]
 8003c7e:	fb06 1202 	mla	r2, r6, r2, r1
 8003c82:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003c84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003c88:	2516      	movs	r5, #22
 8003c8a:	fbb1 f1f2 	udiv	r1, r1, r2
 8003c8e:	181a      	adds	r2, r3, r0
 8003c90:	7055      	strb	r5, [r2, #1]
 8003c92:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003c96:	7095      	strb	r5, [r2, #2]
 8003c98:	7111      	strb	r1, [r2, #4]
 8003c9a:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8003c9e:	2141      	movs	r1, #65	; 0x41
 8003ca0:	70d5      	strb	r5, [r2, #3]
 8003ca2:	7151      	strb	r1, [r2, #5]
 8003ca4:	e7e4      	b.n	8003c70 <SCSI_CMD_ModeSense(unsigned char*)+0xb8>
 8003ca6:	bf00      	nop
 8003ca8:	2000103b 	.word	0x2000103b
 8003cac:	20001a40 	.word	0x20001a40
 8003cb0:	20001700 	.word	0x20001700

08003cb4 <do_SCSI_CMD(unsigned char*)>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	7803      	ldrb	r3, [r0, #0]
 8003cb8:	4604      	mov	r4, r0
 8003cba:	2b1a      	cmp	r3, #26
 8003cbc:	d055      	beq.n	8003d6a <do_SCSI_CMD(unsigned char*)+0xb6>
 8003cbe:	d826      	bhi.n	8003d0e <do_SCSI_CMD(unsigned char*)+0x5a>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d042      	beq.n	8003d4a <do_SCSI_CMD(unsigned char*)+0x96>
 8003cc4:	d813      	bhi.n	8003cee <do_SCSI_CMD(unsigned char*)+0x3a>
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d036      	beq.n	8003d38 <do_SCSI_CMD(unsigned char*)+0x84>
 8003cca:	2b2f      	cmp	r3, #47	; 0x2f
 8003ccc:	d869      	bhi.n	8003da2 <do_SCSI_CMD(unsigned char*)+0xee>
 8003cce:	217b      	movs	r1, #123	; 0x7b
 8003cd0:	483d      	ldr	r0, [pc, #244]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003cd2:	f7fc fceb 	bl	80006ac <Print::print(char)>
 8003cd6:	7822      	ldrb	r2, [r4, #0]
 8003cd8:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <do_SCSI_CMD(unsigned char*)+0x118>)
 8003cda:	483b      	ldr	r0, [pc, #236]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ce0:	f7fc fce7 	bl	80006b2 <Print::print(char const*)>
 8003ce4:	217d      	movs	r1, #125	; 0x7d
 8003ce6:	4838      	ldr	r0, [pc, #224]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003ce8:	f7fc fcf2 	bl	80006d0 <Print::println(char)>
 8003cec:	e02b      	b.n	8003d46 <do_SCSI_CMD(unsigned char*)+0x92>
 8003cee:	2b0a      	cmp	r3, #10
 8003cf0:	d033      	beq.n	8003d5a <do_SCSI_CMD(unsigned char*)+0xa6>
 8003cf2:	2b12      	cmp	r3, #18
 8003cf4:	d1e9      	bne.n	8003cca <do_SCSI_CMD(unsigned char*)+0x16>
 8003cf6:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <do_SCSI_CMD(unsigned char*)+0x11c>)
 8003cf8:	4833      	ldr	r0, [pc, #204]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003cfa:	f7fc fcf3 	bl	80006e4 <Print::println(char const*)>
 8003cfe:	7920      	ldrb	r0, [r4, #4]
 8003d00:	4934      	ldr	r1, [pc, #208]	; (8003dd4 <do_SCSI_CMD(unsigned char*)+0x120>)
 8003d02:	2824      	cmp	r0, #36	; 0x24
 8003d04:	bf28      	it	cs
 8003d06:	2024      	movcs	r0, #36	; 0x24
 8003d08:	f7ff fc50 	bl	80035ac <SCSI_PROT_DTIN_phase(unsigned long, unsigned char*)>
 8003d0c:	e01b      	b.n	8003d46 <do_SCSI_CMD(unsigned char*)+0x92>
 8003d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d10:	d03a      	beq.n	8003d88 <do_SCSI_CMD(unsigned char*)+0xd4>
 8003d12:	d80b      	bhi.n	8003d2c <do_SCSI_CMD(unsigned char*)+0x78>
 8003d14:	2b25      	cmp	r3, #37	; 0x25
 8003d16:	d030      	beq.n	8003d7a <do_SCSI_CMD(unsigned char*)+0xc6>
 8003d18:	2b28      	cmp	r3, #40	; 0x28
 8003d1a:	d1d6      	bne.n	8003cca <do_SCSI_CMD(unsigned char*)+0x16>
 8003d1c:	492e      	ldr	r1, [pc, #184]	; (8003dd8 <do_SCSI_CMD(unsigned char*)+0x124>)
 8003d1e:	482a      	ldr	r0, [pc, #168]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d20:	f7fc fce0 	bl	80006e4 <Print::println(char const*)>
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff fe3f 	bl	80039a8 <SCSI_CMD_Read10(unsigned char*)>
 8003d2a:	e015      	b.n	8003d58 <do_SCSI_CMD(unsigned char*)+0xa4>
 8003d2c:	2b55      	cmp	r3, #85	; 0x55
 8003d2e:	d033      	beq.n	8003d98 <do_SCSI_CMD(unsigned char*)+0xe4>
 8003d30:	2b5a      	cmp	r3, #90	; 0x5a
 8003d32:	d1ca      	bne.n	8003cca <do_SCSI_CMD(unsigned char*)+0x16>
 8003d34:	4929      	ldr	r1, [pc, #164]	; (8003ddc <do_SCSI_CMD(unsigned char*)+0x128>)
 8003d36:	e019      	b.n	8003d6c <do_SCSI_CMD(unsigned char*)+0xb8>
 8003d38:	4929      	ldr	r1, [pc, #164]	; (8003de0 <do_SCSI_CMD(unsigned char*)+0x12c>)
 8003d3a:	4823      	ldr	r0, [pc, #140]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d3c:	f7fc fcd2 	bl	80006e4 <Print::println(char const*)>
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff fd89 	bl	8003858 <SCSI_CMD_RequestSense(unsigned char*)>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e006      	b.n	8003d58 <do_SCSI_CMD(unsigned char*)+0xa4>
 8003d4a:	4926      	ldr	r1, [pc, #152]	; (8003de4 <do_SCSI_CMD(unsigned char*)+0x130>)
 8003d4c:	481e      	ldr	r0, [pc, #120]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d4e:	f7fc fcc9 	bl	80006e4 <Print::println(char const*)>
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fdd4 	bl	8003900 <SCSI_CMD_Read6(unsigned char*)>
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	4923      	ldr	r1, [pc, #140]	; (8003de8 <do_SCSI_CMD(unsigned char*)+0x134>)
 8003d5c:	481a      	ldr	r0, [pc, #104]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d5e:	f7fc fcc1 	bl	80006e4 <Print::println(char const*)>
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7ff fe76 	bl	8003a54 <SCSI_CMD_Write6(unsigned char*)>
 8003d68:	e7f6      	b.n	8003d58 <do_SCSI_CMD(unsigned char*)+0xa4>
 8003d6a:	4920      	ldr	r1, [pc, #128]	; (8003dec <do_SCSI_CMD(unsigned char*)+0x138>)
 8003d6c:	4816      	ldr	r0, [pc, #88]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d6e:	f7fc fcb9 	bl	80006e4 <Print::println(char const*)>
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff ff20 	bl	8003bb8 <SCSI_CMD_ModeSense(unsigned char*)>
 8003d78:	e7e5      	b.n	8003d46 <do_SCSI_CMD(unsigned char*)+0x92>
 8003d7a:	491d      	ldr	r1, [pc, #116]	; (8003df0 <do_SCSI_CMD(unsigned char*)+0x13c>)
 8003d7c:	4812      	ldr	r0, [pc, #72]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d7e:	f7fc fcb1 	bl	80006e4 <Print::println(char const*)>
 8003d82:	f7ff fd8b 	bl	800389c <SCSI_CMD_ReadCapacity()>
 8003d86:	e7de      	b.n	8003d46 <do_SCSI_CMD(unsigned char*)+0x92>
 8003d88:	491a      	ldr	r1, [pc, #104]	; (8003df4 <do_SCSI_CMD(unsigned char*)+0x140>)
 8003d8a:	480f      	ldr	r0, [pc, #60]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d8c:	f7fc fcaa 	bl	80006e4 <Print::println(char const*)>
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7ff feb9 	bl	8003b08 <SCSI_CMD_Write10(unsigned char*)>
 8003d96:	e7df      	b.n	8003d58 <do_SCSI_CMD(unsigned char*)+0xa4>
 8003d98:	4917      	ldr	r1, [pc, #92]	; (8003df8 <do_SCSI_CMD(unsigned char*)+0x144>)
 8003d9a:	480b      	ldr	r0, [pc, #44]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003d9c:	f7fc fca2 	bl	80006e4 <Print::println(char const*)>
 8003da0:	e7d1      	b.n	8003d46 <do_SCSI_CMD(unsigned char*)+0x92>
 8003da2:	4916      	ldr	r1, [pc, #88]	; (8003dfc <do_SCSI_CMD(unsigned char*)+0x148>)
 8003da4:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003da6:	f7fc fc84 	bl	80006b2 <Print::print(char const*)>
 8003daa:	2210      	movs	r2, #16
 8003dac:	7821      	ldrb	r1, [r4, #0]
 8003dae:	4806      	ldr	r0, [pc, #24]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003db0:	f7fc fd09 	bl	80007c6 <Print::print(unsigned char, int)>
 8003db4:	4912      	ldr	r1, [pc, #72]	; (8003e00 <do_SCSI_CMD(unsigned char*)+0x14c>)
 8003db6:	4804      	ldr	r0, [pc, #16]	; (8003dc8 <do_SCSI_CMD(unsigned char*)+0x114>)
 8003db8:	f7fc fc94 	bl	80006e4 <Print::println(char const*)>
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <do_SCSI_CMD(unsigned char*)+0x150>)
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e7c8      	b.n	8003d58 <do_SCSI_CMD(unsigned char*)+0xa4>
 8003dc6:	bf00      	nop
 8003dc8:	20000cc4 	.word	0x20000cc4
 8003dcc:	0800a880 	.word	0x0800a880
 8003dd0:	0800a3ab 	.word	0x0800a3ab
 8003dd4:	0800a838 	.word	0x0800a838
 8003dd8:	0800a3d9 	.word	0x0800a3d9
 8003ddc:	0800a40b 	.word	0x0800a40b
 8003de0:	0800a378 	.word	0x0800a378
 8003de4:	0800a388 	.word	0x0800a388
 8003de8:	0800a392 	.word	0x0800a392
 8003dec:	0800a3b5 	.word	0x0800a3b5
 8003df0:	0800a3c5 	.word	0x0800a3c5
 8003df4:	0800a3e4 	.word	0x0800a3e4
 8003df8:	0800a3f9 	.word	0x0800a3f9
 8003dfc:	0800a41c 	.word	0x0800a41c
 8003e00:	0800a42b 	.word	0x0800a42b
 8003e04:	20001b46 	.word	0x20001b46

08003e08 <RIP(unsigned long)>:
 8003e08:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8003e0c:	2501      	movs	r5, #1
 8003e0e:	b508      	push	{r3, lr}
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <RIP(unsigned long)+0x108>)
 8003e12:	4c40      	ldr	r4, [pc, #256]	; (8003f14 <RIP(unsigned long)+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4606      	mov	r6, r0
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8003e1e:	611a      	str	r2, [r3, #16]
 8003e20:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
 8003e24:	6802      	ldr	r2, [r0, #0]
 8003e26:	fa05 f301 	lsl.w	r3, r5, r1
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	6113      	str	r3, [r2, #16]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	f7fd f820 	bl	8000e74 <gpio_set_mode>
 8003e34:	2204      	movs	r2, #4
 8003e36:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8003e3a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8003e3e:	f7fd f819 	bl	8000e74 <gpio_set_mode>
 8003e42:	2204      	movs	r2, #4
 8003e44:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8003e48:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8003e4c:	f7fd f812 	bl	8000e74 <gpio_set_mode>
 8003e50:	2204      	movs	r2, #4
 8003e52:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
 8003e56:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003e5a:	f7fd f80b 	bl	8000e74 <gpio_set_mode>
 8003e5e:	2204      	movs	r2, #4
 8003e60:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 8003e64:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8003e68:	f7fd f804 	bl	8000e74 <gpio_set_mode>
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
 8003e72:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8003e76:	f7fc fffd 	bl	8000e74 <gpio_set_mode>
 8003e7a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 8003e86:	fa05 f303 	lsl.w	r3, r5, r3
 8003e8a:	4213      	tst	r3, r2
 8003e8c:	d13f      	bne.n	8003f0e <RIP(unsigned long)+0x106>
 8003e8e:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003e92:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003e96:	2203      	movs	r2, #3
 8003e98:	f7fc ffec 	bl	8000e74 <gpio_set_mode>
 8003e9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8003ea8:	fa05 f303 	lsl.w	r3, r5, r3
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	6113      	str	r3, [r2, #16]
 8003eb0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f894 320c 	ldrb.w	r3, [r4, #524]	; 0x20c
 8003eba:	fa05 f303 	lsl.w	r3, r5, r3
 8003ebe:	6113      	str	r3, [r2, #16]
 8003ec0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003eca:	fa05 f303 	lsl.w	r3, r5, r3
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	6113      	str	r3, [r2, #16]
 8003ed2:	f7ff f9f3 	bl	80032bc <delay(unsigned long)>
 8003ed6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003eda:	2204      	movs	r2, #4
 8003edc:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003ee0:	f7fc ffc8 	bl	8000e74 <gpio_set_mode>
 8003ee4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8003ee8:	4630      	mov	r0, r6
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f894 320c 	ldrb.w	r3, [r4, #524]	; 0x20c
 8003ef0:	fa05 f303 	lsl.w	r3, r5, r3
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	6113      	str	r3, [r2, #16]
 8003ef8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003f02:	fa05 f303 	lsl.w	r3, r5, r3
 8003f06:	6113      	str	r3, [r2, #16]
 8003f08:	f7ff f9d8 	bl	80032bc <delay(unsigned long)>
 8003f0c:	e7b5      	b.n	8003e7a <RIP(unsigned long)+0x72>
 8003f0e:	e7fe      	b.n	8003f0e <RIP(unsigned long)+0x106>
 8003f10:	08009df8 	.word	0x08009df8
 8003f14:	08009938 	.word	0x08009938

08003f18 <setup()>:
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	2501      	movs	r5, #1
 8003f1e:	4a9c      	ldr	r2, [pc, #624]	; (8004190 <setup()+0x278>)
 8003f20:	4c9c      	ldr	r4, [pc, #624]	; (8004194 <setup()+0x27c>)
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 8003f28:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	f894 112c 	ldrb.w	r1, [r4, #300]	; 0x12c
 8003f36:	6803      	ldr	r3, [r0, #0]
 8003f38:	fa05 f201 	lsl.w	r2, r5, r1
 8003f3c:	b0a1      	sub	sp, #132	; 0x84
 8003f3e:	611a      	str	r2, [r3, #16]
 8003f40:	2209      	movs	r2, #9
 8003f42:	f7fc ff97 	bl	8000e74 <gpio_set_mode>
 8003f46:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003f4a:	4893      	ldr	r0, [pc, #588]	; (8004198 <setup()+0x280>)
 8003f4c:	f7fc fb10 	bl	8000570 <HardwareSerial::begin(unsigned long)>
 8003f50:	4892      	ldr	r0, [pc, #584]	; (800419c <setup()+0x284>)
 8003f52:	f7fc fb41 	bl	80005d8 <HardwareTimer::pause()>
 8003f56:	2148      	movs	r1, #72	; 0x48
 8003f58:	4890      	ldr	r0, [pc, #576]	; (800419c <setup()+0x284>)
 8003f5a:	f7fc fb4d 	bl	80005f8 <HardwareTimer::setPrescaleFactor(unsigned long)>
 8003f5e:	f240 114d 	movw	r1, #333	; 0x14d
 8003f62:	488e      	ldr	r0, [pc, #568]	; (800419c <setup()+0x284>)
 8003f64:	f7fc fb4e 	bl	8000604 <HardwareTimer::setOverflow(unsigned short)>
 8003f68:	22a6      	movs	r2, #166	; 0xa6
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	488b      	ldr	r0, [pc, #556]	; (800419c <setup()+0x284>)
 8003f6e:	f7fc fb51 	bl	8000614 <HardwareTimer::setCompare(int, unsigned short)>
 8003f72:	462a      	mov	r2, r5
 8003f74:	2104      	movs	r1, #4
 8003f76:	4889      	ldr	r0, [pc, #548]	; (800419c <setup()+0x284>)
 8003f78:	f7fc fb48 	bl	800060c <HardwareTimer::setMode(int, timer_mode)>
 8003f7c:	4887      	ldr	r0, [pc, #540]	; (800419c <setup()+0x284>)
 8003f7e:	f7fc fb2b 	bl	80005d8 <HardwareTimer::pause()>
 8003f82:	220b      	movs	r2, #11
 8003f84:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
 8003f88:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8003f8c:	f7fc ff72 	bl	8000e74 <gpio_set_mode>
 8003f90:	2207      	movs	r2, #7
 8003f92:	f894 120c 	ldrb.w	r1, [r4, #524]	; 0x20c
 8003f96:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003f9a:	f7fc ff6b 	bl	8000e74 <gpio_set_mode>
 8003f9e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8003fa2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	f894 320c 	ldrb.w	r3, [r4, #524]	; 0x20c
 8003fac:	4f7b      	ldr	r7, [pc, #492]	; (800419c <setup()+0x284>)
 8003fae:	fa05 f303 	lsl.w	r3, r5, r3
 8003fb2:	6113      	str	r3, [r2, #16]
 8003fb4:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 8003fb8:	2204      	movs	r2, #4
 8003fba:	f7fc ff5b 	bl	8000e74 <gpio_set_mode>
 8003fbe:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 8003fc2:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	fa05 f201 	lsl.w	r2, r5, r1
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	2209      	movs	r2, #9
 8003fd0:	f7fc ff50 	bl	8000e74 <gpio_set_mode>
 8003fd4:	4972      	ldr	r1, [pc, #456]	; (80041a0 <setup()+0x288>)
 8003fd6:	4870      	ldr	r0, [pc, #448]	; (8004198 <setup()+0x280>)
 8003fd8:	f7fc fb84 	bl	80006e4 <Print::println(char const*)>
 8003fdc:	4971      	ldr	r1, [pc, #452]	; (80041a4 <setup()+0x28c>)
 8003fde:	486e      	ldr	r0, [pc, #440]	; (8004198 <setup()+0x280>)
 8003fe0:	f7fc fb67 	bl	80006b2 <Print::print(char const*)>
 8003fe4:	220a      	movs	r2, #10
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	486b      	ldr	r0, [pc, #428]	; (8004198 <setup()+0x280>)
 8003fea:	f7fc fbd4 	bl	8000796 <Print::print(int, int)>
 8003fee:	496e      	ldr	r1, [pc, #440]	; (80041a8 <setup()+0x290>)
 8003ff0:	4869      	ldr	r0, [pc, #420]	; (8004198 <setup()+0x280>)
 8003ff2:	f7fc fb5e 	bl	80006b2 <Print::print(char const*)>
 8003ff6:	220a      	movs	r2, #10
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4867      	ldr	r0, [pc, #412]	; (8004198 <setup()+0x280>)
 8003ffc:	f7fc fbcb 	bl	8000796 <Print::print(int, int)>
 8004000:	496a      	ldr	r1, [pc, #424]	; (80041ac <setup()+0x294>)
 8004002:	4865      	ldr	r0, [pc, #404]	; (8004198 <setup()+0x280>)
 8004004:	f7fc fb55 	bl	80006b2 <Print::print(char const*)>
 8004008:	220a      	movs	r2, #10
 800400a:	2104      	movs	r1, #4
 800400c:	4862      	ldr	r0, [pc, #392]	; (8004198 <setup()+0x280>)
 800400e:	f7fc fbcb 	bl	80007a8 <Print::println(int, int)>
 8004012:	f7ff f967 	bl	80032e4 <SCSI_BUS_get_byte()>
 8004016:	2064      	movs	r0, #100	; 0x64
 8004018:	f7ff f950 	bl	80032bc <delay(unsigned long)>
 800401c:	485f      	ldr	r0, [pc, #380]	; (800419c <setup()+0x284>)
 800401e:	f7fc fae3 	bl	80005e8 <HardwareTimer::resume()>
 8004022:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8004026:	4b62      	ldr	r3, [pc, #392]	; (80041b0 <setup()+0x298>)
 8004028:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80041c4 <setup()+0x2ac>
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8004198 <setup()+0x280>
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
 800403e:	6802      	ldr	r2, [r0, #0]
 8004040:	fa05 f301 	lsl.w	r3, r5, r1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	6113      	str	r3, [r2, #16]
 8004048:	2204      	movs	r2, #4
 800404a:	f7fc ff13 	bl	8000e74 <gpio_set_mode>
 800404e:	2204      	movs	r2, #4
 8004050:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8004054:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8004058:	f7fc ff0c 	bl	8000e74 <gpio_set_mode>
 800405c:	2204      	movs	r2, #4
 800405e:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8004062:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8004066:	f7fc ff05 	bl	8000e74 <gpio_set_mode>
 800406a:	2204      	movs	r2, #4
 800406c:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
 8004070:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004074:	f7fc fefe 	bl	8000e74 <gpio_set_mode>
 8004078:	2204      	movs	r2, #4
 800407a:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 800407e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8004082:	f7fc fef7 	bl	8000e74 <gpio_set_mode>
 8004086:	2203      	movs	r2, #3
 8004088:	7b21      	ldrb	r1, [r4, #12]
 800408a:	6820      	ldr	r0, [r4, #0]
 800408c:	f7fc fef2 	bl	8000e74 <gpio_set_mode>
 8004090:	2203      	movs	r2, #3
 8004092:	7f21      	ldrb	r1, [r4, #28]
 8004094:	6920      	ldr	r0, [r4, #16]
 8004096:	f7fc feed 	bl	8000e74 <gpio_set_mode>
 800409a:	2203      	movs	r2, #3
 800409c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80040a0:	6a20      	ldr	r0, [r4, #32]
 80040a2:	f7fc fee7 	bl	8000e74 <gpio_set_mode>
 80040a6:	2203      	movs	r2, #3
 80040a8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80040ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040ae:	f7fc fee1 	bl	8000e74 <gpio_set_mode>
 80040b2:	2203      	movs	r2, #3
 80040b4:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 80040b8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80040bc:	f7fc feda 	bl	8000e74 <gpio_set_mode>
 80040c0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80040c4:	493b      	ldr	r1, [pc, #236]	; (80041b4 <setup()+0x29c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80040cc:	fa05 f303 	lsl.w	r3, r5, r3
 80040d0:	6113      	str	r3, [r2, #16]
 80040d2:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 80040d6:	462a      	mov	r2, r5
 80040d8:	f7fc fbaa 	bl	8000830 <attachInterrupt(unsigned char, void (*)(), ExtIntTriggerMode)>
 80040dc:	2203      	movs	r2, #3
 80040de:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 80040e2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80040e6:	f7fc fec5 	bl	8000e74 <gpio_set_mode>
 80040ea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80040ee:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4095      	lsls	r5, r2
 80040f6:	042d      	lsls	r5, r5, #16
 80040f8:	611d      	str	r5, [r3, #16]
 80040fa:	2501      	movs	r5, #1
 80040fc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689e      	ldr	r6, [r3, #8]
 8004104:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 8004108:	fa05 f303 	lsl.w	r3, r5, r3
 800410c:	401e      	ands	r6, r3
 800410e:	d011      	beq.n	8004134 <setup()+0x21c>
 8004110:	4638      	mov	r0, r7
 8004112:	f7fc fa69 	bl	80005e8 <HardwareTimer::resume()>
 8004116:	4649      	mov	r1, r9
 8004118:	4640      	mov	r0, r8
 800411a:	f7fc fae3 	bl	80006e4 <Print::println(char const*)>
 800411e:	2032      	movs	r0, #50	; 0x32
 8004120:	f7ff f8cc 	bl	80032bc <delay(unsigned long)>
 8004124:	4638      	mov	r0, r7
 8004126:	f7fc fa57 	bl	80005d8 <HardwareTimer::pause()>
 800412a:	f640 3086 	movw	r0, #2950	; 0xb86
 800412e:	f7ff f8c5 	bl	80032bc <delay(unsigned long)>
 8004132:	e7e2      	b.n	80040fa <setup()+0x1e2>
 8004134:	2064      	movs	r0, #100	; 0x64
 8004136:	f7ff f8c1 	bl	80032bc <delay(unsigned long)>
 800413a:	4818      	ldr	r0, [pc, #96]	; (800419c <setup()+0x284>)
 800413c:	f7fc fa54 	bl	80005e8 <HardwareTimer::resume()>
 8004140:	2304      	movs	r3, #4
 8004142:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <setup()+0x2a0>)
 8004148:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800414c:	ab03      	add	r3, sp, #12
 800414e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004152:	ab09      	add	r3, sp, #36	; 0x24
 8004154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004158:	ae06      	add	r6, sp, #24
 800415a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800415e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004160:	4e16      	ldr	r6, [pc, #88]	; (80041bc <setup()+0x2a4>)
 8004162:	f506 6891 	add.w	r8, r6, #1160	; 0x488
 8004166:	4640      	mov	r0, r8
 8004168:	f003 f8e2 	bl	8007330 <SdSpiCard::begin(SdSpiConfig)>
 800416c:	f896 74b7 	ldrb.w	r7, [r6, #1207]	; 0x4b7
 8004170:	f8c6 8484 	str.w	r8, [r6, #1156]	; 0x484
 8004174:	b927      	cbnz	r7, 8004180 <setup()+0x268>
 8004176:	4641      	mov	r1, r8
 8004178:	4630      	mov	r0, r6
 800417a:	f002 ff8f 	bl	800709c <FsVolume::begin(SdSpiCard*)>
 800417e:	bb18      	cbnz	r0, 80041c8 <setup()+0x2b0>
 8004180:	490f      	ldr	r1, [pc, #60]	; (80041c0 <setup()+0x2a8>)
 8004182:	4805      	ldr	r0, [pc, #20]	; (8004198 <setup()+0x280>)
 8004184:	f7fc faae 	bl	80006e4 <Print::println(char const*)>
 8004188:	20c8      	movs	r0, #200	; 0xc8
 800418a:	f7ff fe3d 	bl	8003e08 <RIP(unsigned long)>
 800418e:	bf00      	nop
 8004190:	40010004 	.word	0x40010004
 8004194:	08009938 	.word	0x08009938
 8004198:	20000cc4 	.word	0x20000cc4
 800419c:	20000d18 	.word	0x20000d18
 80041a0:	0800a577 	.word	0x0800a577
 80041a4:	0800a5b9 	.word	0x0800a5b9
 80041a8:	0800a640 	.word	0x0800a640
 80041ac:	0800a5c8 	.word	0x0800a5c8
 80041b0:	08009df8 	.word	0x08009df8
 80041b4:	080033e1 	.word	0x080033e1
 80041b8:	02faf080 	.word	0x02faf080
 80041bc:	2000123c 	.word	0x2000123c
 80041c0:	0800a5f6 	.word	0x0800a5f6
 80041c4:	0800a5d6 	.word	0x0800a5d6
 80041c8:	f894 220c 	ldrb.w	r2, [r4, #524]	; 0x20c
 80041cc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80041d0:	4095      	lsls	r5, r2
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	042d      	lsls	r5, r5, #16
 80041d6:	611d      	str	r5, [r3, #16]
 80041d8:	4a84      	ldr	r2, [pc, #528]	; (80043ec <setup()+0x4d4>)
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <setup()+0x4d8>)
 80041dc:	4690      	mov	r8, r2
 80041de:	4699      	mov	r9, r3
 80041e0:	4d84      	ldr	r5, [pc, #528]	; (80043f4 <setup()+0x4dc>)
 80041e2:	f8df b258 	ldr.w	fp, [pc, #600]	; 800443c <setup()+0x524>
 80041e6:	4e84      	ldr	r6, [pc, #528]	; (80043f8 <setup()+0x4e0>)
 80041e8:	7017      	strb	r7, [r2, #0]
 80041ea:	601f      	str	r7, [r3, #0]
 80041ec:	4b83      	ldr	r3, [pc, #524]	; (80043fc <setup()+0x4e4>)
 80041ee:	4659      	mov	r1, fp
 80041f0:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 80041f4:	4630      	mov	r0, r6
 80041f6:	f7fc fa5c 	bl	80006b2 <Print::print(char const*)>
 80041fa:	4651      	mov	r1, sl
 80041fc:	4630      	mov	r0, r6
 80041fe:	f7fc fa58 	bl	80006b2 <Print::print(char const*)>
 8004202:	497f      	ldr	r1, [pc, #508]	; (8004400 <setup()+0x4e8>)
 8004204:	4630      	mov	r0, r6
 8004206:	f7fc fa6d 	bl	80006e4 <Print::println(char const*)>
 800420a:	4652      	mov	r2, sl
 800420c:	2302      	movs	r3, #2
 800420e:	497d      	ldr	r1, [pc, #500]	; (8004404 <setup()+0x4ec>)
 8004210:	a80c      	add	r0, sp, #48	; 0x30
 8004212:	f002 ffa1 	bl	8007158 <FsVolume::open(char const*, int)>
 8004216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004218:	a910      	add	r1, sp, #64	; 0x40
 800421a:	f845 3c0c 	str.w	r3, [r5, #-12]
 800421e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004220:	4628      	mov	r0, r5
 8004222:	f845 3c08 	str.w	r3, [r5, #-8]
 8004226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004228:	f845 3c04 	str.w	r3, [r5, #-4]
 800422c:	f002 fec5 	bl	8006fba <FsBaseFile::operator=(FsBaseFile const&)>
 8004230:	4b75      	ldr	r3, [pc, #468]	; (8004408 <setup()+0x4f0>)
 8004232:	a810      	add	r0, sp, #64	; 0x40
 8004234:	930c      	str	r3, [sp, #48]	; 0x30
 8004236:	f002 feab 	bl	8006f90 <FsBaseFile::close()>
 800423a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800423c:	b913      	cbnz	r3, 8004244 <setup()+0x32c>
 800423e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d07d      	beq.n	8004340 <setup()+0x428>
 8004244:	f8d9 3000 	ldr.w	r3, [r9]
 8004248:	f898 2000 	ldrb.w	r2, [r8]
 800424c:	3301      	adds	r3, #1
 800424e:	f8c9 3000 	str.w	r3, [r9]
 8004252:	2301      	movs	r3, #1
 8004254:	40bb      	lsls	r3, r7
 8004256:	4313      	orrs	r3, r2
 8004258:	496c      	ldr	r1, [pc, #432]	; (800440c <setup()+0x4f4>)
 800425a:	f845 ac14 	str.w	sl, [r5, #-20]
 800425e:	4630      	mov	r0, r6
 8004260:	f888 3000 	strb.w	r3, [r8]
 8004264:	f7fc fa25 	bl	80006b2 <Print::print(char const*)>
 8004268:	220a      	movs	r2, #10
 800426a:	4639      	mov	r1, r7
 800426c:	4630      	mov	r0, r6
 800426e:	f7fc fab4 	bl	80007da <Print::print(unsigned long, int)>
 8004272:	4967      	ldr	r1, [pc, #412]	; (8004410 <setup()+0x4f8>)
 8004274:	4630      	mov	r0, r6
 8004276:	f7fc fa35 	bl	80006e4 <Print::println(char const*)>
 800427a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d079      	beq.n	8004374 <setup()+0x45c>
 8004280:	2200      	movs	r2, #0
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f04f 0a0a 	mov.w	sl, #10
 8004288:	e9c5 3211 	strd	r3, r2, [r5, #68]	; 0x44
 800428c:	4961      	ldr	r1, [pc, #388]	; (8004414 <setup()+0x4fc>)
 800428e:	4630      	mov	r0, r6
 8004290:	f7fc fa0f 	bl	80006b2 <Print::print(char const*)>
 8004294:	f855 1c14 	ldr.w	r1, [r5, #-20]
 8004298:	4630      	mov	r0, r6
 800429a:	f7fc fa0a 	bl	80006b2 <Print::print(char const*)>
 800429e:	4958      	ldr	r1, [pc, #352]	; (8004400 <setup()+0x4e8>)
 80042a0:	4630      	mov	r0, r6
 80042a2:	f7fc fa1f 	bl	80006e4 <Print::println(char const*)>
 80042a6:	495c      	ldr	r1, [pc, #368]	; (8004418 <setup()+0x500>)
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7fc fa02 	bl	80006b2 <Print::print(char const*)>
 80042ae:	f8cd a000 	str.w	sl, [sp]
 80042b2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7fc fa80 	bl	80007bc <Print::print(unsigned long long, int)>
 80042bc:	4957      	ldr	r1, [pc, #348]	; (800441c <setup()+0x504>)
 80042be:	4630      	mov	r0, r6
 80042c0:	f7fc f9f7 	bl	80006b2 <Print::print(char const*)>
 80042c4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80042c8:	0d12      	lsrs	r2, r2, #20
 80042ca:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
 80042ce:	f8cd a000 	str.w	sl, [sp]
 80042d2:	0d1b      	lsrs	r3, r3, #20
 80042d4:	4630      	mov	r0, r6
 80042d6:	f7fc fa71 	bl	80007bc <Print::print(unsigned long long, int)>
 80042da:	4951      	ldr	r1, [pc, #324]	; (8004420 <setup()+0x508>)
 80042dc:	4630      	mov	r0, r6
 80042de:	f7fc f9e8 	bl	80006b2 <Print::print(char const*)>
 80042e2:	e9d5 0111 	ldrd	r0, r1, [r5, #68]	; 0x44
 80042e6:	f898 3000 	ldrb.w	r3, [r8]
 80042ea:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80042ee:	bf14      	ite	ne
 80042f0:	f44f 7380 	movne.w	r3, #256	; 0x100
 80042f4:	f44f 7300 	moveq.w	r3, #512	; 0x200
 80042f8:	652b      	str	r3, [r5, #80]	; 0x50
 80042fa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80042fc:	2300      	movs	r3, #0
 80042fe:	f003 fa49 	bl	8007794 <__aeabi_uldivmod>
 8004302:	220a      	movs	r2, #10
 8004304:	4601      	mov	r1, r0
 8004306:	64e8      	str	r0, [r5, #76]	; 0x4c
 8004308:	4630      	mov	r0, r6
 800430a:	f7fc fa66 	bl	80007da <Print::print(unsigned long, int)>
 800430e:	4945      	ldr	r1, [pc, #276]	; (8004424 <setup()+0x50c>)
 8004310:	4630      	mov	r0, r6
 8004312:	f7fc f9ce 	bl	80006b2 <Print::print(char const*)>
 8004316:	220a      	movs	r2, #10
 8004318:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800431a:	4630      	mov	r0, r6
 800431c:	f7fc fa5d 	bl	80007da <Print::print(unsigned long, int)>
 8004320:	4941      	ldr	r1, [pc, #260]	; (8004428 <setup()+0x510>)
 8004322:	4630      	mov	r0, r6
 8004324:	f7fc f9de 	bl	80006e4 <Print::println(char const*)>
 8004328:	e9d5 0111 	ldrd	r0, r1, [r5, #68]	; 0x44
 800432c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800432e:	2300      	movs	r3, #0
 8004330:	f003 fa30 	bl	8007794 <__aeabi_uldivmod>
 8004334:	4313      	orrs	r3, r2
 8004336:	d003      	beq.n	8004340 <setup()+0x428>
 8004338:	493c      	ldr	r1, [pc, #240]	; (800442c <setup()+0x514>)
 800433a:	4630      	mov	r0, r6
 800433c:	f7fc f9d2 	bl	80006e4 <Print::println(char const*)>
 8004340:	3701      	adds	r7, #1
 8004342:	2f06      	cmp	r7, #6
 8004344:	f105 0568 	add.w	r5, r5, #104	; 0x68
 8004348:	f47f af50 	bne.w	80041ec <setup()+0x2d4>
 800434c:	4938      	ldr	r1, [pc, #224]	; (8004430 <setup()+0x518>)
 800434e:	482a      	ldr	r0, [pc, #168]	; (80043f8 <setup()+0x4e0>)
 8004350:	f7fc f9af 	bl	80006b2 <Print::print(char const*)>
 8004354:	220a      	movs	r2, #10
 8004356:	f8d9 1000 	ldr.w	r1, [r9]
 800435a:	4827      	ldr	r0, [pc, #156]	; (80043f8 <setup()+0x4e0>)
 800435c:	f7fc fa47 	bl	80007ee <Print::println(unsigned long, int)>
 8004360:	f898 3000 	ldrb.w	r3, [r8]
 8004364:	b96b      	cbnz	r3, 8004382 <setup()+0x46a>
 8004366:	4933      	ldr	r1, [pc, #204]	; (8004434 <setup()+0x51c>)
 8004368:	4823      	ldr	r0, [pc, #140]	; (80043f8 <setup()+0x4e0>)
 800436a:	f7fc f9bb 	bl	80006e4 <Print::println(char const*)>
 800436e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004372:	e70a      	b.n	800418a <setup()+0x272>
 8004374:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004376:	b112      	cbz	r2, 800437e <setup()+0x466>
 8004378:	e9d2 3204 	ldrd	r3, r2, [r2, #16]
 800437c:	e782      	b.n	8004284 <setup()+0x36c>
 800437e:	4613      	mov	r3, r2
 8004380:	e780      	b.n	8004284 <setup()+0x36c>
 8004382:	482d      	ldr	r0, [pc, #180]	; (8004438 <setup()+0x520>)
 8004384:	f7fc f928 	bl	80005d8 <HardwareTimer::pause()>
 8004388:	2148      	movs	r1, #72	; 0x48
 800438a:	482b      	ldr	r0, [pc, #172]	; (8004438 <setup()+0x520>)
 800438c:	f7fc f934 	bl	80005f8 <HardwareTimer::setPrescaleFactor(unsigned long)>
 8004390:	21fa      	movs	r1, #250	; 0xfa
 8004392:	4829      	ldr	r0, [pc, #164]	; (8004438 <setup()+0x520>)
 8004394:	f7fc f936 	bl	8000604 <HardwareTimer::setOverflow(unsigned short)>
 8004398:	227d      	movs	r2, #125	; 0x7d
 800439a:	2104      	movs	r1, #4
 800439c:	4826      	ldr	r0, [pc, #152]	; (8004438 <setup()+0x520>)
 800439e:	f7fc f939 	bl	8000614 <HardwareTimer::setCompare(int, unsigned short)>
 80043a2:	2201      	movs	r2, #1
 80043a4:	2104      	movs	r1, #4
 80043a6:	4824      	ldr	r0, [pc, #144]	; (8004438 <setup()+0x520>)
 80043a8:	f7fc f930 	bl	800060c <HardwareTimer::setMode(int, timer_mode)>
 80043ac:	4822      	ldr	r0, [pc, #136]	; (8004438 <setup()+0x520>)
 80043ae:	f7fc f913 	bl	80005d8 <HardwareTimer::pause()>
 80043b2:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
 80043b6:	220b      	movs	r2, #11
 80043b8:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 80043bc:	f7fc fd5a 	bl	8000e74 <gpio_set_mode>
 80043c0:	2064      	movs	r0, #100	; 0x64
 80043c2:	f7fe ff7b 	bl	80032bc <delay(unsigned long)>
 80043c6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80043ca:	f894 120c 	ldrb.w	r1, [r4, #524]	; 0x20c
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2301      	movs	r3, #1
 80043d2:	408b      	lsls	r3, r1
 80043d4:	6113      	str	r3, [r2, #16]
 80043d6:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 80043da:	2204      	movs	r2, #4
 80043dc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80043e0:	f7fc fd48 	bl	8000e74 <gpio_set_mode>
 80043e4:	b021      	add	sp, #132	; 0x84
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	20001b45 	.word	0x20001b45
 80043f0:	20001a40 	.word	0x20001a40
 80043f4:	20001714 	.word	0x20001714
 80043f8:	20000cc4 	.word	0x20000cc4
 80043fc:	0800a860 	.word	0x0800a860
 8004400:	0800a63f 	.word	0x0800a63f
 8004404:	2000123c 	.word	0x2000123c
 8004408:	0800a338 	.word	0x0800a338
 800440c:	0800a642 	.word	0x0800a642
 8004410:	0800a656 	.word	0x0800a656
 8004414:	0800a663 	.word	0x0800a663
 8004418:	0800a682 	.word	0x0800a682
 800441c:	0800a689 	.word	0x0800a689
 8004420:	0800a691 	.word	0x0800a691
 8004424:	0800a698 	.word	0x0800a698
 8004428:	0800a6a0 	.word	0x0800a6a0
 800442c:	0800a6a7 	.word	0x0800a6a7
 8004430:	0800a6d8 	.word	0x0800a6d8
 8004434:	0800a705 	.word	0x0800a705
 8004438:	20000d18 	.word	0x20000d18
 800443c:	0800a61e 	.word	0x0800a61e

08004440 <_GLOBAL__sub_I_SD>:
 8004440:	4819      	ldr	r0, [pc, #100]	; (80044a8 <_GLOBAL__sub_I_SD+0x68>)
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <_GLOBAL__sub_I_SD+0x6c>)
 8004444:	b510      	push	{r4, lr}
 8004446:	f8c0 348c 	str.w	r3, [r0, #1164]	; 0x48c
 800444a:	2301      	movs	r3, #1
 800444c:	2400      	movs	r4, #0
 800444e:	f880 3498 	strb.w	r3, [r0, #1176]	; 0x498
 8004452:	2328      	movs	r3, #40	; 0x28
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <_GLOBAL__sub_I_SD+0x70>)
 8004456:	f880 34b7 	strb.w	r3, [r0, #1207]	; 0x4b7
 800445a:	4916      	ldr	r1, [pc, #88]	; (80044b4 <_GLOBAL__sub_I_SD+0x74>)
 800445c:	f8c0 4478 	str.w	r4, [r0, #1144]	; 0x478
 8004460:	f8c0 447c 	str.w	r4, [r0, #1148]	; 0x47c
 8004464:	f8c0 44a8 	str.w	r4, [r0, #1192]	; 0x4a8
 8004468:	f8c0 44ac 	str.w	r4, [r0, #1196]	; 0x4ac
 800446c:	f880 4499 	strb.w	r4, [r0, #1177]	; 0x499
 8004470:	f8c0 4490 	str.w	r4, [r0, #1168]	; 0x490
 8004474:	f880 44ba 	strb.w	r4, [r0, #1210]	; 0x4ba
 8004478:	f003 fd2e 	bl	8007ed8 <__aeabi_atexit>
 800447c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004480:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <_GLOBAL__sub_I_SD+0x78>)
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <_GLOBAL__sub_I_SD+0x7c>)
 8004484:	f503 7250 	add.w	r2, r3, #832	; 0x340
 8004488:	6059      	str	r1, [r3, #4]
 800448a:	e9c3 4002 	strd	r4, r0, [r3, #8]
 800448e:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
 8004492:	3368      	adds	r3, #104	; 0x68
 8004494:	4293      	cmp	r3, r2
 8004496:	d1f7      	bne.n	8004488 <_GLOBAL__sub_I_SD+0x48>
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <_GLOBAL__sub_I_SD+0x70>)
 800449e:	4908      	ldr	r1, [pc, #32]	; (80044c0 <_GLOBAL__sub_I_SD+0x80>)
 80044a0:	2000      	movs	r0, #0
 80044a2:	f003 bd19 	b.w	8007ed8 <__aeabi_atexit>
 80044a6:	bf00      	nop
 80044a8:	2000123c 	.word	0x2000123c
 80044ac:	003d0900 	.word	0x003d0900
 80044b0:	20000008 	.word	0x20000008
 80044b4:	08003365 	.word	0x08003365
 80044b8:	20001700 	.word	0x20001700
 80044bc:	0800a35c 	.word	0x0800a35c
 80044c0:	08003421 	.word	0x08003421

080044c4 <test_func()>:
 80044c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4fa7      	ldr	r7, [pc, #668]	; (8004768 <test_func()+0x2a4>)
 80044ca:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80047d8 <test_func()+0x314>
 80044ce:	48a7      	ldr	r0, [pc, #668]	; (800476c <test_func()+0x2a8>)
 80044d0:	f7fb ffd9 	bl	8000486 <HardwareSerial::available()>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f000 824f 	beq.w	8004978 <test_func()+0x4b4>
 80044da:	48a5      	ldr	r0, [pc, #660]	; (8004770 <test_func()+0x2ac>)
 80044dc:	f7fc f884 	bl	80005e8 <HardwareTimer::resume()>
 80044e0:	49a4      	ldr	r1, [pc, #656]	; (8004774 <test_func()+0x2b0>)
 80044e2:	48a2      	ldr	r0, [pc, #648]	; (800476c <test_func()+0x2a8>)
 80044e4:	f7fc f8e5 	bl	80006b2 <Print::print(char const*)>
 80044e8:	48a0      	ldr	r0, [pc, #640]	; (800476c <test_func()+0x2a8>)
 80044ea:	f7fb ffb0 	bl	800044e <HardwareSerial::read()>
 80044ee:	b2c4      	uxtb	r4, r0
 80044f0:	4621      	mov	r1, r4
 80044f2:	489e      	ldr	r0, [pc, #632]	; (800476c <test_func()+0x2a8>)
 80044f4:	f7fc f8da 	bl	80006ac <Print::print(char)>
 80044f8:	499f      	ldr	r1, [pc, #636]	; (8004778 <test_func()+0x2b4>)
 80044fa:	489c      	ldr	r0, [pc, #624]	; (800476c <test_func()+0x2a8>)
 80044fc:	f7fc f8d9 	bl	80006b2 <Print::print(char const*)>
 8004500:	2c4e      	cmp	r4, #78	; 0x4e
 8004502:	f000 8119 	beq.w	8004738 <test_func()+0x274>
 8004506:	dc4c      	bgt.n	80045a2 <test_func()+0xde>
 8004508:	2c38      	cmp	r4, #56	; 0x38
 800450a:	f000 8223 	beq.w	8004954 <test_func()+0x490>
 800450e:	dc1a      	bgt.n	8004546 <test_func()+0x82>
 8004510:	2c2d      	cmp	r4, #45	; 0x2d
 8004512:	f000 8217 	beq.w	8004944 <test_func()+0x480>
 8004516:	dc09      	bgt.n	800452c <test_func()+0x68>
 8004518:	2c2b      	cmp	r4, #43	; 0x2b
 800451a:	f000 8206 	beq.w	800492a <test_func()+0x466>
 800451e:	201e      	movs	r0, #30
 8004520:	f7fe fecc 	bl	80032bc <delay(unsigned long)>
 8004524:	4892      	ldr	r0, [pc, #584]	; (8004770 <test_func()+0x2ac>)
 8004526:	f7fc f857 	bl	80005d8 <HardwareTimer::pause()>
 800452a:	e7d0      	b.n	80044ce <test_func()+0xa>
 800452c:	2c30      	cmp	r4, #48	; 0x30
 800452e:	dbf6      	blt.n	800451e <test_func()+0x5a>
 8004530:	2001      	movs	r0, #1
 8004532:	4b92      	ldr	r3, [pc, #584]	; (800477c <test_func()+0x2b8>)
 8004534:	3c30      	subs	r4, #48	; 0x30
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b91      	ldr	r3, [pc, #580]	; (8004780 <test_func()+0x2bc>)
 800453a:	40a0      	lsls	r0, r4
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	b2c0      	uxtb	r0, r0
 8004540:	f7fe fee4 	bl	800330c <SCSI_BUS_put_byte(unsigned char)>
 8004544:	e7eb      	b.n	800451e <test_func()+0x5a>
 8004546:	2c43      	cmp	r4, #67	; 0x43
 8004548:	f000 80dd 	beq.w	8004706 <test_func()+0x242>
 800454c:	dc18      	bgt.n	8004580 <test_func()+0xbc>
 800454e:	2c39      	cmp	r4, #57	; 0x39
 8004550:	f000 8206 	beq.w	8004960 <test_func()+0x49c>
 8004554:	2c3d      	cmp	r4, #61	; 0x3d
 8004556:	d1e2      	bne.n	800451e <test_func()+0x5a>
 8004558:	4b8a      	ldr	r3, [pc, #552]	; (8004784 <test_func()+0x2c0>)
 800455a:	4c88      	ldr	r4, [pc, #544]	; (800477c <test_func()+0x2b8>)
 800455c:	498a      	ldr	r1, [pc, #552]	; (8004788 <test_func()+0x2c4>)
 800455e:	4883      	ldr	r0, [pc, #524]	; (800476c <test_func()+0x2a8>)
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	f7fc f8a6 	bl	80006b2 <Print::print(char const*)>
 8004566:	220a      	movs	r2, #10
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	4880      	ldr	r0, [pc, #512]	; (800476c <test_func()+0x2a8>)
 800456c:	f7fc f935 	bl	80007da <Print::print(unsigned long, int)>
 8004570:	4986      	ldr	r1, [pc, #536]	; (800478c <test_func()+0x2c8>)
 8004572:	487e      	ldr	r0, [pc, #504]	; (800476c <test_func()+0x2a8>)
 8004574:	f7fc f89d 	bl	80006b2 <Print::print(char const*)>
 8004578:	4b81      	ldr	r3, [pc, #516]	; (8004780 <test_func()+0x2bc>)
 800457a:	220a      	movs	r2, #10
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	e1d0      	b.n	8004922 <test_func()+0x45e>
 8004580:	2c49      	cmp	r4, #73	; 0x49
 8004582:	f000 80ce 	beq.w	8004722 <test_func()+0x25e>
 8004586:	2c4d      	cmp	r4, #77	; 0x4d
 8004588:	d1c9      	bne.n	800451e <test_func()+0x5a>
 800458a:	4b7c      	ldr	r3, [pc, #496]	; (800477c <test_func()+0x2b8>)
 800458c:	4980      	ldr	r1, [pc, #512]	; (8004790 <test_func()+0x2cc>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <test_func()+0x2bc>)
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f04f 120b 	mov.w	r2, #720907	; 0xb000b
 8004598:	4b7e      	ldr	r3, [pc, #504]	; (8004794 <test_func()+0x2d0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
 80045a0:	e0bb      	b.n	800471a <test_func()+0x256>
 80045a2:	2c62      	cmp	r4, #98	; 0x62
 80045a4:	f000 8134 	beq.w	8004810 <test_func()+0x34c>
 80045a8:	dc34      	bgt.n	8004614 <test_func()+0x150>
 80045aa:	2c53      	cmp	r4, #83	; 0x53
 80045ac:	f000 811a 	beq.w	80047e4 <test_func()+0x320>
 80045b0:	dc0f      	bgt.n	80045d2 <test_func()+0x10e>
 80045b2:	2c4f      	cmp	r4, #79	; 0x4f
 80045b4:	f000 80cc 	beq.w	8004750 <test_func()+0x28c>
 80045b8:	2c52      	cmp	r4, #82	; 0x52
 80045ba:	d1b0      	bne.n	800451e <test_func()+0x5a>
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <test_func()+0x2b8>)
 80045be:	4976      	ldr	r1, [pc, #472]	; (8004798 <test_func()+0x2d4>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <test_func()+0x2bc>)
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	2204      	movs	r2, #4
 80045c8:	4b72      	ldr	r3, [pc, #456]	; (8004794 <test_func()+0x2d0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]
 80045d0:	e0a3      	b.n	800471a <test_func()+0x256>
 80045d2:	2c55      	cmp	r4, #85	; 0x55
 80045d4:	f000 8111 	beq.w	80047fa <test_func()+0x336>
 80045d8:	2c61      	cmp	r4, #97	; 0x61
 80045da:	d1a0      	bne.n	800451e <test_func()+0x5a>
 80045dc:	4b67      	ldr	r3, [pc, #412]	; (800477c <test_func()+0x2b8>)
 80045de:	496f      	ldr	r1, [pc, #444]	; (800479c <test_func()+0x2d8>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b67      	ldr	r3, [pc, #412]	; (8004780 <test_func()+0x2bc>)
 80045e4:	4861      	ldr	r0, [pc, #388]	; (800476c <test_func()+0x2a8>)
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f7fc f863 	bl	80006b2 <Print::print(char const*)>
 80045ec:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <test_func()+0x2dc>)
 80045ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80045f2:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	2301      	movs	r3, #1
 80045fc:	408b      	lsls	r3, r1
 80045fe:	4213      	tst	r3, r2
 8004600:	bf18      	it	ne
 8004602:	2101      	movne	r1, #1
 8004604:	f04f 020a 	mov.w	r2, #10
 8004608:	bf08      	it	eq
 800460a:	2100      	moveq	r1, #0
 800460c:	4857      	ldr	r0, [pc, #348]	; (800476c <test_func()+0x2a8>)
 800460e:	f7fc f8cb 	bl	80007a8 <Print::println(int, int)>
 8004612:	e784      	b.n	800451e <test_func()+0x5a>
 8004614:	2c74      	cmp	r4, #116	; 0x74
 8004616:	f000 811b 	beq.w	8004850 <test_func()+0x38c>
 800461a:	dc15      	bgt.n	8004648 <test_func()+0x184>
 800461c:	2c72      	cmp	r4, #114	; 0x72
 800461e:	f000 8107 	beq.w	8004830 <test_func()+0x36c>
 8004622:	2c73      	cmp	r4, #115	; 0x73
 8004624:	f47f af7b 	bne.w	800451e <test_func()+0x5a>
 8004628:	4b54      	ldr	r3, [pc, #336]	; (800477c <test_func()+0x2b8>)
 800462a:	495e      	ldr	r1, [pc, #376]	; (80047a4 <test_func()+0x2e0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <test_func()+0x2bc>)
 8004630:	484e      	ldr	r0, [pc, #312]	; (800476c <test_func()+0x2a8>)
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f7fc f83d 	bl	80006b2 <Print::print(char const*)>
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <test_func()+0x2dc>)
 800463a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800463e:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	6892      	ldr	r2, [r2, #8]
 8004646:	e7d8      	b.n	80045fa <test_func()+0x136>
 8004648:	2c78      	cmp	r4, #120	; 0x78
 800464a:	f000 8111 	beq.w	8004870 <test_func()+0x3ac>
 800464e:	2c7a      	cmp	r4, #122	; 0x7a
 8004650:	f47f af65 	bne.w	800451e <test_func()+0x5a>
 8004654:	4954      	ldr	r1, [pc, #336]	; (80047a8 <test_func()+0x2e4>)
 8004656:	4845      	ldr	r0, [pc, #276]	; (800476c <test_func()+0x2a8>)
 8004658:	f7fc f82b 	bl	80006b2 <Print::print(char const*)>
 800465c:	2407      	movs	r4, #7
 800465e:	4d43      	ldr	r5, [pc, #268]	; (800476c <test_func()+0x2a8>)
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	220a      	movs	r2, #10
 8004664:	4121      	asrs	r1, r4
 8004666:	f001 0101 	and.w	r1, r1, #1
 800466a:	4628      	mov	r0, r5
 800466c:	f7fc f893 	bl	8000796 <Print::print(int, int)>
 8004670:	f114 34ff 	adds.w	r4, r4, #4294967295
 8004674:	d2f4      	bcs.n	8004660 <test_func()+0x19c>
 8004676:	494d      	ldr	r1, [pc, #308]	; (80047ac <test_func()+0x2e8>)
 8004678:	483c      	ldr	r0, [pc, #240]	; (800476c <test_func()+0x2a8>)
 800467a:	f7fc f833 	bl	80006e4 <Print::println(char const*)>
 800467e:	2500      	movs	r5, #0
 8004680:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80047dc <test_func()+0x318>
 8004684:	4c39      	ldr	r4, [pc, #228]	; (800476c <test_func()+0x2a8>)
 8004686:	f8df a158 	ldr.w	sl, [pc, #344]	; 80047e0 <test_func()+0x31c>
 800468a:	783b      	ldrb	r3, [r7, #0]
 800468c:	412b      	asrs	r3, r5
 800468e:	07db      	lsls	r3, r3, #31
 8004690:	d535      	bpl.n	80046fe <test_func()+0x23a>
 8004692:	2668      	movs	r6, #104	; 0x68
 8004694:	fb06 fb05 	mul.w	fp, r6, r5
 8004698:	4649      	mov	r1, r9
 800469a:	4620      	mov	r0, r4
 800469c:	f7fc f809 	bl	80006b2 <Print::print(char const*)>
 80046a0:	4e43      	ldr	r6, [pc, #268]	; (80047b0 <test_func()+0x2ec>)
 80046a2:	220a      	movs	r2, #10
 80046a4:	4629      	mov	r1, r5
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7fc f897 	bl	80007da <Print::print(unsigned long, int)>
 80046ac:	4651      	mov	r1, sl
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7fb ffff 	bl	80006b2 <Print::print(char const*)>
 80046b4:	f85b 1006 	ldr.w	r1, [fp, r6]
 80046b8:	445e      	add	r6, fp
 80046ba:	f04f 0b0a 	mov.w	fp, #10
 80046be:	4620      	mov	r0, r4
 80046c0:	f7fb fff7 	bl	80006b2 <Print::print(char const*)>
 80046c4:	493b      	ldr	r1, [pc, #236]	; (80047b4 <test_func()+0x2f0>)
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7fb fff3 	bl	80006b2 <Print::print(char const*)>
 80046cc:	f8cd b000 	str.w	fp, [sp]
 80046d0:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7fc f871 	bl	80007bc <Print::print(unsigned long long, int)>
 80046da:	4937      	ldr	r1, [pc, #220]	; (80047b8 <test_func()+0x2f4>)
 80046dc:	4620      	mov	r0, r4
 80046de:	f7fb ffe8 	bl	80006b2 <Print::print(char const*)>
 80046e2:	465a      	mov	r2, fp
 80046e4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80046e6:	4620      	mov	r0, r4
 80046e8:	f7fc f877 	bl	80007da <Print::print(unsigned long, int)>
 80046ec:	4933      	ldr	r1, [pc, #204]	; (80047bc <test_func()+0x2f8>)
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7fb ffdf 	bl	80006b2 <Print::print(char const*)>
 80046f4:	465a      	mov	r2, fp
 80046f6:	6e71      	ldr	r1, [r6, #100]	; 0x64
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7fc f878 	bl	80007ee <Print::println(unsigned long, int)>
 80046fe:	3501      	adds	r5, #1
 8004700:	2d08      	cmp	r5, #8
 8004702:	d1c2      	bne.n	800468a <test_func()+0x1c6>
 8004704:	e70b      	b.n	800451e <test_func()+0x5a>
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <test_func()+0x2b8>)
 8004708:	492d      	ldr	r1, [pc, #180]	; (80047c0 <test_func()+0x2fc>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <test_func()+0x2bc>)
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	4b20      	ldr	r3, [pc, #128]	; (8004794 <test_func()+0x2d0>)
 8004712:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <test_func()+0x300>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	4814      	ldr	r0, [pc, #80]	; (800476c <test_func()+0x2a8>)
 800471c:	f7fb ffe2 	bl	80006e4 <Print::println(char const*)>
 8004720:	e6fd      	b.n	800451e <test_func()+0x5a>
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <test_func()+0x2b8>)
 8004724:	4928      	ldr	r1, [pc, #160]	; (80047c8 <test_func()+0x304>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <test_func()+0x2bc>)
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	4b19      	ldr	r3, [pc, #100]	; (8004794 <test_func()+0x2d0>)
 800472e:	4a27      	ldr	r2, [pc, #156]	; (80047cc <test_func()+0x308>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]
 8004736:	e7f0      	b.n	800471a <test_func()+0x256>
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <test_func()+0x2b8>)
 800473a:	4925      	ldr	r1, [pc, #148]	; (80047d0 <test_func()+0x30c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <test_func()+0x2bc>)
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <test_func()+0x2d0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e7e4      	b.n	800471a <test_func()+0x256>
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <test_func()+0x2b8>)
 8004752:	4920      	ldr	r1, [pc, #128]	; (80047d4 <test_func()+0x310>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <test_func()+0x2bc>)
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <test_func()+0x2d0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e7d8      	b.n	800471a <test_func()+0x256>
 8004768:	20001b45 	.word	0x20001b45
 800476c:	20000cc4 	.word	0x20000cc4
 8004770:	20000d18 	.word	0x20000d18
 8004774:	0800a725 	.word	0x0800a725
 8004778:	0800a727 	.word	0x0800a727
 800477c:	20000458 	.word	0x20000458
 8004780:	200016fc 	.word	0x200016fc
 8004784:	000f4240 	.word	0x000f4240
 8004788:	0800a827 	.word	0x0800a827
 800478c:	0800a830 	.word	0x0800a830
 8004790:	0800a73f 	.word	0x0800a73f
 8004794:	08009df8 	.word	0x08009df8
 8004798:	0800a762 	.word	0x0800a762
 800479c:	0800a785 	.word	0x0800a785
 80047a0:	08009938 	.word	0x08009938
 80047a4:	0800a79e 	.word	0x0800a79e
 80047a8:	0800a7dc 	.word	0x0800a7dc
 80047ac:	0800a7ed 	.word	0x0800a7ed
 80047b0:	20001700 	.word	0x20001700
 80047b4:	0800a80e 	.word	0x0800a80e
 80047b8:	0800a816 	.word	0x0800a816
 80047bc:	0800a81d 	.word	0x0800a81d
 80047c0:	0800a72a 	.word	0x0800a72a
 80047c4:	000b0002 	.word	0x000b0002
 80047c8:	0800a734 	.word	0x0800a734
 80047cc:	000b0008 	.word	0x000b0008
 80047d0:	0800a74b 	.word	0x0800a74b
 80047d4:	0800a756 	.word	0x0800a756
 80047d8:	03d08fff 	.word	0x03d08fff
 80047dc:	0800a521 	.word	0x0800a521
 80047e0:	0800a806 	.word	0x0800a806
 80047e4:	4b66      	ldr	r3, [pc, #408]	; (8004980 <test_func()+0x4bc>)
 80047e6:	4967      	ldr	r1, [pc, #412]	; (8004984 <test_func()+0x4c0>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <test_func()+0x4c4>)
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	4b67      	ldr	r3, [pc, #412]	; (800498c <test_func()+0x4c8>)
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <test_func()+0x4cc>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
 80047f8:	e78f      	b.n	800471a <test_func()+0x256>
 80047fa:	4b61      	ldr	r3, [pc, #388]	; (8004980 <test_func()+0x4bc>)
 80047fc:	4965      	ldr	r1, [pc, #404]	; (8004994 <test_func()+0x4d0>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <test_func()+0x4c4>)
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <test_func()+0x4c8>)
 8004806:	4a64      	ldr	r2, [pc, #400]	; (8004998 <test_func()+0x4d4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	e784      	b.n	800471a <test_func()+0x256>
 8004810:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <test_func()+0x4bc>)
 8004812:	4962      	ldr	r1, [pc, #392]	; (800499c <test_func()+0x4d8>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <test_func()+0x4c4>)
 8004818:	4861      	ldr	r0, [pc, #388]	; (80049a0 <test_func()+0x4dc>)
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f7fb ff49 	bl	80006b2 <Print::print(char const*)>
 8004820:	4b60      	ldr	r3, [pc, #384]	; (80049a4 <test_func()+0x4e0>)
 8004822:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004826:	f893 10fc 	ldrb.w	r1, [r3, #252]	; 0xfc
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	e6e4      	b.n	80045fa <test_func()+0x136>
 8004830:	4b53      	ldr	r3, [pc, #332]	; (8004980 <test_func()+0x4bc>)
 8004832:	495d      	ldr	r1, [pc, #372]	; (80049a8 <test_func()+0x4e4>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b54      	ldr	r3, [pc, #336]	; (8004988 <test_func()+0x4c4>)
 8004838:	4859      	ldr	r0, [pc, #356]	; (80049a0 <test_func()+0x4dc>)
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f7fb ff39 	bl	80006b2 <Print::print(char const*)>
 8004840:	4b58      	ldr	r3, [pc, #352]	; (80049a4 <test_func()+0x4e0>)
 8004842:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004846:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	e6d4      	b.n	80045fa <test_func()+0x136>
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <test_func()+0x4bc>)
 8004852:	4956      	ldr	r1, [pc, #344]	; (80049ac <test_func()+0x4e8>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <test_func()+0x4c4>)
 8004858:	4851      	ldr	r0, [pc, #324]	; (80049a0 <test_func()+0x4dc>)
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f7fb ff29 	bl	80006b2 <Print::print(char const*)>
 8004860:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <test_func()+0x4e0>)
 8004862:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8004866:	f893 116c 	ldrb.w	r1, [r3, #364]	; 0x16c
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	e6c4      	b.n	80045fa <test_func()+0x136>
 8004870:	494f      	ldr	r1, [pc, #316]	; (80049b0 <test_func()+0x4ec>)
 8004872:	484b      	ldr	r0, [pc, #300]	; (80049a0 <test_func()+0x4dc>)
 8004874:	f7fb ff36 	bl	80006e4 <Print::println(char const*)>
 8004878:	494e      	ldr	r1, [pc, #312]	; (80049b4 <test_func()+0x4f0>)
 800487a:	4849      	ldr	r0, [pc, #292]	; (80049a0 <test_func()+0x4dc>)
 800487c:	f7fb ff19 	bl	80006b2 <Print::print(char const*)>
 8004880:	4b42      	ldr	r3, [pc, #264]	; (800498c <test_func()+0x4c8>)
 8004882:	2210      	movs	r2, #16
 8004884:	681c      	ldr	r4, [r3, #0]
 8004886:	4846      	ldr	r0, [pc, #280]	; (80049a0 <test_func()+0x4dc>)
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	f7fb ffa5 	bl	80007da <Print::print(unsigned long, int)>
 8004890:	4949      	ldr	r1, [pc, #292]	; (80049b8 <test_func()+0x4f4>)
 8004892:	4843      	ldr	r0, [pc, #268]	; (80049a0 <test_func()+0x4dc>)
 8004894:	f7fb ff0d 	bl	80006b2 <Print::print(char const*)>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	4840      	ldr	r0, [pc, #256]	; (80049a0 <test_func()+0x4dc>)
 80048a0:	f7fb ff9b 	bl	80007da <Print::print(unsigned long, int)>
 80048a4:	4945      	ldr	r1, [pc, #276]	; (80049bc <test_func()+0x4f8>)
 80048a6:	483e      	ldr	r0, [pc, #248]	; (80049a0 <test_func()+0x4dc>)
 80048a8:	f7fb ff03 	bl	80006b2 <Print::print(char const*)>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	483b      	ldr	r0, [pc, #236]	; (80049a0 <test_func()+0x4dc>)
 80048b4:	f7fb ff91 	bl	80007da <Print::print(unsigned long, int)>
 80048b8:	4941      	ldr	r1, [pc, #260]	; (80049c0 <test_func()+0x4fc>)
 80048ba:	4839      	ldr	r0, [pc, #228]	; (80049a0 <test_func()+0x4dc>)
 80048bc:	f7fb fef9 	bl	80006b2 <Print::print(char const*)>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	4836      	ldr	r0, [pc, #216]	; (80049a0 <test_func()+0x4dc>)
 80048c8:	f7fb ff87 	bl	80007da <Print::print(unsigned long, int)>
 80048cc:	493d      	ldr	r1, [pc, #244]	; (80049c4 <test_func()+0x500>)
 80048ce:	4834      	ldr	r0, [pc, #208]	; (80049a0 <test_func()+0x4dc>)
 80048d0:	f7fb ff08 	bl	80006e4 <Print::println(char const*)>
 80048d4:	4937      	ldr	r1, [pc, #220]	; (80049b4 <test_func()+0x4f0>)
 80048d6:	4832      	ldr	r0, [pc, #200]	; (80049a0 <test_func()+0x4dc>)
 80048d8:	f7fb feeb 	bl	80006b2 <Print::print(char const*)>
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <test_func()+0x504>)
 80048de:	2210      	movs	r2, #16
 80048e0:	681c      	ldr	r4, [r3, #0]
 80048e2:	482f      	ldr	r0, [pc, #188]	; (80049a0 <test_func()+0x4dc>)
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	f7fb ff77 	bl	80007da <Print::print(unsigned long, int)>
 80048ec:	4932      	ldr	r1, [pc, #200]	; (80049b8 <test_func()+0x4f4>)
 80048ee:	482c      	ldr	r0, [pc, #176]	; (80049a0 <test_func()+0x4dc>)
 80048f0:	f7fb fedf 	bl	80006b2 <Print::print(char const*)>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	2210      	movs	r2, #16
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	4829      	ldr	r0, [pc, #164]	; (80049a0 <test_func()+0x4dc>)
 80048fc:	f7fb ff6d 	bl	80007da <Print::print(unsigned long, int)>
 8004900:	492e      	ldr	r1, [pc, #184]	; (80049bc <test_func()+0x4f8>)
 8004902:	4827      	ldr	r0, [pc, #156]	; (80049a0 <test_func()+0x4dc>)
 8004904:	f7fb fed5 	bl	80006b2 <Print::print(char const*)>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	2210      	movs	r2, #16
 800490c:	68d9      	ldr	r1, [r3, #12]
 800490e:	4824      	ldr	r0, [pc, #144]	; (80049a0 <test_func()+0x4dc>)
 8004910:	f7fb ff63 	bl	80007da <Print::print(unsigned long, int)>
 8004914:	492a      	ldr	r1, [pc, #168]	; (80049c0 <test_func()+0x4fc>)
 8004916:	4822      	ldr	r0, [pc, #136]	; (80049a0 <test_func()+0x4dc>)
 8004918:	f7fb fecb 	bl	80006b2 <Print::print(char const*)>
 800491c:	2210      	movs	r2, #16
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	481f      	ldr	r0, [pc, #124]	; (80049a0 <test_func()+0x4dc>)
 8004924:	f7fb ff63 	bl	80007ee <Print::println(unsigned long, int)>
 8004928:	e5f9      	b.n	800451e <test_func()+0x5a>
 800492a:	4c15      	ldr	r4, [pc, #84]	; (8004980 <test_func()+0x4bc>)
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	4543      	cmp	r3, r8
 8004930:	d801      	bhi.n	8004936 <test_func()+0x472>
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	4925      	ldr	r1, [pc, #148]	; (80049cc <test_func()+0x508>)
 8004938:	4819      	ldr	r0, [pc, #100]	; (80049a0 <test_func()+0x4dc>)
 800493a:	f7fb feba 	bl	80006b2 <Print::print(char const*)>
 800493e:	220a      	movs	r2, #10
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	e7ee      	b.n	8004922 <test_func()+0x45e>
 8004944:	f24f 4224 	movw	r2, #62500	; 0xf424
 8004948:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <test_func()+0x4bc>)
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	4293      	cmp	r3, r2
 800494e:	d9f2      	bls.n	8004936 <test_func()+0x472>
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	e7ef      	b.n	8004934 <test_func()+0x470>
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <test_func()+0x4bc>)
 8004956:	2000      	movs	r0, #0
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <test_func()+0x4c4>)
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e5ef      	b.n	8004540 <test_func()+0x7c>
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <test_func()+0x4bc>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <test_func()+0x4c4>)
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f7fe fcbc 	bl	80032e4 <SCSI_BUS_get_byte()>
 800496c:	2210      	movs	r2, #16
 800496e:	4601      	mov	r1, r0
 8004970:	480b      	ldr	r0, [pc, #44]	; (80049a0 <test_func()+0x4dc>)
 8004972:	f7fb ff28 	bl	80007c6 <Print::print(unsigned char, int)>
 8004976:	e5d2      	b.n	800451e <test_func()+0x5a>
 8004978:	b003      	add	sp, #12
 800497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497e:	bf00      	nop
 8004980:	20000458 	.word	0x20000458
 8004984:	0800a76d 	.word	0x0800a76d
 8004988:	200016fc 	.word	0x200016fc
 800498c:	08009df8 	.word	0x08009df8
 8004990:	000b000a 	.word	0x000b000a
 8004994:	0800a778 	.word	0x0800a778
 8004998:	000b0003 	.word	0x000b0003
 800499c:	0800a78d 	.word	0x0800a78d
 80049a0:	20000cc4 	.word	0x20000cc4
 80049a4:	08009938 	.word	0x08009938
 80049a8:	0800a796 	.word	0x0800a796
 80049ac:	0800a7a6 	.word	0x0800a7a6
 80049b0:	0800a7ae 	.word	0x0800a7ae
 80049b4:	0800a7b7 	.word	0x0800a7b7
 80049b8:	0800a7be 	.word	0x0800a7be
 80049bc:	0800a7c5 	.word	0x0800a7c5
 80049c0:	0800a7cc 	.word	0x0800a7cc
 80049c4:	0800a7d3 	.word	0x0800a7d3
 80049c8:	08009dfc 	.word	0x08009dfc
 80049cc:	0800a829 	.word	0x0800a829

080049d0 <loop()>:
 80049d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	f7ff fd76 	bl	80044c4 <test_func()>
 80049d8:	4ab8      	ldr	r2, [pc, #736]	; (8004cbc <loop()+0x2ec>)
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d03a      	beq.n	8004a56 <loop()+0x86>
 80049e0:	3b01      	subs	r3, #1
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	bba3      	cbnz	r3, 8004a50 <loop()+0x80>
 80049e6:	49b6      	ldr	r1, [pc, #728]	; (8004cc0 <loop()+0x2f0>)
 80049e8:	48b6      	ldr	r0, [pc, #728]	; (8004cc4 <loop()+0x2f4>)
 80049ea:	f7fb fe7b 	bl	80006e4 <Print::println(char const*)>
 80049ee:	f7fe fc79 	bl	80032e4 <SCSI_BUS_get_byte()>
 80049f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80049f6:	4bb4      	ldr	r3, [pc, #720]	; (8004cc8 <loop()+0x2f8>)
 80049f8:	4cb4      	ldr	r4, [pc, #720]	; (8004ccc <loop()+0x2fc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]
 8004a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a08:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
 8004a0c:	6802      	ldr	r2, [r0, #0]
 8004a0e:	408b      	lsls	r3, r1
 8004a10:	6113      	str	r3, [r2, #16]
 8004a12:	2204      	movs	r2, #4
 8004a14:	f7fc fa2e 	bl	8000e74 <gpio_set_mode>
 8004a18:	2204      	movs	r2, #4
 8004a1a:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8004a1e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8004a22:	f7fc fa27 	bl	8000e74 <gpio_set_mode>
 8004a26:	2204      	movs	r2, #4
 8004a28:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8004a2c:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8004a30:	f7fc fa20 	bl	8000e74 <gpio_set_mode>
 8004a34:	2204      	movs	r2, #4
 8004a36:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
 8004a3a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004a3e:	f7fc fa19 	bl	8000e74 <gpio_set_mode>
 8004a42:	2204      	movs	r2, #4
 8004a44:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 8004a48:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8004a4c:	f7fc fa12 	bl	8000e74 <gpio_set_mode>
 8004a50:	b004      	add	sp, #16
 8004a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a56:	4c9d      	ldr	r4, [pc, #628]	; (8004ccc <loop()+0x2fc>)
 8004a58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004a5c:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	2301      	movs	r3, #1
 8004a66:	fa03 f202 	lsl.w	r2, r3, r2
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	d125      	bne.n	8004aba <loop()+0xea>
 8004a6e:	4614      	mov	r4, r2
 8004a70:	4e97      	ldr	r6, [pc, #604]	; (8004cd0 <loop()+0x300>)
 8004a72:	4f98      	ldr	r7, [pc, #608]	; (8004cd4 <loop()+0x304>)
 8004a74:	f106 0814 	add.w	r8, r6, #20
 8004a78:	783b      	ldrb	r3, [r7, #0]
 8004a7a:	4123      	asrs	r3, r4
 8004a7c:	07da      	lsls	r2, r3, #31
 8004a7e:	d511      	bpl.n	8004aa4 <loop()+0xd4>
 8004a80:	2568      	movs	r5, #104	; 0x68
 8004a82:	4365      	muls	r5, r4
 8004a84:	eb08 0005 	add.w	r0, r8, r5
 8004a88:	f002 fa82 	bl	8006f90 <FsBaseFile::close()>
 8004a8c:	4992      	ldr	r1, [pc, #584]	; (8004cd8 <loop()+0x308>)
 8004a8e:	488d      	ldr	r0, [pc, #564]	; (8004cc4 <loop()+0x2f4>)
 8004a90:	f7fb fe0f 	bl	80006b2 <Print::print(char const*)>
 8004a94:	59a9      	ldr	r1, [r5, r6]
 8004a96:	488b      	ldr	r0, [pc, #556]	; (8004cc4 <loop()+0x2f4>)
 8004a98:	f7fb fe0b 	bl	80006b2 <Print::print(char const*)>
 8004a9c:	498f      	ldr	r1, [pc, #572]	; (8004cdc <loop()+0x30c>)
 8004a9e:	4889      	ldr	r0, [pc, #548]	; (8004cc4 <loop()+0x2f4>)
 8004aa0:	f7fb fe20 	bl	80006e4 <Print::println(char const*)>
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	2c06      	cmp	r4, #6
 8004aa8:	d1e6      	bne.n	8004a78 <loop()+0xa8>
 8004aaa:	498d      	ldr	r1, [pc, #564]	; (8004ce0 <loop()+0x310>)
 8004aac:	4885      	ldr	r0, [pc, #532]	; (8004cc4 <loop()+0x2f4>)
 8004aae:	f7fb fe19 	bl	80006e4 <Print::println(char const*)>
 8004ab2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004ab6:	f7ff f9a7 	bl	8003e08 <RIP(unsigned long)>
 8004aba:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	6891      	ldr	r1, [r2, #8]
 8004ac2:	f894 20fc 	ldrb.w	r2, [r4, #252]	; 0xfc
 8004ac6:	fa03 f202 	lsl.w	r2, r3, r2
 8004aca:	420a      	tst	r2, r1
 8004acc:	d0c0      	beq.n	8004a50 <loop()+0x80>
 8004ace:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	6895      	ldr	r5, [r2, #8]
 8004ad6:	f894 214c 	ldrb.w	r2, [r4, #332]	; 0x14c
 8004ada:	4093      	lsls	r3, r2
 8004adc:	401d      	ands	r5, r3
 8004ade:	d1b7      	bne.n	8004a50 <loop()+0x80>
 8004ae0:	f7fe fc00 	bl	80032e4 <SCSI_BUS_get_byte()>
 8004ae4:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <loop()+0x304>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	4018      	ands	r0, r3
 8004aea:	d0b1      	beq.n	8004a50 <loop()+0x80>
 8004aec:	fa40 f305 	asr.w	r3, r0, r5
 8004af0:	07db      	lsls	r3, r3, #31
 8004af2:	d574      	bpl.n	8004bde <loop()+0x20e>
 8004af4:	4b7b      	ldr	r3, [pc, #492]	; (8004ce4 <loop()+0x314>)
 8004af6:	601d      	str	r5, [r3, #0]
 8004af8:	497b      	ldr	r1, [pc, #492]	; (8004ce8 <loop()+0x318>)
 8004afa:	4872      	ldr	r0, [pc, #456]	; (8004cc4 <loop()+0x2f4>)
 8004afc:	f7fb fdd9 	bl	80006b2 <Print::print(char const*)>
 8004b00:	220a      	movs	r2, #10
 8004b02:	4629      	mov	r1, r5
 8004b04:	486f      	ldr	r0, [pc, #444]	; (8004cc4 <loop()+0x2f4>)
 8004b06:	f7fb fe72 	bl	80007ee <Print::println(unsigned long, int)>
 8004b0a:	4978      	ldr	r1, [pc, #480]	; (8004cec <loop()+0x31c>)
 8004b0c:	486d      	ldr	r0, [pc, #436]	; (8004cc4 <loop()+0x2f4>)
 8004b0e:	f7fb fde9 	bl	80006e4 <Print::println(char const*)>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2601      	movs	r6, #1
 8004b16:	4d76      	ldr	r5, [pc, #472]	; (8004cf0 <loop()+0x320>)
 8004b18:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8004b1c:	702b      	strb	r3, [r5, #0]
 8004b1e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	f894 320c 	ldrb.w	r3, [r4, #524]	; 0x20c
 8004b28:	fa06 f303 	lsl.w	r3, r6, r3
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	6113      	str	r3, [r2, #16]
 8004b30:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
 8004b34:	2207      	movs	r2, #7
 8004b36:	f7fc f99d 	bl	8000e74 <gpio_set_mode>
 8004b3a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004b44:	fa06 f303 	lsl.w	r3, r6, r3
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	6113      	str	r3, [r2, #16]
 8004b4c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8004b56:	409e      	lsls	r6, r3
 8004b58:	6893      	ldr	r3, [r2, #8]
 8004b5a:	4233      	tst	r3, r6
 8004b5c:	d143      	bne.n	8004be6 <loop()+0x216>
 8004b5e:	782b      	ldrb	r3, [r5, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f9      	beq.n	8004b58 <loop()+0x188>
 8004b64:	4963      	ldr	r1, [pc, #396]	; (8004cf4 <loop()+0x324>)
 8004b66:	4857      	ldr	r0, [pc, #348]	; (8004cc4 <loop()+0x2f4>)
 8004b68:	f7fb fdbc 	bl	80006e4 <Print::println(char const*)>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8004b72:	702b      	strb	r3, [r5, #0]
 8004b74:	2501      	movs	r5, #1
 8004b76:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <loop()+0x2f8>)
 8004b78:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	611a      	str	r2, [r3, #16]
 8004b82:	f894 10fc 	ldrb.w	r1, [r4, #252]	; 0xfc
 8004b86:	6802      	ldr	r2, [r0, #0]
 8004b88:	fa05 f301 	lsl.w	r3, r5, r1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	6113      	str	r3, [r2, #16]
 8004b90:	2204      	movs	r2, #4
 8004b92:	f7fc f96f 	bl	8000e74 <gpio_set_mode>
 8004b96:	2204      	movs	r2, #4
 8004b98:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8004b9c:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8004ba0:	f7fc f968 	bl	8000e74 <gpio_set_mode>
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8004baa:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8004bae:	f7fc f961 	bl	8000e74 <gpio_set_mode>
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
 8004bb8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004bbc:	f7fc f95a 	bl	8000e74 <gpio_set_mode>
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 8004bc6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8004bca:	f7fc f953 	bl	8000e74 <gpio_set_mode>
 8004bce:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004bd2:	f894 220c 	ldrb.w	r2, [r4, #524]	; 0x20c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4095      	lsls	r5, r2
 8004bda:	611d      	str	r5, [r3, #16]
 8004bdc:	e738      	b.n	8004a50 <loop()+0x80>
 8004bde:	3501      	adds	r5, #1
 8004be0:	2d06      	cmp	r5, #6
 8004be2:	d183      	bne.n	8004aec <loop()+0x11c>
 8004be4:	e788      	b.n	8004af8 <loop()+0x128>
 8004be6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8004bea:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	408b      	lsls	r3, r1
 8004bf6:	4213      	tst	r3, r2
 8004bf8:	d031      	beq.n	8004c5e <loop()+0x28e>
 8004bfa:	493f      	ldr	r1, [pc, #252]	; (8004cf8 <loop()+0x328>)
 8004bfc:	4831      	ldr	r0, [pc, #196]	; (8004cc4 <loop()+0x2f4>)
 8004bfe:	f7fb fd71 	bl	80006e4 <Print::println(char const*)>
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <loop()+0x2f8>)
 8004c04:	4a3d      	ldr	r2, [pc, #244]	; (8004cfc <loop()+0x32c>)
 8004c06:	f8d3 8000 	ldr.w	r8, [r3]
 8004c0a:	2701      	movs	r7, #1
 8004c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c10:	ae04      	add	r6, sp, #16
 8004c12:	611a      	str	r2, [r3, #16]
 8004c14:	f7fe fc6c 	bl	80034f0 <SCSI_BUS_ItoT()>
 8004c18:	2210      	movs	r2, #16
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	f88d 0004 	strb.w	r0, [sp, #4]
 8004c20:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <loop()+0x2f4>)
 8004c22:	f7fb fdd0 	bl	80007c6 <Print::print(unsigned char, int)>
 8004c26:	213a      	movs	r1, #58	; 0x3a
 8004c28:	4826      	ldr	r0, [pc, #152]	; (8004cc4 <loop()+0x2f4>)
 8004c2a:	f7fb fd3f 	bl	80006ac <Print::print(char)>
 8004c2e:	f816 3d0c 	ldrb.w	r3, [r6, #-12]!
 8004c32:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <loop()+0x330>)
 8004c34:	115b      	asrs	r3, r3, #5
 8004c36:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
 8004c3a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004cc4 <loop()+0x2f4>
 8004c3e:	4557      	cmp	r7, sl
 8004c40:	d212      	bcs.n	8004c68 <loop()+0x298>
 8004c42:	f7fe fc55 	bl	80034f0 <SCSI_BUS_ItoT()>
 8004c46:	2210      	movs	r2, #16
 8004c48:	4601      	mov	r1, r0
 8004c4a:	55f0      	strb	r0, [r6, r7]
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	f7fb fdba 	bl	80007c6 <Print::print(unsigned char, int)>
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	4648      	mov	r0, r9
 8004c56:	f7fb fd29 	bl	80006ac <Print::print(char)>
 8004c5a:	3701      	adds	r7, #1
 8004c5c:	e7ef      	b.n	8004c3e <loop()+0x26e>
 8004c5e:	f7fe fda7 	bl	80037b0 <SCSI_BUS_attention()>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0c9      	beq.n	8004bfa <loop()+0x22a>
 8004c66:	e77d      	b.n	8004b64 <loop()+0x194>
 8004c68:	4926      	ldr	r1, [pc, #152]	; (8004d04 <loop()+0x334>)
 8004c6a:	4816      	ldr	r0, [pc, #88]	; (8004cc4 <loop()+0x2f4>)
 8004c6c:	f7fb fd3a 	bl	80006e4 <Print::println(char const*)>
 8004c70:	4630      	mov	r0, r6
 8004c72:	f7ff f81f 	bl	8003cb4 <do_SCSI_CMD(unsigned char*)>
 8004c76:	782b      	ldrb	r3, [r5, #0]
 8004c78:	4606      	mov	r6, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f47f af72 	bne.w	8004b64 <loop()+0x194>
 8004c80:	4921      	ldr	r1, [pc, #132]	; (8004d08 <loop()+0x338>)
 8004c82:	4810      	ldr	r0, [pc, #64]	; (8004cc4 <loop()+0x2f4>)
 8004c84:	f7fb fd2e 	bl	80006e4 <Print::println(char const*)>
 8004c88:	f8d8 3000 	ldr.w	r3, [r8]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <loop()+0x33c>)
 8004c8e:	b2f0      	uxtb	r0, r6
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	f7fe fc61 	bl	8003558 <SCSI_BUS_IfromT(unsigned char)>
 8004c96:	782b      	ldrb	r3, [r5, #0]
 8004c98:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f47f af61 	bne.w	8004b64 <loop()+0x194>
 8004ca2:	491b      	ldr	r1, [pc, #108]	; (8004d10 <loop()+0x340>)
 8004ca4:	4807      	ldr	r0, [pc, #28]	; (8004cc4 <loop()+0x2f4>)
 8004ca6:	f7fb fd1d 	bl	80006e4 <Print::println(char const*)>
 8004caa:	f04f 120b 	mov.w	r2, #720907	; 0xb000b
 8004cae:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	f7fe fc4f 	bl	8003558 <SCSI_BUS_IfromT(unsigned char)>
 8004cba:	e753      	b.n	8004b64 <loop()+0x194>
 8004cbc:	200016fc 	.word	0x200016fc
 8004cc0:	0800a4dc 	.word	0x0800a4dc
 8004cc4:	20000cc4 	.word	0x20000cc4
 8004cc8:	08009df8 	.word	0x08009df8
 8004ccc:	08009938 	.word	0x08009938
 8004cd0:	20001700 	.word	0x20001700
 8004cd4:	20001b45 	.word	0x20001b45
 8004cd8:	0800a4e7 	.word	0x0800a4e7
 8004cdc:	0800a63f 	.word	0x0800a63f
 8004ce0:	0800a502 	.word	0x0800a502
 8004ce4:	20001a40 	.word	0x20001a40
 8004ce8:	0800a513 	.word	0x0800a513
 8004cec:	0800a525 	.word	0x0800a525
 8004cf0:	200016f8 	.word	0x200016f8
 8004cf4:	0800a568 	.word	0x0800a568
 8004cf8:	0800a535 	.word	0x0800a535
 8004cfc:	000b0002 	.word	0x000b0002
 8004d00:	0800a940 	.word	0x0800a940
 8004d04:	0800a222 	.word	0x0800a222
 8004d08:	0800a547 	.word	0x0800a547
 8004d0c:	000b000a 	.word	0x000b000a
 8004d10:	0800a557 	.word	0x0800a557

08004d14 <ExFatFile::close()>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4604      	mov	r4, r0
 8004d18:	f000 fcce 	bl	80056b8 <ExFatFile::sync()>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8004d22:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8004d26:	bd10      	pop	{r4, pc}

08004d28 <ExFatFile::openRoot(ExFatVolume*)>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8004d30:	4604      	mov	r4, r0
 8004d32:	b951      	cbnz	r1, 8004d4a <ExFatFile::openRoot(ExFatVolume*)+0x22>
 8004d34:	2238      	movs	r2, #56	; 0x38
 8004d36:	f003 fc5f 	bl	80085f8 <memset>
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8004d42:	6225      	str	r5, [r4, #32]
 8004d44:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e7fc      	b.n	8004d48 <ExFatFile::openRoot(ExFatVolume*)+0x20>
	...

08004d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	7808      	ldrb	r0, [r1, #0]
 8004d54:	1c4c      	adds	r4, r1, #1
 8004d56:	2820      	cmp	r0, #32
 8004d58:	d022      	beq.n	8004da0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x50>
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	4f1d      	ldr	r7, [pc, #116]	; (8004dd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>)
 8004d5e:	6051      	str	r1, [r2, #4]
 8004d60:	1a6c      	subs	r4, r5, r1
 8004d62:	462e      	mov	r6, r5
 8004d64:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004d68:	b148      	cbz	r0, 8004d7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2e>
 8004d6a:	282f      	cmp	r0, #47	; 0x2f
 8004d6c:	d11a      	bne.n	8004da4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x54>
 8004d6e:	1908      	adds	r0, r1, r4
 8004d70:	4606      	mov	r6, r0
 8004d72:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004d76:	2d20      	cmp	r5, #32
 8004d78:	d0fa      	beq.n	8004d70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x20>
 8004d7a:	2d2f      	cmp	r5, #47	; 0x2f
 8004d7c:	d0f8      	beq.n	8004d70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x20>
 8004d7e:	601e      	str	r6, [r3, #0]
 8004d80:	190b      	adds	r3, r1, r4
 8004d82:	428b      	cmp	r3, r1
 8004d84:	eba3 0001 	sub.w	r0, r3, r1
 8004d88:	d021      	beq.n	8004dce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
 8004d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d8e:	2c2e      	cmp	r4, #46	; 0x2e
 8004d90:	d0f7      	beq.n	8004d82 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
 8004d92:	2c20      	cmp	r4, #32
 8004d94:	d0f5      	beq.n	8004d82 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
 8004d96:	28ff      	cmp	r0, #255	; 0xff
 8004d98:	dc06      	bgt.n	8004da8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
 8004d9a:	6010      	str	r0, [r2, #0]
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	e004      	b.n	8004daa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
 8004da0:	4621      	mov	r1, r4
 8004da2:	e7d6      	b.n	8004d52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
 8004da4:	285c      	cmp	r0, #92	; 0x5c
 8004da6:	d101      	bne.n	8004dac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5c>
 8004da8:	2000      	movs	r0, #0
 8004daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dac:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
 8004db0:	b2e4      	uxtb	r4, r4
 8004db2:	2c1d      	cmp	r4, #29
 8004db4:	d803      	bhi.n	8004dbe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
 8004db6:	fa27 f404 	lsr.w	r4, r7, r4
 8004dba:	07e4      	lsls	r4, r4, #31
 8004dbc:	d4f4      	bmi.n	8004da8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
 8004dbe:	f000 04bf 	and.w	r4, r0, #191	; 0xbf
 8004dc2:	2c3c      	cmp	r4, #60	; 0x3c
 8004dc4:	d0f0      	beq.n	8004da8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
 8004dc6:	3820      	subs	r0, #32
 8004dc8:	285e      	cmp	r0, #94	; 0x5e
 8004dca:	d9c9      	bls.n	8004d60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
 8004dcc:	e7ec      	b.n	8004da8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e7e3      	b.n	8004d9a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
 8004dd2:	bf00      	nop
 8004dd4:	31000101 	.word	0x31000101

08004dd8 <ExFatFile::read(void*, unsigned int)>:
 8004dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8004de0:	4604      	mov	r4, r0
 8004de2:	07df      	lsls	r7, r3, #31
 8004de4:	460e      	mov	r6, r1
 8004de6:	4615      	mov	r5, r2
 8004de8:	d56b      	bpl.n	8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004dea:	0658      	lsls	r0, r3, #25
 8004dec:	d403      	bmi.n	8004df6 <ExFatFile::read(void*, unsigned int)+0x1e>
 8004dee:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8004df2:	0719      	lsls	r1, r3, #28
 8004df4:	d50c      	bpl.n	8004e10 <ExFatFile::read(void*, unsigned int)+0x38>
 8004df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004dfa:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004dfe:	eb12 0805 	adds.w	r8, r2, r5
 8004e02:	f143 0900 	adc.w	r9, r3, #0
 8004e06:	4549      	cmp	r1, r9
 8004e08:	bf08      	it	eq
 8004e0a:	4540      	cmpeq	r0, r8
 8004e0c:	bf38      	it	cc
 8004e0e:	1a85      	subcc	r5, r0, r2
 8004e10:	462f      	mov	r7, r5
 8004e12:	f04f 0a01 	mov.w	sl, #1
 8004e16:	f104 0318 	add.w	r3, r4, #24
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 809d 	beq.w	8004f5c <ExFatFile::read(void*, unsigned int)+0x184>
 8004e22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e26:	6a20      	ldr	r0, [r4, #32]
 8004e28:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
 8004e2c:	ea01 0802 	and.w	r8, r1, r2
 8004e30:	f3c8 0908 	ubfx	r9, r8, #0, #9
 8004e34:	f1b8 0f00 	cmp.w	r8, #0
 8004e38:	d109      	bne.n	8004e4e <ExFatFile::read(void*, unsigned int)+0x76>
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d12d      	bne.n	8004e9a <ExFatFile::read(void*, unsigned int)+0xc2>
 8004e3e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8004e42:	065a      	lsls	r2, r3, #25
 8004e44:	bf4c      	ite	mi
 8004e46:	f8d0 342c 	ldrmi.w	r3, [r0, #1068]	; 0x42c
 8004e4a:	69e3      	ldrpl	r3, [r4, #28]
 8004e4c:	61a3      	str	r3, [r4, #24]
 8004e4e:	6a20      	ldr	r0, [r4, #32]
 8004e50:	69a1      	ldr	r1, [r4, #24]
 8004e52:	f890 243d 	ldrb.w	r2, [r0, #1085]	; 0x43d
 8004e56:	f1a1 0b02 	sub.w	fp, r1, #2
 8004e5a:	ea4f 2858 	mov.w	r8, r8, lsr #9
 8004e5e:	fa0b fb02 	lsl.w	fp, fp, r2
 8004e62:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
 8004e66:	44c3      	add	fp, r8
 8004e68:	448b      	add	fp, r1
 8004e6a:	f1b9 0f00 	cmp.w	r9, #0
 8004e6e:	d131      	bne.n	8004ed4 <ExFatFile::read(void*, unsigned int)+0xfc>
 8004e70:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8004e74:	d32e      	bcc.n	8004ed4 <ExFatFile::read(void*, unsigned int)+0xfc>
 8004e76:	f8d0 1214 	ldr.w	r1, [r0, #532]	; 0x214
 8004e7a:	458b      	cmp	fp, r1
 8004e7c:	d02a      	beq.n	8004ed4 <ExFatFile::read(void*, unsigned int)+0xfc>
 8004e7e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8004e82:	d247      	bcs.n	8004f14 <ExFatFile::read(void*, unsigned int)+0x13c>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4632      	mov	r2, r6
 8004e88:	4659      	mov	r1, fp
 8004e8a:	f8d0 0438 	ldr.w	r0, [r0, #1080]	; 0x438
 8004e8e:	f002 fbcd 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 8004e92:	b1b0      	cbz	r0, 8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004e94:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004e98:	e030      	b.n	8004efc <ExFatFile::read(void*, unsigned int)+0x124>
 8004e9a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8004e9e:	69a1      	ldr	r1, [r4, #24]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	d502      	bpl.n	8004eaa <ExFatFile::read(void*, unsigned int)+0xd2>
 8004ea4:	3101      	adds	r1, #1
 8004ea6:	61a1      	str	r1, [r4, #24]
 8004ea8:	e7d1      	b.n	8004e4e <ExFatFile::read(void*, unsigned int)+0x76>
 8004eaa:	9a00      	ldr	r2, [sp, #0]
 8004eac:	f000 ff77 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 8004eb0:	b240      	sxtb	r0, r0
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	db05      	blt.n	8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004eb6:	d1ca      	bne.n	8004e4e <ExFatFile::read(void*, unsigned int)+0x76>
 8004eb8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8004ebc:	f013 0f50 	tst.w	r3, #80	; 0x50
 8004ec0:	d14c      	bne.n	8004f5c <ExFatFile::read(void*, unsigned int)+0x184>
 8004ec2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	f043 0302 	orr.w	r3, r3, #2
 8004ece:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8004ed2:	e044      	b.n	8004f5e <ExFatFile::read(void*, unsigned int)+0x186>
 8004ed4:	f5c9 7800 	rsb	r8, r9, #512	; 0x200
 8004ed8:	45b8      	cmp	r8, r7
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	4659      	mov	r1, fp
 8004ee0:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8004ee4:	bf28      	it	cs
 8004ee6:	46b8      	movcs	r8, r7
 8004ee8:	f000 fe06 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0e8      	beq.n	8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004ef0:	eb00 0109 	add.w	r1, r0, r9
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f003 fb08 	bl	800850c <memcpy>
 8004efc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f00:	eb12 0008 	adds.w	r0, r2, r8
 8004f04:	f143 0100 	adc.w	r1, r3, #0
 8004f08:	4446      	add	r6, r8
 8004f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8004f0e:	eba7 0708 	sub.w	r7, r7, r8
 8004f12:	e783      	b.n	8004e1c <ExFatFile::read(void*, unsigned int)+0x44>
 8004f14:	fa0a f202 	lsl.w	r2, sl, r2
 8004f18:	eba2 0308 	sub.w	r3, r2, r8
 8004f1c:	ea4f 2c57 	mov.w	ip, r7, lsr #9
 8004f20:	4563      	cmp	r3, ip
 8004f22:	bf28      	it	cs
 8004f24:	4663      	movcs	r3, ip
 8004f26:	458b      	cmp	fp, r1
 8004f28:	ea4f 2843 	mov.w	r8, r3, lsl #9
 8004f2c:	d909      	bls.n	8004f42 <ExFatFile::read(void*, unsigned int)+0x16a>
 8004f2e:	6a20      	ldr	r0, [r4, #32]
 8004f30:	4632      	mov	r2, r6
 8004f32:	4659      	mov	r1, fp
 8004f34:	f8d0 0438 	ldr.w	r0, [r0, #1080]	; 0x438
 8004f38:	f002 fb78 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d1dd      	bne.n	8004efc <ExFatFile::read(void*, unsigned int)+0x124>
 8004f40:	e7bf      	b.n	8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004f42:	eb03 020b 	add.w	r2, r3, fp
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d9f1      	bls.n	8004f2e <ExFatFile::read(void*, unsigned int)+0x156>
 8004f4a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f000 fdbe 	bl	8005ad0 <FsCache::sync()>
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d1e9      	bne.n	8004f2e <ExFatFile::read(void*, unsigned int)+0x156>
 8004f5a:	e7b2      	b.n	8004ec2 <ExFatFile::read(void*, unsigned int)+0xea>
 8004f5c:	1be8      	subs	r0, r5, r7
 8004f5e:	b003      	add	sp, #12
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f64 <ExFatFile::peek()>:
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f10d 0107 	add.w	r1, sp, #7
 8004f70:	4604      	mov	r4, r0
 8004f72:	6985      	ldr	r5, [r0, #24]
 8004f74:	f7ff ff30 	bl	8004dd8 <ExFatFile::read(void*, unsigned int)>
 8004f78:	2801      	cmp	r0, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	f04f 30ff 	movne.w	r0, #4294967295
 8004f80:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8004f84:	e9c4 6700 	strd	r6, r7, [r4]
 8004f88:	61a5      	str	r5, [r4, #24]
 8004f8a:	b003      	add	sp, #12
 8004f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f8e <ExFatFile::seekSet(unsigned long long)>:
 8004f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f92:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 8004f96:	4604      	mov	r4, r0
 8004f98:	4616      	mov	r6, r2
 8004f9a:	461f      	mov	r7, r3
 8004f9c:	6985      	ldr	r5, [r0, #24]
 8004f9e:	f1bc 0f00 	cmp.w	ip, #0
 8004fa2:	d069      	beq.n	8005078 <ExFatFile::seekSet(unsigned long long)+0xea>
 8004fa4:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	bf08      	it	eq
 8004fac:	4290      	cmpeq	r0, r2
 8004fae:	d006      	beq.n	8004fbe <ExFatFile::seekSet(unsigned long long)+0x30>
 8004fb0:	ea56 0307 	orrs.w	r3, r6, r7
 8004fb4:	d105      	bne.n	8004fc2 <ExFatFile::seekSet(unsigned long long)+0x34>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61a3      	str	r3, [r4, #24]
 8004fba:	e9c4 6700 	strd	r6, r7, [r4]
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	e05c      	b.n	800507c <ExFatFile::seekSet(unsigned long long)+0xee>
 8004fc2:	f01c 0f08 	tst.w	ip, #8
 8004fc6:	d005      	beq.n	8004fd4 <ExFatFile::seekSet(unsigned long long)+0x46>
 8004fc8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004fcc:	42bb      	cmp	r3, r7
 8004fce:	bf08      	it	eq
 8004fd0:	42b2      	cmpeq	r2, r6
 8004fd2:	d351      	bcc.n	8005078 <ExFatFile::seekSet(unsigned long long)+0xea>
 8004fd4:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8004fd8:	f116 32ff 	adds.w	r2, r6, #4294967295
 8004fdc:	f147 33ff 	adc.w	r3, r7, #4294967295
 8004fe0:	f899 e43d 	ldrb.w	lr, [r9, #1085]	; 0x43d
 8004fe4:	e9cd 2300 	strd	r2, r3, [sp]
 8004fe8:	9b00      	ldr	r3, [sp, #0]
 8004fea:	f10e 0e09 	add.w	lr, lr, #9
 8004fee:	fa5f fe8e 	uxtb.w	lr, lr
 8004ff2:	fa23 f20e 	lsr.w	r2, r3, lr
 8004ff6:	9b01      	ldr	r3, [sp, #4]
 8004ff8:	f1ce 0a20 	rsb	sl, lr, #32
 8004ffc:	f1ae 0820 	sub.w	r8, lr, #32
 8005000:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005004:	fa23 f808 	lsr.w	r8, r3, r8
 8005008:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800500c:	ea42 020a 	orr.w	r2, r2, sl
 8005010:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005014:	ea42 0808 	orr.w	r8, r2, r8
 8005018:	f1ce 0b20 	rsb	fp, lr, #32
 800501c:	f1ae 0a20 	sub.w	sl, lr, #32
 8005020:	d002      	beq.n	8005028 <ExFatFile::seekSet(unsigned long long)+0x9a>
 8005022:	69e3      	ldr	r3, [r4, #28]
 8005024:	4443      	add	r3, r8
 8005026:	e7c7      	b.n	8004fb8 <ExFatFile::seekSet(unsigned long long)+0x2a>
 8005028:	f110 32ff 	adds.w	r2, r0, #4294967295
 800502c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005030:	fa22 fe0e 	lsr.w	lr, r2, lr
 8005034:	fa03 fb0b 	lsl.w	fp, r3, fp
 8005038:	ea4e 0e0b 	orr.w	lr, lr, fp
 800503c:	fa23 fa0a 	lsr.w	sl, r3, sl
 8005040:	ea4e 0e0a 	orr.w	lr, lr, sl
 8005044:	45f0      	cmp	r8, lr
 8005046:	d302      	bcc.n	800504e <ExFatFile::seekSet(unsigned long long)+0xc0>
 8005048:	ea50 0301 	orrs.w	r3, r0, r1
 800504c:	d119      	bne.n	8005082 <ExFatFile::seekSet(unsigned long long)+0xf4>
 800504e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005052:	bf14      	ite	ne
 8005054:	f8d9 342c 	ldrne.w	r3, [r9, #1068]	; 0x42c
 8005058:	69e3      	ldreq	r3, [r4, #28]
 800505a:	61a3      	str	r3, [r4, #24]
 800505c:	f104 0918 	add.w	r9, r4, #24
 8005060:	f1b8 0f00 	cmp.w	r8, #0
 8005064:	d0a9      	beq.n	8004fba <ExFatFile::seekSet(unsigned long long)+0x2c>
 8005066:	464a      	mov	r2, r9
 8005068:	69a1      	ldr	r1, [r4, #24]
 800506a:	6a20      	ldr	r0, [r4, #32]
 800506c:	f000 fe97 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 8005070:	f108 38ff 	add.w	r8, r8, #4294967295
 8005074:	2800      	cmp	r0, #0
 8005076:	d1f3      	bne.n	8005060 <ExFatFile::seekSet(unsigned long long)+0xd2>
 8005078:	2000      	movs	r0, #0
 800507a:	61a5      	str	r5, [r4, #24]
 800507c:	b003      	add	sp, #12
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	eba8 080e 	sub.w	r8, r8, lr
 8005086:	e7e9      	b.n	800505c <ExFatFile::seekSet(unsigned long long)+0xce>

08005088 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	4699      	mov	r9, r3
 800508e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005092:	b095      	sub	sp, #84	; 0x54
 8005094:	4604      	mov	r4, r0
 8005096:	460e      	mov	r6, r1
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 819f 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 80050a4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80050a8:	f013 0f50 	tst.w	r3, #80	; 0x50
 80050ac:	f000 8199 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 80050b0:	f00a 0303 	and.w	r3, sl, #3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d027      	beq.n	8005108 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d023      	beq.n	8005104 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 8190 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 80050c2:	2301      	movs	r3, #1
 80050c4:	f00a 0208 	and.w	r2, sl, #8
 80050c8:	4313      	orrs	r3, r2
 80050ca:	9302      	str	r3, [sp, #8]
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	b1eb      	cbz	r3, 800510c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x84>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	4649      	mov	r1, r9
 80050d6:	f000 ff0b 	bl	8005ef0 <exFatHashName(char const*, unsigned int, unsigned short)>
 80050da:	2200      	movs	r2, #0
 80050dc:	9004      	str	r0, [sp, #16]
 80050de:	2300      	movs	r3, #0
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7ff ff54 	bl	8004f8e <ExFatFile::seekSet(unsigned long long)>
 80050e6:	230f      	movs	r3, #15
 80050e8:	f109 070e 	add.w	r7, r9, #14
 80050ec:	fb97 f7f3 	sdiv	r7, r7, r3
 80050f0:	2500      	movs	r5, #0
 80050f2:	b2fb      	uxtb	r3, r7
 80050f4:	462f      	mov	r7, r5
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	3302      	adds	r3, #2
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	f04f 0b00 	mov.w	fp, #0
 8005102:	e071      	b.n	80051e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
 8005104:	2303      	movs	r3, #3
 8005106:	e7dd      	b.n	80050c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3c>
 8005108:	2302      	movs	r3, #2
 800510a:	e7db      	b.n	80050c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3c>
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	9304      	str	r3, [sp, #16]
 8005110:	e7e9      	b.n	80050e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e>
 8005112:	2500      	movs	r5, #0
 8005114:	e7f3      	b.n	80050fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x76>
 8005116:	9a03      	ldr	r2, [sp, #12]
 8005118:	4297      	cmp	r7, r2
 800511a:	d37a      	bcc.n	8005212 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18a>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d163      	bne.n	80051e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
 8005120:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005124:	f000 815d 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005128:	9b02      	ldr	r3, [sp, #8]
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	f140 8159 	bpl.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8155 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	429f      	cmp	r7, r3
 800513c:	f080 80d1 	bcs.w	80052e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
 8005140:	2220      	movs	r2, #32
 8005142:	a90c      	add	r1, sp, #48	; 0x30
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff fe47 	bl	8004dd8 <ExFatFile::read(void*, unsigned int)>
 800514a:	2800      	cmp	r0, #0
 800514c:	f040 80bd 	bne.w	80052ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
 8005150:	4630      	mov	r0, r6
 8005152:	69b5      	ldr	r5, [r6, #24]
 8005154:	f000 facf 	bl	80056f6 <ExFatFile::addDirCluster()>
 8005158:	2800      	cmp	r0, #0
 800515a:	f000 8142 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 800515e:	61b5      	str	r5, [r6, #24]
 8005160:	e7ea      	b.n	8005138 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
 8005162:	bb3d      	cbnz	r5, 80051b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12c>
 8005164:	9a03      	ldr	r2, [sp, #12]
 8005166:	4297      	cmp	r7, r2
 8005168:	bf38      	it	cc
 800516a:	2700      	movcc	r7, #0
 800516c:	2b85      	cmp	r3, #133	; 0x85
 800516e:	d13b      	bne.n	80051e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
 8005170:	2238      	movs	r2, #56	; 0x38
 8005172:	2100      	movs	r1, #0
 8005174:	4620      	mov	r0, r4
 8005176:	f003 fa3f 	bl	80085f8 <memset>
 800517a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800517e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8005182:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8005186:	f002 0337 	and.w	r3, r2, #55	; 0x37
 800518a:	06d2      	lsls	r2, r2, #27
 800518c:	bf58      	it	pl
 800518e:	f043 0308 	orrpl.w	r3, r3, #8
 8005192:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8005196:	6a33      	ldr	r3, [r6, #32]
 8005198:	2501      	movs	r5, #1
 800519a:	6223      	str	r3, [r4, #32]
 800519c:	69b3      	ldr	r3, [r6, #24]
 800519e:	6263      	str	r3, [r4, #36]	; 0x24
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	3b20      	subs	r3, #32
 80051a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a6:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 80051aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80051b2:	e019      	b.n	80051e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
 80051b4:	2bc0      	cmp	r3, #192	; 0xc0
 80051b6:	d02f      	beq.n	8005218 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x190>
 80051b8:	2bc1      	cmp	r3, #193	; 0xc1
 80051ba:	d1d7      	bne.n	800516c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe4>
 80051bc:	eba9 080b 	sub.w	r8, r9, fp
 80051c0:	fa5f f888 	uxtb.w	r8, r8
 80051c4:	f1b8 0f0f 	cmp.w	r8, #15
 80051c8:	bf28      	it	cs
 80051ca:	f04f 080f 	movcs.w	r8, #15
 80051ce:	465a      	mov	r2, fp
 80051d0:	4643      	mov	r3, r8
 80051d2:	9901      	ldr	r1, [sp, #4]
 80051d4:	a80c      	add	r0, sp, #48	; 0x30
 80051d6:	f000 fea5 	bl	8005f24 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
 80051da:	b120      	cbz	r0, 80051e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
 80051dc:	44c3      	add	fp, r8
 80051de:	fa5f fb8b 	uxtb.w	fp, fp
 80051e2:	45d9      	cmp	r9, fp
 80051e4:	d031      	beq.n	800524a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1c2>
 80051e6:	4605      	mov	r5, r0
 80051e8:	2220      	movs	r2, #32
 80051ea:	a90c      	add	r1, sp, #48	; 0x30
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff fdf3 	bl	8004dd8 <ExFatFile::read(void*, unsigned int)>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d094      	beq.n	8005120 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x98>
 80051f6:	2820      	cmp	r0, #32
 80051f8:	f040 80f3 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 80051fc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8005200:	0619      	lsls	r1, r3, #24
 8005202:	d4ae      	bmi.n	8005162 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xda>
 8005204:	2f00      	cmp	r7, #0
 8005206:	d186      	bne.n	8005116 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x8e>
 8005208:	6832      	ldr	r2, [r6, #0]
 800520a:	3a20      	subs	r2, #32
 800520c:	920a      	str	r2, [sp, #40]	; 0x28
 800520e:	69b2      	ldr	r2, [r6, #24]
 8005210:	9209      	str	r2, [sp, #36]	; 0x24
 8005212:	3701      	adds	r7, #1
 8005214:	b2ff      	uxtb	r7, r7
 8005216:	e781      	b.n	800511c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x94>
 8005218:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800521c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8005220:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8005224:	079b      	lsls	r3, r3, #30
 8005226:	bf42      	ittt	mi
 8005228:	9b02      	ldrmi	r3, [sp, #8]
 800522a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800522e:	f884 3033 	strbmi.w	r3, [r4, #51]	; 0x33
 8005232:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005236:	e9c4 2304 	strd	r2, r3, [r4, #16]
 800523a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800523c:	61e3      	str	r3, [r4, #28]
 800523e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005242:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	bb53      	cbnz	r3, 80052a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x218>
 800524a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 800524e:	f040 80c8 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005252:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
 8005256:	d103      	bne.n	8005260 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d8>
 8005258:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800525c:	0799      	lsls	r1, r3, #30
 800525e:	d505      	bpl.n	800526c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e4>
 8005260:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005264:	f013 0f11 	tst.w	r3, #17
 8005268:	f040 80bb 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 800526c:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8005270:	d022      	beq.n	80052b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x230>
 8005272:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005276:	079a      	lsls	r2, r3, #30
 8005278:	f140 80b3 	bpl.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 800527c:	2200      	movs	r2, #0
 800527e:	2300      	movs	r3, #0
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff fe84 	bl	8004f8e <ExFatFile::seekSet(unsigned long long)>
 8005286:	2800      	cmp	r0, #0
 8005288:	f000 80ab 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 800528c:	4620      	mov	r0, r4
 800528e:	f000 faa1 	bl	80057d4 <ExFatFile::truncate()>
 8005292:	2800      	cmp	r0, #0
 8005294:	f000 80a5 	beq.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005298:	4628      	mov	r0, r5
 800529a:	b015      	add	sp, #84	; 0x54
 800529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052a4:	454b      	cmp	r3, r9
 80052a6:	f47f af34 	bne.w	8005112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x8a>
 80052aa:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 80052ae:	9b04      	ldr	r3, [sp, #16]
 80052b0:	1ae8      	subs	r0, r5, r3
 80052b2:	4245      	negs	r5, r0
 80052b4:	4145      	adcs	r5, r0
 80052b6:	e722      	b.n	80050fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x76>
 80052b8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 80052bc:	d0ec      	beq.n	8005298 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x210>
 80052be:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff fe63 	bl	8004f8e <ExFatFile::seekSet(unsigned long long)>
 80052c8:	e7e3      	b.n	8005292 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x20a>
 80052ca:	2820      	cmp	r0, #32
 80052cc:	f040 8089 	bne.w	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 80052d0:	b927      	cbnz	r7, 80052dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	3b20      	subs	r3, #32
 80052d6:	930a      	str	r3, [sp, #40]	; 0x28
 80052d8:	69b3      	ldr	r3, [r6, #24]
 80052da:	9309      	str	r3, [sp, #36]	; 0x24
 80052dc:	3701      	adds	r7, #1
 80052de:	b2ff      	uxtb	r7, r7
 80052e0:	e72a      	b.n	8005138 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
 80052e2:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 80052e6:	2238      	movs	r2, #56	; 0x38
 80052e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052ec:	2100      	movs	r1, #0
 80052ee:	4620      	mov	r0, r4
 80052f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80052f4:	f003 f980 	bl	80085f8 <memset>
 80052f8:	6a33      	ldr	r3, [r6, #32]
 80052fa:	f04f 08e2 	mov.w	r8, #226	; 0xe2
 80052fe:	6223      	str	r3, [r4, #32]
 8005300:	2308      	movs	r3, #8
 8005302:	2600      	movs	r6, #0
 8005304:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8005308:	aa09      	add	r2, sp, #36	; 0x24
 800530a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800530e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005310:	9f05      	ldr	r7, [sp, #20]
 8005312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005316:	3701      	adds	r7, #1
 8005318:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
 800531c:	b2ff      	uxtb	r7, r7
 800531e:	2201      	movs	r2, #1
 8005320:	a909      	add	r1, sp, #36	; 0x24
 8005322:	6a20      	ldr	r0, [r4, #32]
 8005324:	f000 fd21 	bl	8005d6a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
 8005328:	4605      	mov	r5, r0
 800532a:	2800      	cmp	r0, #0
 800532c:	d059      	beq.n	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 800532e:	f990 3000 	ldrsb.w	r3, [r0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db55      	blt.n	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005336:	2220      	movs	r2, #32
 8005338:	2100      	movs	r1, #0
 800533a:	f003 f95d 	bl	80085f8 <memset>
 800533e:	bb66      	cbnz	r6, 800539a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x312>
 8005340:	2385      	movs	r3, #133	; 0x85
 8005342:	702b      	strb	r3, [r5, #0]
 8005344:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
 8005348:	706f      	strb	r7, [r5, #1]
 800534a:	f8da 3000 	ldr.w	r3, [sl]
 800534e:	b173      	cbz	r3, 800536e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e6>
 8005350:	f10d 021f 	add.w	r2, sp, #31
 8005354:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8005358:	a808      	add	r0, sp, #32
 800535a:	4798      	blx	r3
 800535c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005360:	752b      	strb	r3, [r5, #20]
 8005362:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8005366:	812b      	strh	r3, [r5, #8]
 8005368:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800536c:	816b      	strh	r3, [r5, #10]
 800536e:	3601      	adds	r6, #1
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	b2f6      	uxtb	r6, r6
 8005374:	42b3      	cmp	r3, r6
 8005376:	d804      	bhi.n	8005382 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2fa>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f99d 	bl	80056b8 <ExFatFile::sync()>
 800537e:	4605      	mov	r5, r0
 8005380:	e78a      	b.n	8005298 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x210>
 8005382:	2220      	movs	r2, #32
 8005384:	a909      	add	r1, sp, #36	; 0x24
 8005386:	6a20      	ldr	r0, [r4, #32]
 8005388:	f000 fd3e 	bl	8005e08 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
 800538c:	2801      	cmp	r0, #1
 800538e:	d128      	bne.n	80053e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35a>
 8005390:	f108 080f 	add.w	r8, r8, #15
 8005394:	fa5f f888 	uxtb.w	r8, r8
 8005398:	e7c1      	b.n	800531e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x296>
 800539a:	2e01      	cmp	r6, #1
 800539c:	d10e      	bne.n	80053bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x334>
 800539e:	23c0      	movs	r3, #192	; 0xc0
 80053a0:	702b      	strb	r3, [r5, #0]
 80053a2:	2303      	movs	r3, #3
 80053a4:	706b      	strb	r3, [r5, #1]
 80053a6:	9b02      	ldr	r3, [sp, #8]
 80053a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80053ac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80053b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80053b4:	f885 9003 	strb.w	r9, [r5, #3]
 80053b8:	80ab      	strh	r3, [r5, #4]
 80053ba:	e7d8      	b.n	800536e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e6>
 80053bc:	23c1      	movs	r3, #193	; 0xc1
 80053be:	702b      	strb	r3, [r5, #0]
 80053c0:	eba9 0308 	sub.w	r3, r9, r8
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b0f      	cmp	r3, #15
 80053c8:	bf28      	it	cs
 80053ca:	230f      	movcs	r3, #15
 80053cc:	2200      	movs	r2, #0
 80053ce:	9901      	ldr	r1, [sp, #4]
 80053d0:	eb01 0008 	add.w	r0, r1, r8
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d9ca      	bls.n	800536e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e6>
 80053d8:	5c81      	ldrb	r1, [r0, r2]
 80053da:	3201      	adds	r2, #1
 80053dc:	f825 1f02 	strh.w	r1, [r5, #2]!
 80053e0:	e7f8      	b.n	80053d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34c>
 80053e2:	2500      	movs	r5, #0
 80053e4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80053e8:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80053ec:	e754      	b.n	8005298 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x210>
 80053ee:	bf00      	nop
 80053f0:	20001b4c 	.word	0x20001b4c

080053f4 <ExFatFile::open(ExFatFile*, char const*, int)>:
 80053f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f8:	461f      	mov	r7, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	b094      	sub	sp, #80	; 0x50
 80053fe:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8005402:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8005406:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 800540a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800540e:	4605      	mov	r5, r0
 8005410:	460c      	mov	r4, r1
 8005412:	9203      	str	r2, [sp, #12]
 8005414:	b11b      	cbz	r3, 800541e <ExFatFile::open(ExFatFile*, char const*, int)+0x2a>
 8005416:	2000      	movs	r0, #0
 8005418:	b014      	add	sp, #80	; 0x50
 800541a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800541e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8005422:	f013 0f50 	tst.w	r3, #80	; 0x50
 8005426:	d0f6      	beq.n	8005416 <ExFatFile::open(ExFatFile*, char const*, int)+0x22>
 8005428:	7813      	ldrb	r3, [r2, #0]
 800542a:	2b2f      	cmp	r3, #47	; 0x2f
 800542c:	d112      	bne.n	8005454 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	2a2f      	cmp	r2, #47	; 0x2f
 8005434:	d102      	bne.n	800543c <ExFatFile::open(ExFatFile*, char const*, int)+0x48>
 8005436:	3301      	adds	r3, #1
 8005438:	9303      	str	r3, [sp, #12]
 800543a:	e7f8      	b.n	800542e <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
 800543c:	6a21      	ldr	r1, [r4, #32]
 800543e:	b91a      	cbnz	r2, 8005448 <ExFatFile::open(ExFatFile*, char const*, int)+0x54>
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff fc71 	bl	8004d28 <ExFatFile::openRoot(ExFatVolume*)>
 8005446:	e7e7      	b.n	8005418 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
 8005448:	a806      	add	r0, sp, #24
 800544a:	f7ff fc6d 	bl	8004d28 <ExFatFile::openRoot(ExFatVolume*)>
 800544e:	2800      	cmp	r0, #0
 8005450:	d0e1      	beq.n	8005416 <ExFatFile::open(ExFatFile*, char const*, int)+0x22>
 8005452:	ac06      	add	r4, sp, #24
 8005454:	f04f 0800 	mov.w	r8, #0
 8005458:	ab03      	add	r3, sp, #12
 800545a:	aa04      	add	r2, sp, #16
 800545c:	9903      	ldr	r1, [sp, #12]
 800545e:	4628      	mov	r0, r5
 8005460:	f7ff fc76 	bl	8004d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0d6      	beq.n	8005416 <ExFatFile::open(ExFatFile*, char const*, int)+0x22>
 8005468:	9903      	ldr	r1, [sp, #12]
 800546a:	9a05      	ldr	r2, [sp, #20]
 800546c:	7809      	ldrb	r1, [r1, #0]
 800546e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005472:	b1d1      	cbz	r1, 80054aa <ExFatFile::open(ExFatFile*, char const*, int)+0xb6>
 8005474:	f8cd 8000 	str.w	r8, [sp]
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff fe04 	bl	8005088 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
 8005480:	2800      	cmp	r0, #0
 8005482:	d0c8      	beq.n	8005416 <ExFatFile::open(ExFatFile*, char const*, int)+0x22>
 8005484:	aa06      	add	r2, sp, #24
 8005486:	462b      	mov	r3, r5
 8005488:	4614      	mov	r4, r2
 800548a:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800548e:	4616      	mov	r6, r2
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	3308      	adds	r3, #8
 8005496:	c603      	stmia	r6!, {r0, r1}
 8005498:	4563      	cmp	r3, ip
 800549a:	4632      	mov	r2, r6
 800549c:	d1f7      	bne.n	800548e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	6030      	str	r0, [r6, #0]
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7ff fc36 	bl	8004d14 <ExFatFile::close()>
 80054a8:	e7d6      	b.n	8005458 <ExFatFile::open(ExFatFile*, char const*, int)+0x64>
 80054aa:	9700      	str	r7, [sp, #0]
 80054ac:	4621      	mov	r1, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff fdea 	bl	8005088 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
 80054b4:	e7b0      	b.n	8005418 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>

080054b6 <ExFatFile::open(ExFatVolume*, char const*, int)>:
 80054b6:	b119      	cbz	r1, 80054c0 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
 80054b8:	f501 6188 	add.w	r1, r1, #1088	; 0x440
 80054bc:	f7ff bf9a 	b.w	80053f4 <ExFatFile::open(ExFatFile*, char const*, int)>
 80054c0:	4608      	mov	r0, r1
 80054c2:	4770      	bx	lr

080054c4 <exFatDirChecksum(unsigned char const*, unsigned short)>:
 80054c4:	2300      	movs	r3, #0
 80054c6:	b510      	push	{r4, lr}
 80054c8:	7804      	ldrb	r4, [r0, #0]
 80054ca:	03ca      	lsls	r2, r1, #15
 80054cc:	ea42 0151 	orr.w	r1, r2, r1, lsr #1
 80054d0:	5cc2      	ldrb	r2, [r0, r3]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	4411      	add	r1, r2
 80054d6:	b289      	uxth	r1, r1
 80054d8:	d108      	bne.n	80054ec <exFatDirChecksum(unsigned char const*, unsigned short)+0x28>
 80054da:	2c85      	cmp	r4, #133	; 0x85
 80054dc:	bf14      	ite	ne
 80054de:	2201      	movne	r2, #1
 80054e0:	2203      	moveq	r2, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	2b1f      	cmp	r3, #31
 80054e6:	d9f0      	bls.n	80054ca <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
 80054e8:	4608      	mov	r0, r1
 80054ea:	bd10      	pop	{r4, pc}
 80054ec:	2201      	movs	r2, #1
 80054ee:	e7f8      	b.n	80054e2 <exFatDirChecksum(unsigned char const*, unsigned short)+0x1e>

080054f0 <ExFatPartition::cacheSync()>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4604      	mov	r4, r0
 80054f4:	f000 faec 	bl	8005ad0 <FsCache::sync()>
 80054f8:	b150      	cbz	r0, 8005510 <ExFatPartition::cacheSync()+0x20>
 80054fa:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80054fe:	f000 fae7 	bl	8005ad0 <FsCache::sync()>
 8005502:	b128      	cbz	r0, 8005510 <ExFatPartition::cacheSync()+0x20>
 8005504:	f8d4 0438 	ldr.w	r0, [r4, #1080]	; 0x438
 8005508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550c:	f002 b879 	b.w	8007602 <SdSpiCard::syncDevice()>
 8005510:	2000      	movs	r0, #0
 8005512:	bd10      	pop	{r4, pc}

08005514 <ExFatFile::addCluster()>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	4604      	mov	r4, r0
 8005518:	69a1      	ldr	r1, [r4, #24]
 800551a:	6a00      	ldr	r0, [r0, #32]
 800551c:	b101      	cbz	r1, 8005520 <ExFatFile::addCluster()+0xc>
 800551e:	3101      	adds	r1, #1
 8005520:	2201      	movs	r2, #1
 8005522:	f000 fb0f 	bl	8005b44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
 8005526:	2801      	cmp	r0, #1
 8005528:	4605      	mov	r5, r0
 800552a:	d802      	bhi.n	8005532 <ExFatFile::addCluster()+0x1e>
 800552c:	2600      	movs	r6, #0
 800552e:	4630      	mov	r0, r6
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005532:	2301      	movs	r3, #1
 8005534:	4601      	mov	r1, r0
 8005536:	461a      	mov	r2, r3
 8005538:	6a20      	ldr	r0, [r4, #32]
 800553a:	f000 fbc5 	bl	8005cc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
 800553e:	4606      	mov	r6, r0
 8005540:	2800      	cmp	r0, #0
 8005542:	d0f3      	beq.n	800552c <ExFatFile::addCluster()+0x18>
 8005544:	69a2      	ldr	r2, [r4, #24]
 8005546:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800554a:	b92a      	cbnz	r2, 8005558 <ExFatFile::addCluster()+0x44>
 800554c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005550:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8005554:	61a5      	str	r5, [r4, #24]
 8005556:	e7ea      	b.n	800552e <ExFatFile::addCluster()+0x1a>
 8005558:	0659      	lsls	r1, r3, #25
 800555a:	d513      	bpl.n	8005584 <ExFatFile::addCluster()+0x70>
 800555c:	3201      	adds	r2, #1
 800555e:	42aa      	cmp	r2, r5
 8005560:	d0f8      	beq.n	8005554 <ExFatFile::addCluster()+0x40>
 8005562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005566:	69e1      	ldr	r1, [r4, #28]
 8005568:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 800556c:	69a3      	ldr	r3, [r4, #24]
 800556e:	6a20      	ldr	r0, [r4, #32]
 8005570:	428b      	cmp	r3, r1
 8005572:	d907      	bls.n	8005584 <ExFatFile::addCluster()+0x70>
 8005574:	1c4f      	adds	r7, r1, #1
 8005576:	463a      	mov	r2, r7
 8005578:	f000 fc67 	bl	8005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>
 800557c:	4639      	mov	r1, r7
 800557e:	2800      	cmp	r0, #0
 8005580:	d1f4      	bne.n	800556c <ExFatFile::addCluster()+0x58>
 8005582:	e7d3      	b.n	800552c <ExFatFile::addCluster()+0x18>
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	4629      	mov	r1, r5
 800558a:	6a20      	ldr	r0, [r4, #32]
 800558c:	f000 fc5d 	bl	8005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0cb      	beq.n	800552c <ExFatFile::addCluster()+0x18>
 8005594:	69a1      	ldr	r1, [r4, #24]
 8005596:	2900      	cmp	r1, #0
 8005598:	d0dc      	beq.n	8005554 <ExFatFile::addCluster()+0x40>
 800559a:	462a      	mov	r2, r5
 800559c:	6a20      	ldr	r0, [r4, #32]
 800559e:	f000 fc54 	bl	8005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d1d6      	bne.n	8005554 <ExFatFile::addCluster()+0x40>
 80055a6:	e7c1      	b.n	800552c <ExFatFile::addCluster()+0x18>

080055a8 <ExFatFile::syncDir()>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	2600      	movs	r6, #0
 80055ae:	46b2      	mov	sl, r6
 80055b0:	46b1      	mov	r9, r6
 80055b2:	b087      	sub	sp, #28
 80055b4:	af03      	add	r7, sp, #12
 80055b6:	f100 0824 	add.w	r8, r0, #36	; 0x24
 80055ba:	4605      	mov	r5, r0
 80055bc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80055c0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80055c4:	2200      	movs	r2, #0
 80055c6:	4639      	mov	r1, r7
 80055c8:	6a28      	ldr	r0, [r5, #32]
 80055ca:	f000 fbce 	bl	8005d6a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
 80055ce:	fa5f fb86 	uxtb.w	fp, r6
 80055d2:	4604      	mov	r4, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d038      	beq.n	800564a <ExFatFile::syncDir()+0xa2>
 80055d8:	7803      	ldrb	r3, [r0, #0]
 80055da:	2bc0      	cmp	r3, #192	; 0xc0
 80055dc:	d03d      	beq.n	800565a <ExFatFile::syncDir()+0xb2>
 80055de:	2bc1      	cmp	r3, #193	; 0xc1
 80055e0:	d023      	beq.n	800562a <ExFatFile::syncDir()+0x82>
 80055e2:	2b85      	cmp	r3, #133	; 0x85
 80055e4:	d131      	bne.n	800564a <ExFatFile::syncDir()+0xa2>
 80055e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80055ea:	f890 a001 	ldrb.w	sl, [r0, #1]
 80055ee:	f003 0337 	and.w	r3, r3, #55	; 0x37
 80055f2:	8083      	strh	r3, [r0, #4]
 80055f4:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <ExFatFile::syncDir()+0x10c>)
 80055f6:	6a29      	ldr	r1, [r5, #32]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b1b3      	cbz	r3, 800562a <ExFatFile::syncDir()+0x82>
 80055fc:	f891 220c 	ldrb.w	r2, [r1, #524]	; 0x20c
 8005600:	a802      	add	r0, sp, #8
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	f881 220c 	strb.w	r2, [r1, #524]	; 0x20c
 800560a:	f10d 0207 	add.w	r2, sp, #7
 800560e:	f10d 010a 	add.w	r1, sp, #10
 8005612:	4798      	blx	r3
 8005614:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005618:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800561c:	7563      	strb	r3, [r4, #21]
 800561e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8005622:	81a2      	strh	r2, [r4, #12]
 8005624:	81e3      	strh	r3, [r4, #14]
 8005626:	8222      	strh	r2, [r4, #16]
 8005628:	8263      	strh	r3, [r4, #18]
 800562a:	4649      	mov	r1, r9
 800562c:	4620      	mov	r0, r4
 800562e:	f7ff ff49 	bl	80054c4 <exFatDirChecksum(unsigned char const*, unsigned short)>
 8005632:	45da      	cmp	sl, fp
 8005634:	4681      	mov	r9, r0
 8005636:	6a28      	ldr	r0, [r5, #32]
 8005638:	d02b      	beq.n	8005692 <ExFatFile::syncDir()+0xea>
 800563a:	2220      	movs	r2, #32
 800563c:	4639      	mov	r1, r7
 800563e:	f000 fbe3 	bl	8005e08 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
 8005642:	2801      	cmp	r0, #1
 8005644:	f106 0601 	add.w	r6, r6, #1
 8005648:	d0bc      	beq.n	80055c4 <ExFatFile::syncDir()+0x1c>
 800564a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800564e:	2000      	movs	r0, #0
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8005658:	e028      	b.n	80056ac <ExFatFile::syncDir()+0x104>
 800565a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
 800565e:	7843      	ldrb	r3, [r0, #1]
 8005660:	0652      	lsls	r2, r2, #25
 8005662:	bf4c      	ite	mi
 8005664:	f043 0302 	orrmi.w	r3, r3, #2
 8005668:	f023 0302 	bicpl.w	r3, r3, #2
 800566c:	7043      	strb	r3, [r0, #1]
 800566e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8005672:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005676:	69eb      	ldr	r3, [r5, #28]
 8005678:	6143      	str	r3, [r0, #20]
 800567a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800567e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8005682:	6a2a      	ldr	r2, [r5, #32]
 8005684:	f892 320c 	ldrb.w	r3, [r2, #524]	; 0x20c
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	f882 320c 	strb.w	r3, [r2, #524]	; 0x20c
 8005690:	e7cb      	b.n	800562a <ExFatFile::syncDir()+0x82>
 8005692:	2201      	movs	r2, #1
 8005694:	4641      	mov	r1, r8
 8005696:	f000 fb68 	bl	8005d6a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
 800569a:	2800      	cmp	r0, #0
 800569c:	d0d5      	beq.n	800564a <ExFatFile::syncDir()+0xa2>
 800569e:	f8a0 9002 	strh.w	r9, [r0, #2]
 80056a2:	6a28      	ldr	r0, [r5, #32]
 80056a4:	f7ff ff24 	bl	80054f0 <ExFatPartition::cacheSync()>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d0ce      	beq.n	800564a <ExFatFile::syncDir()+0xa2>
 80056ac:	b007      	add	sp, #28
 80056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	20001b4c 	.word	0x20001b4c

080056b8 <ExFatFile::sync()>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80056be:	4604      	mov	r4, r0
 80056c0:	b90b      	cbnz	r3, 80056c6 <ExFatFile::sync()+0xe>
 80056c2:	2001      	movs	r0, #1
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80056ca:	061a      	lsls	r2, r3, #24
 80056cc:	d507      	bpl.n	80056de <ExFatFile::sync()+0x26>
 80056ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 80056d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056da:	f7ff bf65 	b.w	80055a8 <ExFatFile::syncDir()>
 80056de:	6a00      	ldr	r0, [r0, #32]
 80056e0:	f7ff ff06 	bl	80054f0 <ExFatPartition::cacheSync()>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1ec      	bne.n	80056c2 <ExFatFile::sync()+0xa>
 80056e8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 80056f4:	e7e6      	b.n	80056c4 <ExFatFile::sync()+0xc>

080056f6 <ExFatFile::addDirCluster()>:
 80056f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80056fe:	4604      	mov	r4, r0
 8005700:	0659      	lsls	r1, r3, #25
 8005702:	d53c      	bpl.n	800577e <ExFatFile::addDirCluster()+0x88>
 8005704:	6a00      	ldr	r0, [r0, #32]
 8005706:	f000 fbe7 	bl	8005ed8 <ExFatPartition::rootLength()>
 800570a:	6a23      	ldr	r3, [r4, #32]
 800570c:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8005710:	4418      	add	r0, r3
 8005712:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005716:	d239      	bcs.n	800578c <ExFatFile::addDirCluster()+0x96>
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff fefb 	bl	8005514 <ExFatFile::addCluster()>
 800571e:	b3a8      	cbz	r0, 800578c <ExFatFile::addDirCluster()+0x96>
 8005720:	6a26      	ldr	r6, [r4, #32]
 8005722:	f896 320c 	ldrb.w	r3, [r6, #524]	; 0x20c
 8005726:	f506 7503 	add.w	r5, r6, #524	; 0x20c
 800572a:	07da      	lsls	r2, r3, #31
 800572c:	d429      	bmi.n	8005782 <ExFatFile::addDirCluster()+0x8c>
 800572e:	2700      	movs	r7, #0
 8005730:	f04f 0801 	mov.w	r8, #1
 8005734:	4628      	mov	r0, r5
 8005736:	f506 7606 	add.w	r6, r6, #536	; 0x218
 800573a:	f000 f9c3 	bl	8005ac4 <FsCache::invalidate()>
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	2100      	movs	r1, #0
 8005744:	4630      	mov	r0, r6
 8005746:	f002 ff57 	bl	80085f8 <memset>
 800574a:	6a23      	ldr	r3, [r4, #32]
 800574c:	69a5      	ldr	r5, [r4, #24]
 800574e:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
 8005752:	3d02      	subs	r5, #2
 8005754:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8005758:	4095      	lsls	r5, r2
 800575a:	441d      	add	r5, r3
 800575c:	6a20      	ldr	r0, [r4, #32]
 800575e:	f890 343d 	ldrb.w	r3, [r0, #1085]	; 0x43d
 8005762:	fa08 f303 	lsl.w	r3, r8, r3
 8005766:	42bb      	cmp	r3, r7
 8005768:	d913      	bls.n	8005792 <ExFatFile::addDirCluster()+0x9c>
 800576a:	2301      	movs	r3, #1
 800576c:	4632      	mov	r2, r6
 800576e:	19e9      	adds	r1, r5, r7
 8005770:	f8d0 0438 	ldr.w	r0, [r0, #1080]	; 0x438
 8005774:	f001 ff91 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8005778:	b140      	cbz	r0, 800578c <ExFatFile::addDirCluster()+0x96>
 800577a:	3701      	adds	r7, #1
 800577c:	e7ee      	b.n	800575c <ExFatFile::addDirCluster()+0x66>
 800577e:	6880      	ldr	r0, [r0, #8]
 8005780:	e7c3      	b.n	800570a <ExFatFile::addDirCluster()+0x14>
 8005782:	4628      	mov	r0, r5
 8005784:	f000 f9a4 	bl	8005ad0 <FsCache::sync()>
 8005788:	2800      	cmp	r0, #0
 800578a:	d1d0      	bne.n	800572e <ExFatFile::addDirCluster()+0x38>
 800578c:	2000      	movs	r0, #0
 800578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005792:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005796:	065b      	lsls	r3, r3, #25
 8005798:	d417      	bmi.n	80057ca <ExFatFile::addDirCluster()+0xd4>
 800579a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800579e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80057a6:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 80057aa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80057ae:	1855      	adds	r5, r2, r1
 80057b0:	f143 0600 	adc.w	r6, r3, #0
 80057b4:	e9c4 5602 	strd	r5, r6, [r4, #8]
 80057b8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80057bc:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 80057c0:	1855      	adds	r5, r2, r1
 80057c2:	f143 0600 	adc.w	r6, r3, #0
 80057c6:	e9c4 5604 	strd	r5, r6, [r4, #16]
 80057ca:	4620      	mov	r0, r4
 80057cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d0:	f7ff bf72 	b.w	80056b8 <ExFatFile::sync()>

080057d4 <ExFatFile::truncate()>:
 80057d4:	e92d 48f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, fp, lr}
 80057d8:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 80057dc:	4604      	mov	r4, r0
 80057de:	0793      	lsls	r3, r2, #30
 80057e0:	d403      	bmi.n	80057ea <ExFatFile::truncate()+0x16>
 80057e2:	2000      	movs	r0, #0
 80057e4:	b002      	add	sp, #8
 80057e6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80057ea:	69c3      	ldr	r3, [r0, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05b      	beq.n	80058a8 <ExFatFile::truncate()+0xd4>
 80057f0:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 80057f4:	6985      	ldr	r5, [r0, #24]
 80057f6:	d039      	beq.n	800586c <ExFatFile::truncate()+0x98>
 80057f8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 80057fc:	6a22      	ldr	r2, [r4, #32]
 80057fe:	f110 3bff 	adds.w	fp, r0, #4294967295
 8005802:	f892 243d 	ldrb.w	r2, [r2, #1085]	; 0x43d
 8005806:	f141 3cff 	adc.w	ip, r1, #4294967295
 800580a:	3209      	adds	r2, #9
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	f1c2 0720 	rsb	r7, r2, #32
 8005812:	f1a2 0620 	sub.w	r6, r2, #32
 8005816:	fa0c f707 	lsl.w	r7, ip, r7
 800581a:	fa2b f202 	lsr.w	r2, fp, r2
 800581e:	433a      	orrs	r2, r7
 8005820:	fa2c f606 	lsr.w	r6, ip, r6
 8005824:	4332      	orrs	r2, r6
 8005826:	3201      	adds	r2, #1
 8005828:	b1ad      	cbz	r5, 8005856 <ExFatFile::truncate()+0x82>
 800582a:	3b01      	subs	r3, #1
 800582c:	1c69      	adds	r1, r5, #1
 800582e:	1b5d      	subs	r5, r3, r5
 8005830:	9101      	str	r1, [sp, #4]
 8005832:	442a      	add	r2, r5
 8005834:	b992      	cbnz	r2, 800585c <ExFatFile::truncate()+0x88>
 8005836:	e9d4 2300 	ldrd	r2, r3, [r4]
 800583a:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800583e:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8005842:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005846:	4620      	mov	r0, r4
 8005848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8005850:	f7ff ff32 	bl	80056b8 <ExFatFile::sync()>
 8005854:	e7c6      	b.n	80057e4 <ExFatFile::truncate()+0x10>
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	61e5      	str	r5, [r4, #28]
 800585a:	e7eb      	b.n	8005834 <ExFatFile::truncate()+0x60>
 800585c:	2300      	movs	r3, #0
 800585e:	9901      	ldr	r1, [sp, #4]
 8005860:	6a20      	ldr	r0, [r4, #32]
 8005862:	f000 fa31 	bl	8005cc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
 8005866:	2800      	cmp	r0, #0
 8005868:	d1e5      	bne.n	8005836 <ExFatFile::truncate()+0x62>
 800586a:	e7ba      	b.n	80057e2 <ExFatFile::truncate()+0xe>
 800586c:	b1cd      	cbz	r5, 80058a2 <ExFatFile::truncate()+0xce>
 800586e:	aa02      	add	r2, sp, #8
 8005870:	f842 1d04 	str.w	r1, [r2, #-4]!
 8005874:	6a00      	ldr	r0, [r0, #32]
 8005876:	4629      	mov	r1, r5
 8005878:	f000 fa91 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 800587c:	b240      	sxtb	r0, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	dbaf      	blt.n	80057e2 <ExFatFile::truncate()+0xe>
 8005882:	d007      	beq.n	8005894 <ExFatFile::truncate()+0xc0>
 8005884:	f04f 32ff 	mov.w	r2, #4294967295
 8005888:	69a1      	ldr	r1, [r4, #24]
 800588a:	6a20      	ldr	r0, [r4, #32]
 800588c:	f000 fadd 	bl	8005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>
 8005890:	2800      	cmp	r0, #0
 8005892:	d0a6      	beq.n	80057e2 <ExFatFile::truncate()+0xe>
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	2900      	cmp	r1, #0
 8005898:	d0cd      	beq.n	8005836 <ExFatFile::truncate()+0x62>
 800589a:	6a20      	ldr	r0, [r4, #32]
 800589c:	f000 faf2 	bl	8005e84 <ExFatPartition::freeChain(unsigned long)>
 80058a0:	e7e1      	b.n	8005866 <ExFatFile::truncate()+0x92>
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	61c5      	str	r5, [r0, #28]
 80058a6:	e7f5      	b.n	8005894 <ExFatFile::truncate()+0xc0>
 80058a8:	2001      	movs	r0, #1
 80058aa:	e79b      	b.n	80057e4 <ExFatFile::truncate()+0x10>

080058ac <ExFatFile::write(void const*, unsigned int)>:
 80058ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80058b4:	468a      	mov	sl, r1
 80058b6:	0799      	lsls	r1, r3, #30
 80058b8:	4604      	mov	r4, r0
 80058ba:	9200      	str	r2, [sp, #0]
 80058bc:	d566      	bpl.n	800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 80058be:	071a      	lsls	r2, r3, #28
 80058c0:	d45e      	bmi.n	8005980 <ExFatFile::write(void const*, unsigned int)+0xd4>
 80058c2:	f104 0318 	add.w	r3, r4, #24
 80058c6:	f8dd 9000 	ldr.w	r9, [sp]
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	e9d4 6700 	ldrd	r6, r7, [r4]
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	f000 80dd 	beq.w	8005a92 <ExFatFile::write(void const*, unsigned int)+0x1e6>
 80058d8:	6a20      	ldr	r0, [r4, #32]
 80058da:	f8d0 5430 	ldr.w	r5, [r0, #1072]	; 0x430
 80058de:	4035      	ands	r5, r6
 80058e0:	f3c5 0608 	ubfx	r6, r5, #0, #9
 80058e4:	bb25      	cbnz	r5, 8005930 <ExFatFile::write(void const*, unsigned int)+0x84>
 80058e6:	69a1      	ldr	r1, [r4, #24]
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d062      	beq.n	80059b2 <ExFatFile::write(void const*, unsigned int)+0x106>
 80058ec:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80058f0:	065b      	lsls	r3, r3, #25
 80058f2:	d558      	bpl.n	80059a6 <ExFatFile::write(void const*, unsigned int)+0xfa>
 80058f4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80058f8:	f112 37ff 	adds.w	r7, r2, #4294967295
 80058fc:	f143 38ff 	adc.w	r8, r3, #4294967295
 8005900:	f890 343d 	ldrb.w	r3, [r0, #1085]	; 0x43d
 8005904:	3309      	adds	r3, #9
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f1c3 0020 	rsb	r0, r3, #32
 800590c:	f1a3 0220 	sub.w	r2, r3, #32
 8005910:	fa08 f000 	lsl.w	r0, r8, r0
 8005914:	fa27 f303 	lsr.w	r3, r7, r3
 8005918:	fa28 f202 	lsr.w	r2, r8, r2
 800591c:	4303      	orrs	r3, r0
 800591e:	4313      	orrs	r3, r2
 8005920:	69e2      	ldr	r2, [r4, #28]
 8005922:	4413      	add	r3, r2
 8005924:	428b      	cmp	r3, r1
 8005926:	d83b      	bhi.n	80059a0 <ExFatFile::write(void const*, unsigned int)+0xf4>
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff fdf3 	bl	8005514 <ExFatFile::addCluster()>
 800592e:	b368      	cbz	r0, 800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 8005930:	6a20      	ldr	r0, [r4, #32]
 8005932:	69a1      	ldr	r1, [r4, #24]
 8005934:	f890 243d 	ldrb.w	r2, [r0, #1085]	; 0x43d
 8005938:	3902      	subs	r1, #2
 800593a:	ea4f 2c55 	mov.w	ip, r5, lsr #9
 800593e:	4091      	lsls	r1, r2
 8005940:	f8d0 7424 	ldr.w	r7, [r0, #1060]	; 0x424
 8005944:	4461      	add	r1, ip
 8005946:	440f      	add	r7, r1
 8005948:	2e00      	cmp	r6, #0
 800594a:	d13e      	bne.n	80059ca <ExFatFile::write(void const*, unsigned int)+0x11e>
 800594c:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 8005950:	d33b      	bcc.n	80059ca <ExFatFile::write(void const*, unsigned int)+0x11e>
 8005952:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
 8005956:	f8d0 1214 	ldr.w	r1, [r0, #532]	; 0x214
 800595a:	d27c      	bcs.n	8005a56 <ExFatFile::write(void const*, unsigned int)+0x1aa>
 800595c:	428f      	cmp	r7, r1
 800595e:	d103      	bne.n	8005968 <ExFatFile::write(void const*, unsigned int)+0xbc>
 8005960:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005964:	f000 f8ae 	bl	8005ac4 <FsCache::invalidate()>
 8005968:	6a20      	ldr	r0, [r4, #32]
 800596a:	2301      	movs	r3, #1
 800596c:	4652      	mov	r2, sl
 800596e:	4639      	mov	r1, r7
 8005970:	f8d0 0438 	ldr.w	r0, [r0, #1080]	; 0x438
 8005974:	f001 fe91 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8005978:	b140      	cbz	r0, 800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 800597a:	f44f 7800 	mov.w	r8, #512	; 0x200
 800597e:	e04d      	b.n	8005a1c <ExFatFile::write(void const*, unsigned int)+0x170>
 8005980:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8005984:	f7ff fb03 	bl	8004f8e <ExFatFile::seekSet(unsigned long long)>
 8005988:	2800      	cmp	r0, #0
 800598a:	d19a      	bne.n	80058c2 <ExFatFile::write(void const*, unsigned int)+0x16>
 800598c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	e08b      	b.n	8005ab8 <ExFatFile::write(void const*, unsigned int)+0x20c>
 80059a0:	3101      	adds	r1, #1
 80059a2:	61a1      	str	r1, [r4, #24]
 80059a4:	e7c4      	b.n	8005930 <ExFatFile::write(void const*, unsigned int)+0x84>
 80059a6:	9a01      	ldr	r2, [sp, #4]
 80059a8:	f000 f9f9 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d0bb      	beq.n	8005928 <ExFatFile::write(void const*, unsigned int)+0x7c>
 80059b0:	e7be      	b.n	8005930 <ExFatFile::write(void const*, unsigned int)+0x84>
 80059b2:	69e3      	ldr	r3, [r4, #28]
 80059b4:	b93b      	cbnz	r3, 80059c6 <ExFatFile::write(void const*, unsigned int)+0x11a>
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff fdac 	bl	8005514 <ExFatFile::addCluster()>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0e5      	beq.n	800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 80059c0:	69a3      	ldr	r3, [r4, #24]
 80059c2:	61e3      	str	r3, [r4, #28]
 80059c4:	e7b4      	b.n	8005930 <ExFatFile::write(void const*, unsigned int)+0x84>
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	e7b2      	b.n	8005930 <ExFatFile::write(void const*, unsigned int)+0x84>
 80059ca:	f5c6 7800 	rsb	r8, r6, #512	; 0x200
 80059ce:	45c8      	cmp	r8, r9
 80059d0:	bf28      	it	cs
 80059d2:	46c8      	movcs	r8, r9
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d13c      	bne.n	8005a52 <ExFatFile::write(void const*, unsigned int)+0x1a6>
 80059d8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80059dc:	e9d4 bc00 	ldrd	fp, ip, [r4]
 80059e0:	459c      	cmp	ip, r3
 80059e2:	bf08      	it	eq
 80059e4:	4593      	cmpeq	fp, r2
 80059e6:	bf34      	ite	cc
 80059e8:	2201      	movcc	r2, #1
 80059ea:	2203      	movcs	r2, #3
 80059ec:	4639      	mov	r1, r7
 80059ee:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 80059f2:	f000 f881 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d0c8      	beq.n	800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 80059fa:	4642      	mov	r2, r8
 80059fc:	4651      	mov	r1, sl
 80059fe:	4430      	add	r0, r6
 8005a00:	eb06 0b08 	add.w	fp, r6, r8
 8005a04:	f002 fd82 	bl	800850c <memcpy>
 8005a08:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8005a0c:	d106      	bne.n	8005a1c <ExFatFile::write(void const*, unsigned int)+0x170>
 8005a0e:	6a20      	ldr	r0, [r4, #32]
 8005a10:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005a14:	f000 f85c 	bl	8005ad0 <FsCache::sync()>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d0b7      	beq.n	800598c <ExFatFile::write(void const*, unsigned int)+0xe0>
 8005a1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005a20:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005a24:	eb10 0508 	adds.w	r5, r0, r8
 8005a28:	f141 0600 	adc.w	r6, r1, #0
 8005a2c:	42b3      	cmp	r3, r6
 8005a2e:	bf08      	it	eq
 8005a30:	42aa      	cmpeq	r2, r5
 8005a32:	e9c4 5600 	strd	r5, r6, [r4]
 8005a36:	44c2      	add	sl, r8
 8005a38:	eba9 0908 	sub.w	r9, r9, r8
 8005a3c:	f4bf af46 	bcs.w	80058cc <ExFatFile::write(void const*, unsigned int)+0x20>
 8005a40:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005a44:	e9c4 5604 	strd	r5, r6, [r4, #16]
 8005a48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8005a50:	e73c      	b.n	80058cc <ExFatFile::write(void const*, unsigned int)+0x20>
 8005a52:	2201      	movs	r2, #1
 8005a54:	e7ca      	b.n	80059ec <ExFatFile::write(void const*, unsigned int)+0x140>
 8005a56:	2501      	movs	r5, #1
 8005a58:	fa05 f202 	lsl.w	r2, r5, r2
 8005a5c:	eba2 060c 	sub.w	r6, r2, ip
 8005a60:	ea4f 2359 	mov.w	r3, r9, lsr #9
 8005a64:	429e      	cmp	r6, r3
 8005a66:	bf28      	it	cs
 8005a68:	461e      	movcs	r6, r3
 8005a6a:	428f      	cmp	r7, r1
 8005a6c:	ea4f 2846 	mov.w	r8, r6, lsl #9
 8005a70:	d806      	bhi.n	8005a80 <ExFatFile::write(void const*, unsigned int)+0x1d4>
 8005a72:	19bb      	adds	r3, r7, r6
 8005a74:	428b      	cmp	r3, r1
 8005a76:	d903      	bls.n	8005a80 <ExFatFile::write(void const*, unsigned int)+0x1d4>
 8005a78:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005a7c:	f000 f822 	bl	8005ac4 <FsCache::invalidate()>
 8005a80:	6a20      	ldr	r0, [r4, #32]
 8005a82:	4633      	mov	r3, r6
 8005a84:	4652      	mov	r2, sl
 8005a86:	4639      	mov	r1, r7
 8005a88:	f8d0 0438 	ldr.w	r0, [r0, #1080]	; 0x438
 8005a8c:	f001 fe05 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8005a90:	e7c2      	b.n	8005a18 <ExFatFile::write(void const*, unsigned int)+0x16c>
 8005a92:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005a96:	42bb      	cmp	r3, r7
 8005a98:	bf08      	it	eq
 8005a9a:	42b2      	cmpeq	r2, r6
 8005a9c:	d208      	bcs.n	8005ab0 <ExFatFile::write(void const*, unsigned int)+0x204>
 8005a9e:	e9c4 6702 	strd	r6, r7, [r4, #8]
 8005aa2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aaa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8005aae:	e003      	b.n	8005ab8 <ExFatFile::write(void const*, unsigned int)+0x20c>
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <ExFatFile::write(void const*, unsigned int)+0x214>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f4      	bne.n	8005aa2 <ExFatFile::write(void const*, unsigned int)+0x1f6>
 8005ab8:	9800      	ldr	r0, [sp, #0]
 8005aba:	b003      	add	sp, #12
 8005abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac0:	20001b4c 	.word	0x20001b4c

08005ac4 <FsCache::invalidate()>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	7003      	strb	r3, [r0, #0]
 8005ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8005acc:	6083      	str	r3, [r0, #8]
 8005ace:	4770      	bx	lr

08005ad0 <FsCache::sync()>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	7803      	ldrb	r3, [r0, #0]
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	07db      	lsls	r3, r3, #31
 8005ad8:	d50c      	bpl.n	8005af4 <FsCache::sync()+0x24>
 8005ada:	f100 020c 	add.w	r2, r0, #12
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8005ae4:	f001 fdd9 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8005ae8:	b118      	cbz	r0, 8005af2 <FsCache::sync()+0x22>
 8005aea:	7823      	ldrb	r3, [r4, #0]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	7023      	strb	r3, [r4, #0]
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	2001      	movs	r0, #1
 8005af6:	e7fc      	b.n	8005af2 <FsCache::sync()+0x22>

08005af8 <FsCache::get(unsigned long, unsigned char)>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	6843      	ldr	r3, [r0, #4]
 8005afc:	4604      	mov	r4, r0
 8005afe:	460e      	mov	r6, r1
 8005b00:	4615      	mov	r5, r2
 8005b02:	b90b      	cbnz	r3, 8005b08 <FsCache::get(unsigned long, unsigned char)+0x10>
 8005b04:	2000      	movs	r0, #0
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	6883      	ldr	r3, [r0, #8]
 8005b0a:	428b      	cmp	r3, r1
 8005b0c:	d008      	beq.n	8005b20 <FsCache::get(unsigned long, unsigned char)+0x28>
 8005b0e:	f7ff ffdf 	bl	8005ad0 <FsCache::sync()>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0f6      	beq.n	8005b04 <FsCache::get(unsigned long, unsigned char)+0xc>
 8005b16:	07ab      	lsls	r3, r5, #30
 8005b18:	d50a      	bpl.n	8005b30 <FsCache::get(unsigned long, unsigned char)+0x38>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60a6      	str	r6, [r4, #8]
 8005b1e:	7023      	strb	r3, [r4, #0]
 8005b20:	4620      	mov	r0, r4
 8005b22:	7823      	ldrb	r3, [r4, #0]
 8005b24:	f005 0501 	and.w	r5, r5, #1
 8005b28:	431d      	orrs	r5, r3
 8005b2a:	f800 5b0c 	strb.w	r5, [r0], #12
 8005b2e:	e7ea      	b.n	8005b06 <FsCache::get(unsigned long, unsigned char)+0xe>
 8005b30:	2301      	movs	r3, #1
 8005b32:	f104 020c 	add.w	r2, r4, #12
 8005b36:	4631      	mov	r1, r6
 8005b38:	6860      	ldr	r0, [r4, #4]
 8005b3a:	f001 fd77 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d1eb      	bne.n	8005b1a <FsCache::get(unsigned long, unsigned char)+0x22>
 8005b42:	e7df      	b.n	8005b04 <FsCache::get(unsigned long, unsigned char)+0xc>

08005b44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 8005b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	4680      	mov	r8, r0
 8005b4a:	4693      	mov	fp, r2
 8005b4c:	468a      	mov	sl, r1
 8005b4e:	b359      	cbz	r1, 8005ba8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
 8005b50:	1e8d      	subs	r5, r1, #2
 8005b52:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
 8005b56:	2401      	movs	r4, #1
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	bf98      	it	ls
 8005b5c:	2500      	movls	r5, #0
 8005b5e:	462f      	mov	r7, r5
 8005b60:	462e      	mov	r6, r5
 8005b62:	f005 0307 	and.w	r3, r5, #7
 8005b66:	409c      	lsls	r4, r3
 8005b68:	f3c5 09c8 	ubfx	r9, r5, #3, #9
 8005b6c:	b2e4      	uxtb	r4, r4
 8005b6e:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
 8005b72:	2200      	movs	r2, #0
 8005b74:	eb01 3116 	add.w	r1, r1, r6, lsr #12
 8005b78:	4640      	mov	r0, r8
 8005b7a:	f7ff ffbd 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005b7e:	b188      	cbz	r0, 8005ba4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x60>
 8005b80:	f810 3009 	ldrb.w	r3, [r0, r9]
 8005b84:	4223      	tst	r3, r4
 8005b86:	f106 0601 	add.w	r6, r6, #1
 8005b8a:	d110      	bne.n	8005bae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6a>
 8005b8c:	1bf2      	subs	r2, r6, r7
 8005b8e:	455a      	cmp	r2, fp
 8005b90:	d10e      	bne.n	8005bb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6c>
 8005b92:	f1ba 0f00 	cmp.w	sl, #0
 8005b96:	d104      	bne.n	8005ba2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5e>
 8005b98:	f1bb 0f01 	cmp.w	fp, #1
 8005b9c:	bf08      	it	eq
 8005b9e:	f8c8 7418 	streq.w	r7, [r8, #1048]	; 0x418
 8005ba2:	1cb8      	adds	r0, r7, #2
 8005ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba8:	f8d0 5418 	ldr.w	r5, [r0, #1048]	; 0x418
 8005bac:	e7d1      	b.n	8005b52 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
 8005bae:	4637      	mov	r7, r6
 8005bb0:	42b5      	cmp	r5, r6
 8005bb2:	d017      	beq.n	8005be4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
 8005bb4:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
 8005bb8:	42b2      	cmp	r2, r6
 8005bba:	d90e      	bls.n	8005bda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
 8005bbc:	0064      	lsls	r4, r4, #1
 8005bbe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005bc2:	d1df      	bne.n	8005b84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
 8005bc4:	f109 0301 	add.w	r3, r9, #1
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	f04f 0900 	mov.w	r9, #0
 8005bd0:	f04f 0401 	mov.w	r4, #1
 8005bd4:	d2cb      	bcs.n	8005b6e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
 8005bd6:	4699      	mov	r9, r3
 8005bd8:	e7d2      	b.n	8005b80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
 8005bda:	2700      	movs	r7, #0
 8005bdc:	f44f 7900 	mov.w	r9, #512	; 0x200
 8005be0:	463e      	mov	r6, r7
 8005be2:	e7ef      	b.n	8005bc4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x80>
 8005be4:	2001      	movs	r0, #1
 8005be6:	e7dd      	b.n	8005ba4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x60>

08005be8 <ExFatPartition::init(SdSpiCard*, unsigned char)>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	4616      	mov	r6, r2
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f500 7703 	add.w	r7, r0, #524	; 0x20c
 8005bf6:	f8c0 1438 	str.w	r1, [r0, #1080]	; 0x438
 8005bfa:	6041      	str	r1, [r0, #4]
 8005bfc:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
 8005c00:	f880 243c 	strb.w	r2, [r0, #1084]	; 0x43c
 8005c04:	7002      	strb	r2, [r0, #0]
 8005c06:	6083      	str	r3, [r0, #8]
 8005c08:	f880 220c 	strb.w	r2, [r0, #524]	; 0x20c
 8005c0c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8005c10:	4604      	mov	r4, r0
 8005c12:	4611      	mov	r1, r2
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff ff6f 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005c1a:	2e04      	cmp	r6, #4
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	d901      	bls.n	8005c24 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x3c>
 8005c20:	2000      	movs	r0, #0
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d0fb      	beq.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c28:	b1b6      	cbz	r6, 8005c58 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x70>
 8005c2a:	1e73      	subs	r3, r6, #1
 8005c2c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8005c30:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
 8005c34:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8005c38:	d1f2      	bne.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c3a:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ee      	beq.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c42:	eb00 1506 	add.w	r5, r0, r6, lsl #4
 8005c46:	f8d5 61b6 	ldr.w	r6, [r5, #438]	; 0x1b6
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	f7ff ff53 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005c52:	4605      	mov	r5, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d0e3      	beq.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c58:	491a      	ldr	r1, [pc, #104]	; (8005cc4 <ExFatPartition::init(SdSpiCard*, unsigned char)+0xdc>)
 8005c5a:	2205      	movs	r2, #5
 8005c5c:	1ce8      	adds	r0, r5, #3
 8005c5e:	f002 fd61 	bl	8008724 <strncmp>
 8005c62:	4601      	mov	r1, r0
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d1db      	bne.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c68:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 8005c6c:	2b09      	cmp	r3, #9
 8005c6e:	d1d7      	bne.n	8005c20 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x38>
 8005c70:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005c72:	4433      	add	r3, r6
 8005c74:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
 8005c78:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005c7a:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
 8005c7e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005c80:	441e      	add	r6, r3
 8005c82:	f8c4 6424 	str.w	r6, [r4, #1060]	; 0x424
 8005c86:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8005c88:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
 8005c8c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005c8e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 8005c92:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
 8005c96:	2501      	movs	r5, #1
 8005c98:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
 8005c9c:	3309      	adds	r3, #9
 8005c9e:	fa05 f303 	lsl.w	r3, r5, r3
 8005ca2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 8005cac:	f8c4 0418 	str.w	r0, [r4, #1048]	; 0x418
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f7ff ff46 	bl	8005b44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
 8005cc0:	e7af      	b.n	8005c22 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x3a>
 8005cc2:	bf00      	nop
 8005cc4:	0800aba4 	.word	0x0800aba4

08005cc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	4606      	mov	r6, r0
 8005cce:	1e8c      	subs	r4, r1, #2
 8005cd0:	f8d0 0428 	ldr.w	r0, [r0, #1064]	; 0x428
 8005cd4:	18a1      	adds	r1, r4, r2
 8005cd6:	4281      	cmp	r1, r0
 8005cd8:	4617      	mov	r7, r2
 8005cda:	4698      	mov	r8, r3
 8005cdc:	d840      	bhi.n	8005d60 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
 8005cde:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	d036      	beq.n	8005d56 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8e>
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	d306      	bcc.n	8005cfa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x32>
 8005cec:	4299      	cmp	r1, r3
 8005cee:	d904      	bls.n	8005cfa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x32>
 8005cf0:	4281      	cmp	r1, r0
 8005cf2:	bf28      	it	cs
 8005cf4:	2100      	movcs	r1, #0
 8005cf6:	f8c6 1418 	str.w	r1, [r6, #1048]	; 0x418
 8005cfa:	2501      	movs	r5, #1
 8005cfc:	f004 0307 	and.w	r3, r4, #7
 8005d00:	f8d6 1424 	ldr.w	r1, [r6, #1060]	; 0x424
 8005d04:	409d      	lsls	r5, r3
 8005d06:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 8005d0a:	b2ed      	uxtb	r5, r5
 8005d0c:	f3c4 04c8 	ubfx	r4, r4, #3, #9
 8005d10:	2201      	movs	r2, #1
 8005d12:	4630      	mov	r0, r6
 8005d14:	f101 0901 	add.w	r9, r1, #1
 8005d18:	f7ff feee 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005d1c:	b300      	cbz	r0, 8005d60 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
 8005d1e:	462a      	mov	r2, r5
 8005d20:	1903      	adds	r3, r0, r4
 8005d22:	7819      	ldrb	r1, [r3, #0]
 8005d24:	4211      	tst	r1, r2
 8005d26:	bf14      	ite	ne
 8005d28:	2401      	movne	r4, #1
 8005d2a:	2400      	moveq	r4, #0
 8005d2c:	4544      	cmp	r4, r8
 8005d2e:	d017      	beq.n	8005d60 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
 8005d30:	4051      	eors	r1, r2
 8005d32:	3f01      	subs	r7, #1
 8005d34:	7019      	strb	r1, [r3, #0]
 8005d36:	d016      	beq.n	8005d66 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
 8005d38:	0052      	lsls	r2, r2, #1
 8005d3a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8005d3e:	d1f0      	bne.n	8005d22 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
 8005d40:	4614      	mov	r4, r2
 8005d42:	2201      	movs	r2, #1
 8005d44:	3301      	adds	r3, #1
 8005d46:	eba3 0c00 	sub.w	ip, r3, r0
 8005d4a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4615      	mov	r5, r2
 8005d52:	d1e6      	bne.n	8005d22 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
 8005d54:	e7dc      	b.n	8005d10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x48>
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	bf88      	it	hi
 8005d5a:	f8c6 4418 	strhi.w	r4, [r6, #1048]	; 0x418
 8005d5e:	e7cc      	b.n	8005cfa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x32>
 8005d60:	2000      	movs	r0, #0
 8005d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d66:	2001      	movs	r0, #1
 8005d68:	e7fb      	b.n	8005d62 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9a>

08005d6a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
 8005d6a:	b538      	push	{r3, r4, r5, lr}
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
 8005d72:	6849      	ldr	r1, [r1, #4]
 8005d74:	f890 543d 	ldrb.w	r5, [r0, #1085]	; 0x43d
 8005d78:	4019      	ands	r1, r3
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005d80:	3b02      	subs	r3, #2
 8005d82:	40ab      	lsls	r3, r5
 8005d84:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8005d88:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 8005d8c:	4419      	add	r1, r3
 8005d8e:	f7ff feb3 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005d92:	b118      	cbz	r0, 8005d9c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	4418      	add	r0, r3
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}

08005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
 8005d9e:	b538      	push	{r3, r4, r5, lr}
 8005da0:	f8d0 3428 	ldr.w	r3, [r0, #1064]	; 0x428
 8005da4:	460c      	mov	r4, r1
 8005da6:	3301      	adds	r3, #1
 8005da8:	428b      	cmp	r3, r1
 8005daa:	4615      	mov	r5, r2
 8005dac:	d201      	bcs.n	8005db2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>
 8005dae:	20ff      	movs	r0, #255	; 0xff
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	f8d0 141c 	ldr.w	r1, [r0, #1052]	; 0x41c
 8005db6:	2200      	movs	r2, #0
 8005db8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005dbc:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005dc0:	f7ff fe9a 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d0f2      	beq.n	8005dae <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
 8005dc8:	00a4      	lsls	r4, r4, #2
 8005dca:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8005dce:	5903      	ldr	r3, [r0, r4]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	bf1a      	itte	ne
 8005dd4:	602b      	strne	r3, [r5, #0]
 8005dd6:	2001      	movne	r0, #1
 8005dd8:	2000      	moveq	r0, #0
 8005dda:	e7e9      	b.n	8005db0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>

08005ddc <ExFatPartition::chainSize(unsigned long)>:
 8005ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dde:	4606      	mov	r6, r0
 8005de0:	2400      	movs	r4, #0
 8005de2:	ad02      	add	r5, sp, #8
 8005de4:	f845 1d04 	str.w	r1, [r5, #-4]!
 8005de8:	462a      	mov	r2, r5
 8005dea:	9901      	ldr	r1, [sp, #4]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff ffd6 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 8005df2:	b240      	sxtb	r0, r0
 8005df4:	2800      	cmp	r0, #0
 8005df6:	db05      	blt.n	8005e04 <ExFatPartition::chainSize(unsigned long)+0x28>
 8005df8:	f104 0401 	add.w	r4, r4, #1
 8005dfc:	d1f4      	bne.n	8005de8 <ExFatPartition::chainSize(unsigned long)+0xc>
 8005dfe:	4620      	mov	r0, r4
 8005e00:	b002      	add	sp, #8
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	2400      	movs	r4, #0
 8005e06:	e7fa      	b.n	8005dfe <ExFatPartition::chainSize(unsigned long)+0x22>

08005e08 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460d      	mov	r5, r1
 8005e0e:	684b      	ldr	r3, [r1, #4]
 8005e10:	f8d0 4430 	ldr.w	r4, [r0, #1072]	; 0x430
 8005e14:	401c      	ands	r4, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	604b      	str	r3, [r1, #4]
 8005e1a:	f890 343d 	ldrb.w	r3, [r0, #1085]	; 0x43d
 8005e1e:	4414      	add	r4, r2
 8005e20:	3309      	adds	r3, #9
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	40dc      	lsrs	r4, r3
 8005e26:	b174      	cbz	r4, 8005e46 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
 8005e28:	7a2b      	ldrb	r3, [r5, #8]
 8005e2a:	6829      	ldr	r1, [r5, #0]
 8005e2c:	b11b      	cbz	r3, 8005e36 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
 8005e2e:	3101      	adds	r1, #1
 8005e30:	6029      	str	r1, [r5, #0]
 8005e32:	3c01      	subs	r4, #1
 8005e34:	e7f7      	b.n	8005e26 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
 8005e36:	462a      	mov	r2, r5
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ffb0 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 8005e3e:	b240      	sxtb	r0, r0
 8005e40:	2801      	cmp	r0, #1
 8005e42:	d0f6      	beq.n	8005e32 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2a>
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	2001      	movs	r0, #1
 8005e48:	e7fc      	b.n	8005e44 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>

08005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>:
 8005e4a:	2901      	cmp	r1, #1
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4615      	mov	r5, r2
 8005e52:	d801      	bhi.n	8005e58 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
 8005e54:	2000      	movs	r0, #0
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	f8d0 3428 	ldr.w	r3, [r0, #1064]	; 0x428
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	428b      	cmp	r3, r1
 8005e60:	d3f8      	bcc.n	8005e54 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8005e62:	f8d0 141c 	ldr.w	r1, [r0, #1052]	; 0x41c
 8005e66:	2201      	movs	r2, #1
 8005e68:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005e6c:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8005e70:	f7ff fe42 	bl	8005af8 <FsCache::get(unsigned long, unsigned char)>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d0ed      	beq.n	8005e54 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8005e78:	00a4      	lsls	r4, r4, #2
 8005e7a:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8005e7e:	5105      	str	r5, [r0, r4]
 8005e80:	2001      	movs	r0, #1
 8005e82:	e7e8      	b.n	8005e56 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

08005e84 <ExFatPartition::freeChain(unsigned long)>:
 8005e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005e88:	4680      	mov	r8, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	460f      	mov	r7, r1
 8005e8e:	aa01      	add	r2, sp, #4
 8005e90:	4621      	mov	r1, r4
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff ff83 	bl	8005d9e <ExFatPartition::fatGet(unsigned long, unsigned long*)>
 8005e98:	b246      	sxtb	r6, r0
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	db1a      	blt.n	8005ed4 <ExFatPartition::freeChain(unsigned long)+0x50>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f7ff ffd1 	bl	8005e4a <ExFatPartition::fatPut(unsigned long, unsigned long)>
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b198      	cbz	r0, 8005ed4 <ExFatPartition::freeChain(unsigned long)+0x50>
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	1c62      	adds	r2, r4, #1
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d100      	bne.n	8005eb6 <ExFatPartition::freeChain(unsigned long)+0x32>
 8005eb4:	b93e      	cbnz	r6, 8005ec6 <ExFatPartition::freeChain(unsigned long)+0x42>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	1bd2      	subs	r2, r2, r7
 8005eba:	4639      	mov	r1, r7
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f7ff ff03 	bl	8005cc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
 8005ec2:	b138      	cbz	r0, 8005ed4 <ExFatPartition::freeChain(unsigned long)+0x50>
 8005ec4:	9f01      	ldr	r7, [sp, #4]
 8005ec6:	9c01      	ldr	r4, [sp, #4]
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d1e0      	bne.n	8005e8e <ExFatPartition::freeChain(unsigned long)+0xa>
 8005ecc:	4628      	mov	r0, r5
 8005ece:	b002      	add	sp, #8
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	e7f9      	b.n	8005ecc <ExFatPartition::freeChain(unsigned long)+0x48>

08005ed8 <ExFatPartition::rootLength()>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
 8005ee0:	f7ff ff7c 	bl	8005ddc <ExFatPartition::chainSize(unsigned long)>
 8005ee4:	f894 343d 	ldrb.w	r3, [r4, #1085]	; 0x43d
 8005ee8:	3309      	adds	r3, #9
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4098      	lsls	r0, r3
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <exFatHashName(char const*, unsigned int, unsigned short)>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4401      	add	r1, r0
 8005ef4:	4288      	cmp	r0, r1
 8005ef6:	d013      	beq.n	8005f20 <exFatHashName(char const*, unsigned int, unsigned short)+0x30>
 8005ef8:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005efc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005f00:	2b19      	cmp	r3, #25
 8005f02:	bf9c      	itt	ls
 8005f04:	f1a4 0320 	subls.w	r3, r4, #32
 8005f08:	b2dc      	uxtbls	r4, r3
 8005f0a:	03d3      	lsls	r3, r2, #15
 8005f0c:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8005f10:	b292      	uxth	r2, r2
 8005f12:	1913      	adds	r3, r2, r4
 8005f14:	f3c3 024e 	ubfx	r2, r3, #1, #15
 8005f18:	ea42 32c3 	orr.w	r2, r2, r3, lsl #15
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	e7e9      	b.n	8005ef4 <exFatHashName(char const*, unsigned int, unsigned short)+0x4>
 8005f20:	4610      	mov	r0, r2
 8005f22:	bd10      	pop	{r4, pc}

08005f24 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
 8005f24:	440a      	add	r2, r1
 8005f26:	b570      	push	{r4, r5, r6, lr}
 8005f28:	4616      	mov	r6, r2
 8005f2a:	1ab1      	subs	r1, r6, r2
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	d91a      	bls.n	8005f66 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x42>
 8005f30:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 8005f34:	2c7e      	cmp	r4, #126	; 0x7e
 8005f36:	d814      	bhi.n	8005f62 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x3e>
 8005f38:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005f3c:	b2e4      	uxtb	r4, r4
 8005f3e:	f1a5 0161 	sub.w	r1, r5, #97	; 0x61
 8005f42:	2919      	cmp	r1, #25
 8005f44:	bf94      	ite	ls
 8005f46:	2120      	movls	r1, #32
 8005f48:	2100      	movhi	r1, #0
 8005f4a:	1a6d      	subs	r5, r5, r1
 8005f4c:	f1a4 0161 	sub.w	r1, r4, #97	; 0x61
 8005f50:	2919      	cmp	r1, #25
 8005f52:	bf94      	ite	ls
 8005f54:	2120      	movls	r1, #32
 8005f56:	2100      	movhi	r1, #0
 8005f58:	1a64      	subs	r4, r4, r1
 8005f5a:	b2ed      	uxtb	r5, r5
 8005f5c:	b2e4      	uxtb	r4, r4
 8005f5e:	42ac      	cmp	r4, r5
 8005f60:	d0e3      	beq.n	8005f2a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x6>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e000      	b.n	8005f68 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x44>
 8005f66:	2001      	movs	r0, #1
 8005f68:	bd70      	pop	{r4, r5, r6, pc}

08005f6a <FatPartition::cacheSync()>:
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	3024      	adds	r0, #36	; 0x24
 8005f70:	f000 fe7e 	bl	8006c70 <FatCache::sync()>
 8005f74:	b148      	cbz	r0, 8005f8a <FatPartition::cacheSync()+0x20>
 8005f76:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8005f7a:	f000 fe79 	bl	8006c70 <FatCache::sync()>
 8005f7e:	b120      	cbz	r0, 8005f8a <FatPartition::cacheSync()+0x20>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f86:	f001 bb3c 	b.w	8007602 <SdSpiCard::syncDevice()>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <FatFile::addCluster()>:
 8005f8e:	4602      	mov	r2, r0
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	f852 5f10 	ldr.w	r5, [r2, #16]!
 8005f96:	4604      	mov	r4, r0
 8005f98:	4629      	mov	r1, r5
 8005f9a:	6880      	ldr	r0, [r0, #8]
 8005f9c:	f000 ff1e 	bl	8006ddc <FatPartition::allocateCluster(unsigned long, unsigned long*)>
 8005fa0:	b140      	cbz	r0, 8005fb4 <FatFile::addCluster()+0x26>
 8005fa2:	78a3      	ldrb	r3, [r4, #2]
 8005fa4:	b93d      	cbnz	r5, 8005fb6 <FatFile::addCluster()+0x28>
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005faa:	70a3      	strb	r3, [r4, #2]
 8005fac:	78a3      	ldrb	r3, [r4, #2]
 8005fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fb2:	70a3      	strb	r3, [r4, #2]
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	6922      	ldr	r2, [r4, #16]
 8005fb8:	3501      	adds	r5, #1
 8005fba:	42aa      	cmp	r2, r5
 8005fbc:	d0f6      	beq.n	8005fac <FatFile::addCluster()+0x1e>
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	e7f2      	b.n	8005faa <FatFile::addCluster()+0x1c>

08005fc4 <FatFile::addDirCluster()>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	7801      	ldrb	r1, [r0, #0]
 8005fca:	4604      	mov	r4, r0
 8005fcc:	f011 0520 	ands.w	r5, r1, #32
 8005fd0:	d003      	beq.n	8005fda <FatFile::addDirCluster()+0x16>
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fda:	6942      	ldr	r2, [r0, #20]
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <FatFile::addDirCluster()+0x80>)
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d8f7      	bhi.n	8005fd2 <FatFile::addDirCluster()+0xe>
 8005fe2:	f7ff ffd4 	bl	8005f8e <FatFile::addCluster()>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d0f2      	beq.n	8005fd2 <FatFile::addDirCluster()+0xe>
 8005fec:	6921      	ldr	r1, [r4, #16]
 8005fee:	68a0      	ldr	r0, [r4, #8]
 8005ff0:	f000 fe8b 	bl	8006d0a <FatPartition::clusterStartSector(unsigned long) const>
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	68a0      	ldr	r0, [r4, #8]
 8005ff8:	2205      	movs	r2, #5
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	3024      	adds	r0, #36	; 0x24
 8005ffe:	f000 fe60 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006002:	4680      	mov	r8, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d0e4      	beq.n	8005fd2 <FatFile::addDirCluster()+0xe>
 8006008:	4629      	mov	r1, r5
 800600a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600e:	f002 faf3 	bl	80085f8 <memset>
 8006012:	2501      	movs	r5, #1
 8006014:	68a0      	ldr	r0, [r4, #8]
 8006016:	7903      	ldrb	r3, [r0, #4]
 8006018:	42ab      	cmp	r3, r5
 800601a:	d90a      	bls.n	8006032 <FatFile::addDirCluster()+0x6e>
 800601c:	2301      	movs	r3, #1
 800601e:	4642      	mov	r2, r8
 8006020:	19e9      	adds	r1, r5, r7
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	f001 fb39 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8006028:	2800      	cmp	r0, #0
 800602a:	d0d2      	beq.n	8005fd2 <FatFile::addDirCluster()+0xe>
 800602c:	3501      	adds	r5, #1
 800602e:	b2ed      	uxtb	r5, r5
 8006030:	e7f0      	b.n	8006014 <FatFile::addDirCluster()+0x50>
 8006032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006036:	7982      	ldrb	r2, [r0, #6]
 8006038:	4093      	lsls	r3, r2
 800603a:	6962      	ldr	r2, [r4, #20]
 800603c:	b29b      	uxth	r3, r3
 800603e:	4413      	add	r3, r2
 8006040:	6163      	str	r3, [r4, #20]
 8006042:	e7c7      	b.n	8005fd4 <FatFile::addDirCluster()+0x10>
 8006044:	001ffdff 	.word	0x001ffdff

08006048 <FatFile::cacheDirEntry(unsigned char)>:
 8006048:	b510      	push	{r4, lr}
 800604a:	4604      	mov	r4, r0
 800604c:	6880      	ldr	r0, [r0, #8]
 800604e:	460a      	mov	r2, r1
 8006050:	3024      	adds	r0, #36	; 0x24
 8006052:	69a1      	ldr	r1, [r4, #24]
 8006054:	f000 fe35 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006058:	b120      	cbz	r0, 8006064 <FatFile::cacheDirEntry(unsigned char)+0x1c>
 800605a:	88a3      	ldrh	r3, [r4, #4]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006064:	bd10      	pop	{r4, pc}

08006066 <FatFile::openRoot(FatVolume*)>:
 8006066:	b570      	push	{r4, r5, r6, lr}
 8006068:	7804      	ldrb	r4, [r0, #0]
 800606a:	4605      	mov	r5, r0
 800606c:	460e      	mov	r6, r1
 800606e:	b994      	cbnz	r4, 8006096 <FatFile::openRoot(FatVolume*)+0x30>
 8006070:	2224      	movs	r2, #36	; 0x24
 8006072:	4621      	mov	r1, r4
 8006074:	f002 fac0 	bl	80085f8 <memset>
 8006078:	60ae      	str	r6, [r5, #8]
 800607a:	79f3      	ldrb	r3, [r6, #7]
 800607c:	2b10      	cmp	r3, #16
 800607e:	d003      	beq.n	8006088 <FatFile::openRoot(FatVolume*)+0x22>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d006      	beq.n	8006092 <FatFile::openRoot(FatVolume*)+0x2c>
 8006084:	4620      	mov	r0, r4
 8006086:	e003      	b.n	8006090 <FatFile::openRoot(FatVolume*)+0x2a>
 8006088:	2320      	movs	r3, #32
 800608a:	2001      	movs	r0, #1
 800608c:	702b      	strb	r3, [r5, #0]
 800608e:	70a8      	strb	r0, [r5, #2]
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	e7f9      	b.n	800608a <FatFile::openRoot(FatVolume*)+0x24>
 8006096:	2000      	movs	r0, #0
 8006098:	e7fa      	b.n	8006090 <FatFile::openRoot(FatVolume*)+0x2a>

0800609a <FatFile::read(void*, unsigned int)>:
 800609a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609e:	7883      	ldrb	r3, [r0, #2]
 80060a0:	4689      	mov	r9, r1
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	4604      	mov	r4, r0
 80060a6:	4615      	mov	r5, r2
 80060a8:	d565      	bpl.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 80060aa:	7803      	ldrb	r3, [r0, #0]
 80060ac:	071a      	lsls	r2, r3, #28
 80060ae:	d52f      	bpl.n	8006110 <FatFile::read(void*, unsigned int)+0x76>
 80060b0:	69c3      	ldr	r3, [r0, #28]
 80060b2:	6942      	ldr	r2, [r0, #20]
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	429d      	cmp	r5, r3
 80060b8:	bf28      	it	cs
 80060ba:	461d      	movcs	r5, r3
 80060bc:	462e      	mov	r6, r5
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	f104 0b10 	add.w	fp, r4, #16
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	f000 8099 	beq.w	80061fe <FatFile::read(void*, unsigned int)+0x164>
 80060cc:	7823      	ldrb	r3, [r4, #0]
 80060ce:	6962      	ldr	r2, [r4, #20]
 80060d0:	069f      	lsls	r7, r3, #26
 80060d2:	68a0      	ldr	r0, [r4, #8]
 80060d4:	f3c2 0a08 	ubfx	sl, r2, #0, #9
 80060d8:	ea4f 2152 	mov.w	r1, r2, lsr #9
 80060dc:	d521      	bpl.n	8006122 <FatFile::read(void*, unsigned int)+0x88>
 80060de:	6a03      	ldr	r3, [r0, #32]
 80060e0:	4419      	add	r1, r3
 80060e2:	68a0      	ldr	r0, [r4, #8]
 80060e4:	f1ba 0f00 	cmp.w	sl, #0
 80060e8:	d14c      	bne.n	8006184 <FatFile::read(void*, unsigned int)+0xea>
 80060ea:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80060ee:	d349      	bcc.n	8006184 <FatFile::read(void*, unsigned int)+0xea>
 80060f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80060f2:	4299      	cmp	r1, r3
 80060f4:	d046      	beq.n	8006184 <FatFile::read(void*, unsigned int)+0xea>
 80060f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060fa:	d25c      	bcs.n	80061b6 <FatFile::read(void*, unsigned int)+0x11c>
 80060fc:	2301      	movs	r3, #1
 80060fe:	464a      	mov	r2, r9
 8006100:	6800      	ldr	r0, [r0, #0]
 8006102:	f001 fa93 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 8006106:	2800      	cmp	r0, #0
 8006108:	d035      	beq.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 800610a:	f44f 7700 	mov.w	r7, #512	; 0x200
 800610e:	e04c      	b.n	80061aa <FatFile::read(void*, unsigned int)+0x110>
 8006110:	069b      	lsls	r3, r3, #26
 8006112:	d5d3      	bpl.n	80060bc <FatFile::read(void*, unsigned int)+0x22>
 8006114:	6883      	ldr	r3, [r0, #8]
 8006116:	891a      	ldrh	r2, [r3, #8]
 8006118:	6943      	ldr	r3, [r0, #20]
 800611a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 800611e:	b29b      	uxth	r3, r3
 8006120:	e7c9      	b.n	80060b6 <FatFile::read(void*, unsigned int)+0x1c>
 8006122:	f890 8005 	ldrb.w	r8, [r0, #5]
 8006126:	ea08 0801 	and.w	r8, r8, r1
 800612a:	f1ba 0f00 	cmp.w	sl, #0
 800612e:	d108      	bne.n	8006142 <FatFile::read(void*, unsigned int)+0xa8>
 8006130:	f1b8 0f00 	cmp.w	r8, #0
 8006134:	d105      	bne.n	8006142 <FatFile::read(void*, unsigned int)+0xa8>
 8006136:	b95a      	cbnz	r2, 8006150 <FatFile::read(void*, unsigned int)+0xb6>
 8006138:	065a      	lsls	r2, r3, #25
 800613a:	bf4c      	ite	mi
 800613c:	6a03      	ldrmi	r3, [r0, #32]
 800613e:	6a23      	ldrpl	r3, [r4, #32]
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	6921      	ldr	r1, [r4, #16]
 8006144:	68a0      	ldr	r0, [r4, #8]
 8006146:	f000 fde0 	bl	8006d0a <FatPartition::clusterStartSector(unsigned long) const>
 800614a:	eb08 0100 	add.w	r1, r8, r0
 800614e:	e7c8      	b.n	80060e2 <FatFile::read(void*, unsigned int)+0x48>
 8006150:	071b      	lsls	r3, r3, #28
 8006152:	6921      	ldr	r1, [r4, #16]
 8006154:	d505      	bpl.n	8006162 <FatFile::read(void*, unsigned int)+0xc8>
 8006156:	78a3      	ldrb	r3, [r4, #2]
 8006158:	065f      	lsls	r7, r3, #25
 800615a:	d502      	bpl.n	8006162 <FatFile::read(void*, unsigned int)+0xc8>
 800615c:	3101      	adds	r1, #1
 800615e:	6121      	str	r1, [r4, #16]
 8006160:	e7ef      	b.n	8006142 <FatFile::read(void*, unsigned int)+0xa8>
 8006162:	465a      	mov	r2, fp
 8006164:	f000 fdd7 	bl	8006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>
 8006168:	2800      	cmp	r0, #0
 800616a:	db04      	blt.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 800616c:	d1e9      	bne.n	8006142 <FatFile::read(void*, unsigned int)+0xa8>
 800616e:	7823      	ldrb	r3, [r4, #0]
 8006170:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006174:	d143      	bne.n	80061fe <FatFile::read(void*, unsigned int)+0x164>
 8006176:	7863      	ldrb	r3, [r4, #1]
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	f043 0302 	orr.w	r3, r3, #2
 8006180:	7063      	strb	r3, [r4, #1]
 8006182:	e03d      	b.n	8006200 <FatFile::read(void*, unsigned int)+0x166>
 8006184:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8006188:	42b7      	cmp	r7, r6
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8006192:	bf28      	it	cs
 8006194:	4637      	movcs	r7, r6
 8006196:	f000 fd94 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 800619a:	2800      	cmp	r0, #0
 800619c:	d0eb      	beq.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 800619e:	eb00 010a 	add.w	r1, r0, sl
 80061a2:	463a      	mov	r2, r7
 80061a4:	4648      	mov	r0, r9
 80061a6:	f002 f9b1 	bl	800850c <memcpy>
 80061aa:	6963      	ldr	r3, [r4, #20]
 80061ac:	44b9      	add	r9, r7
 80061ae:	443b      	add	r3, r7
 80061b0:	6163      	str	r3, [r4, #20]
 80061b2:	1bf6      	subs	r6, r6, r7
 80061b4:	e787      	b.n	80060c6 <FatFile::read(void*, unsigned int)+0x2c>
 80061b6:	7822      	ldrb	r2, [r4, #0]
 80061b8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
 80061bc:	0692      	lsls	r2, r2, #26
 80061be:	d405      	bmi.n	80061cc <FatFile::read(void*, unsigned int)+0x132>
 80061c0:	7902      	ldrb	r2, [r0, #4]
 80061c2:	eba2 0208 	sub.w	r2, r2, r8
 80061c6:	4592      	cmp	sl, r2
 80061c8:	bf28      	it	cs
 80061ca:	4692      	movcs	sl, r2
 80061cc:	4299      	cmp	r1, r3
 80061ce:	ea4f 274a 	mov.w	r7, sl, lsl #9
 80061d2:	d908      	bls.n	80061e6 <FatFile::read(void*, unsigned int)+0x14c>
 80061d4:	68a0      	ldr	r0, [r4, #8]
 80061d6:	4653      	mov	r3, sl
 80061d8:	464a      	mov	r2, r9
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	f001 fa26 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1e2      	bne.n	80061aa <FatFile::read(void*, unsigned int)+0x110>
 80061e4:	e7c7      	b.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 80061e6:	eb01 020a 	add.w	r2, r1, sl
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d9f2      	bls.n	80061d4 <FatFile::read(void*, unsigned int)+0x13a>
 80061ee:	3024      	adds	r0, #36	; 0x24
 80061f0:	9101      	str	r1, [sp, #4]
 80061f2:	f000 fd3d 	bl	8006c70 <FatCache::sync()>
 80061f6:	9901      	ldr	r1, [sp, #4]
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d1eb      	bne.n	80061d4 <FatFile::read(void*, unsigned int)+0x13a>
 80061fc:	e7bb      	b.n	8006176 <FatFile::read(void*, unsigned int)+0xdc>
 80061fe:	1ba8      	subs	r0, r5, r6
 8006200:	b003      	add	sp, #12
 8006202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006206 <FatFile::peek()>:
 8006206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006208:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 800620c:	2201      	movs	r2, #1
 800620e:	f10d 0107 	add.w	r1, sp, #7
 8006212:	4604      	mov	r4, r0
 8006214:	f7ff ff41 	bl	800609a <FatFile::read(void*, unsigned int)>
 8006218:	2801      	cmp	r0, #1
 800621a:	bf14      	ite	ne
 800621c:	f04f 30ff 	movne.w	r0, #4294967295
 8006220:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8006224:	e9c4 5604 	strd	r5, r6, [r4, #16]
 8006228:	b002      	add	sp, #8
 800622a:	bd70      	pop	{r4, r5, r6, pc}

0800622c <FatFile::readDirCache(bool)>:
 800622c:	6943      	ldr	r3, [r0, #20]
 800622e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006230:	f3c3 1543 	ubfx	r5, r3, #5, #4
 8006234:	4604      	mov	r4, r0
 8006236:	b105      	cbz	r5, 800623a <FatFile::readDirCache(bool)+0xe>
 8006238:	b999      	cbnz	r1, 8006262 <FatFile::readDirCache(bool)+0x36>
 800623a:	2201      	movs	r2, #1
 800623c:	f10d 0107 	add.w	r1, sp, #7
 8006240:	4620      	mov	r0, r4
 8006242:	f7ff ff2a 	bl	800609a <FatFile::read(void*, unsigned int)>
 8006246:	b240      	sxtb	r0, r0
 8006248:	2801      	cmp	r0, #1
 800624a:	d002      	beq.n	8006252 <FatFile::readDirCache(bool)+0x26>
 800624c:	2000      	movs	r0, #0
 800624e:	b003      	add	sp, #12
 8006250:	bd30      	pop	{r4, r5, pc}
 8006252:	6963      	ldr	r3, [r4, #20]
 8006254:	331f      	adds	r3, #31
 8006256:	68a0      	ldr	r0, [r4, #8]
 8006258:	6163      	str	r3, [r4, #20]
 800625a:	3030      	adds	r0, #48	; 0x30
 800625c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8006260:	e7f5      	b.n	800624e <FatFile::readDirCache(bool)+0x22>
 8006262:	3320      	adds	r3, #32
 8006264:	e7f7      	b.n	8006256 <FatFile::readDirCache(bool)+0x2a>

08006266 <FatFile::seekSet(unsigned long)>:
 8006266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626a:	460e      	mov	r6, r1
 800626c:	7801      	ldrb	r1, [r0, #0]
 800626e:	4604      	mov	r4, r0
 8006270:	6907      	ldr	r7, [r0, #16]
 8006272:	2900      	cmp	r1, #0
 8006274:	d038      	beq.n	80062e8 <FatFile::seekSet(unsigned long)+0x82>
 8006276:	6940      	ldr	r0, [r0, #20]
 8006278:	42b0      	cmp	r0, r6
 800627a:	d006      	beq.n	800628a <FatFile::seekSet(unsigned long)+0x24>
 800627c:	b93e      	cbnz	r6, 800628e <FatFile::seekSet(unsigned long)+0x28>
 800627e:	6126      	str	r6, [r4, #16]
 8006280:	78a3      	ldrb	r3, [r4, #2]
 8006282:	6166      	str	r6, [r4, #20]
 8006284:	f023 0320 	bic.w	r3, r3, #32
 8006288:	70a3      	strb	r3, [r4, #2]
 800628a:	2001      	movs	r0, #1
 800628c:	e02e      	b.n	80062ec <FatFile::seekSet(unsigned long)+0x86>
 800628e:	070d      	lsls	r5, r1, #28
 8006290:	d523      	bpl.n	80062da <FatFile::seekSet(unsigned long)+0x74>
 8006292:	69e3      	ldr	r3, [r4, #28]
 8006294:	42b3      	cmp	r3, r6
 8006296:	d327      	bcc.n	80062e8 <FatFile::seekSet(unsigned long)+0x82>
 8006298:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800629c:	1e42      	subs	r2, r0, #1
 800629e:	f89c 5006 	ldrb.w	r5, [ip, #6]
 80062a2:	3509      	adds	r5, #9
 80062a4:	b2eb      	uxtb	r3, r5
 80062a6:	1e75      	subs	r5, r6, #1
 80062a8:	40da      	lsrs	r2, r3
 80062aa:	40dd      	lsrs	r5, r3
 80062ac:	42aa      	cmp	r2, r5
 80062ae:	d800      	bhi.n	80062b2 <FatFile::seekSet(unsigned long)+0x4c>
 80062b0:	b9f0      	cbnz	r0, 80062f0 <FatFile::seekSet(unsigned long)+0x8a>
 80062b2:	064b      	lsls	r3, r1, #25
 80062b4:	bf4c      	ite	mi
 80062b6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 80062ba:	6a23      	ldrpl	r3, [r4, #32]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	f104 0810 	add.w	r8, r4, #16
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	d0dc      	beq.n	8006280 <FatFile::seekSet(unsigned long)+0x1a>
 80062c6:	4642      	mov	r2, r8
 80062c8:	6921      	ldr	r1, [r4, #16]
 80062ca:	68a0      	ldr	r0, [r4, #8]
 80062cc:	f000 fd23 	bl	8006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f105 35ff 	add.w	r5, r5, #4294967295
 80062d6:	dcf4      	bgt.n	80062c2 <FatFile::seekSet(unsigned long)+0x5c>
 80062d8:	e006      	b.n	80062e8 <FatFile::seekSet(unsigned long)+0x82>
 80062da:	068a      	lsls	r2, r1, #26
 80062dc:	d5dc      	bpl.n	8006298 <FatFile::seekSet(unsigned long)+0x32>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	891b      	ldrh	r3, [r3, #8]
 80062e2:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80062e6:	d9cb      	bls.n	8006280 <FatFile::seekSet(unsigned long)+0x1a>
 80062e8:	2000      	movs	r0, #0
 80062ea:	6127      	str	r7, [r4, #16]
 80062ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f0:	1aad      	subs	r5, r5, r2
 80062f2:	e7e4      	b.n	80062be <FatFile::seekSet(unsigned long)+0x58>

080062f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	460f      	mov	r7, r1
 80062f8:	4604      	mov	r4, r0
 80062fa:	4616      	mov	r6, r2
 80062fc:	2100      	movs	r1, #0
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	461d      	mov	r5, r3
 8006302:	f002 f979 	bl	80085f8 <memset>
 8006306:	68b8      	ldr	r0, [r7, #8]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	80a6      	strh	r6, [r4, #4]
 800630c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8006310:	f006 060f 	and.w	r6, r6, #15
 8006314:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8006318:	60a0      	str	r0, [r4, #8]
 800631a:	60e3      	str	r3, [r4, #12]
 800631c:	7ad1      	ldrb	r1, [r2, #11]
 800631e:	070e      	lsls	r6, r1, #28
 8006320:	d43c      	bmi.n	800639c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
 8006322:	f001 0117 	and.w	r1, r1, #23
 8006326:	7021      	strb	r1, [r4, #0]
 8006328:	7ad3      	ldrb	r3, [r2, #11]
 800632a:	f013 0f18 	tst.w	r3, #24
 800632e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006332:	bf08      	it	eq
 8006334:	f041 0108 	orreq.w	r1, r1, #8
 8006338:	70e3      	strb	r3, [r4, #3]
 800633a:	f005 0303 	and.w	r3, r5, #3
 800633e:	bf08      	it	eq
 8006340:	7021      	strbeq	r1, [r4, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d024      	beq.n	8006390 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
 8006346:	2b02      	cmp	r3, #2
 8006348:	d020      	beq.n	800638c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
 800634a:	bb3b      	cbnz	r3, 800639c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
 800634c:	056b      	lsls	r3, r5, #21
 800634e:	d425      	bmi.n	800639c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
 8006350:	2301      	movs	r3, #1
 8006352:	70a3      	strb	r3, [r4, #2]
 8006354:	78a1      	ldrb	r1, [r4, #2]
 8006356:	078f      	lsls	r7, r1, #30
 8006358:	d503      	bpl.n	8006362 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6e>
 800635a:	7823      	ldrb	r3, [r4, #0]
 800635c:	f013 0f11 	tst.w	r3, #17
 8006360:	d11c      	bne.n	800639c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
 8006362:	f005 0308 	and.w	r3, r5, #8
 8006366:	430b      	orrs	r3, r1
 8006368:	70a3      	strb	r3, [r4, #2]
 800636a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800636c:	8b51      	ldrh	r1, [r2, #26]
 800636e:	61a3      	str	r3, [r4, #24]
 8006370:	8a93      	ldrh	r3, [r2, #20]
 8006372:	056e      	lsls	r6, r5, #21
 8006374:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006378:	d514      	bpl.n	80063a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb0>
 800637a:	b959      	cbnz	r1, 8006394 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
 800637c:	78a3      	ldrb	r3, [r4, #2]
 800637e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006382:	70a3      	strb	r3, [r4, #2]
 8006384:	046b      	lsls	r3, r5, #17
 8006386:	d411      	bmi.n	80063ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
 8006388:	2001      	movs	r0, #1
 800638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638c:	2303      	movs	r3, #3
 800638e:	e7e0      	b.n	8006352 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
 8006390:	2302      	movs	r3, #2
 8006392:	e7de      	b.n	8006352 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
 8006394:	f000 fd5d 	bl	8006e52 <FatPartition::freeChain(unsigned long)>
 8006398:	2800      	cmp	r0, #0
 800639a:	d1ef      	bne.n	800637c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x88>
 800639c:	2000      	movs	r0, #0
 800639e:	7020      	strb	r0, [r4, #0]
 80063a0:	70a0      	strb	r0, [r4, #2]
 80063a2:	e7f2      	b.n	800638a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
 80063a4:	6221      	str	r1, [r4, #32]
 80063a6:	69d3      	ldr	r3, [r2, #28]
 80063a8:	61e3      	str	r3, [r4, #28]
 80063aa:	e7eb      	b.n	8006384 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
 80063ac:	69e1      	ldr	r1, [r4, #28]
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff ff59 	bl	8006266 <FatFile::seekSet(unsigned long)>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0f1      	beq.n	800639c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
 80063b8:	e7e6      	b.n	8006388 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
	...

080063bc <FatFile::sync()>:
 80063bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063be:	7803      	ldrb	r3, [r0, #0]
 80063c0:	4604      	mov	r4, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d035      	beq.n	8006432 <FatFile::sync()+0x76>
 80063c6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da2b      	bge.n	8006426 <FatFile::sync()+0x6a>
 80063ce:	2101      	movs	r1, #1
 80063d0:	f7ff fe3a 	bl	8006048 <FatFile::cacheDirEntry(unsigned char)>
 80063d4:	4605      	mov	r5, r0
 80063d6:	b930      	cbnz	r0, 80063e6 <FatFile::sync()+0x2a>
 80063d8:	2000      	movs	r0, #0
 80063da:	7863      	ldrb	r3, [r4, #1]
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	7063      	strb	r3, [r4, #1]
 80063e2:	b003      	add	sp, #12
 80063e4:	bd30      	pop	{r4, r5, pc}
 80063e6:	7803      	ldrb	r3, [r0, #0]
 80063e8:	2be5      	cmp	r3, #229	; 0xe5
 80063ea:	d0f5      	beq.n	80063d8 <FatFile::sync()+0x1c>
 80063ec:	7823      	ldrb	r3, [r4, #0]
 80063ee:	071b      	lsls	r3, r3, #28
 80063f0:	bf44      	itt	mi
 80063f2:	69e3      	ldrmi	r3, [r4, #28]
 80063f4:	61c3      	strmi	r3, [r0, #28]
 80063f6:	6a23      	ldr	r3, [r4, #32]
 80063f8:	8343      	strh	r3, [r0, #26]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	8283      	strh	r3, [r0, #20]
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <FatFile::sync()+0x7c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	b163      	cbz	r3, 800641e <FatFile::sync()+0x62>
 8006404:	f10d 0203 	add.w	r2, sp, #3
 8006408:	f10d 0106 	add.w	r1, sp, #6
 800640c:	a801      	add	r0, sp, #4
 800640e:	4798      	blx	r3
 8006410:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006414:	832b      	strh	r3, [r5, #24]
 8006416:	826b      	strh	r3, [r5, #18]
 8006418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800641c:	82eb      	strh	r3, [r5, #22]
 800641e:	78a3      	ldrb	r3, [r4, #2]
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	70a3      	strb	r3, [r4, #2]
 8006426:	68a0      	ldr	r0, [r4, #8]
 8006428:	f7ff fd9f 	bl	8005f6a <FatPartition::cacheSync()>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0d3      	beq.n	80063d8 <FatFile::sync()+0x1c>
 8006430:	e7d7      	b.n	80063e2 <FatFile::sync()+0x26>
 8006432:	2001      	movs	r0, #1
 8006434:	e7d5      	b.n	80063e2 <FatFile::sync()+0x26>
 8006436:	bf00      	nop
 8006438:	20001b4c 	.word	0x20001b4c

0800643c <FatFile::close()>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	f7ff ffbc 	bl	80063bc <FatFile::sync()>
 8006444:	2300      	movs	r3, #0
 8006446:	7023      	strb	r3, [r4, #0]
 8006448:	70a3      	strb	r3, [r4, #2]
 800644a:	bd10      	pop	{r4, pc}

0800644c <FatFile::open(FatFile*, char const*, int)>:
 800644c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644e:	461f      	mov	r7, r3
 8006450:	2300      	movs	r3, #0
 8006452:	b093      	sub	sp, #76	; 0x4c
 8006454:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006458:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800645c:	7803      	ldrb	r3, [r0, #0]
 800645e:	4606      	mov	r6, r0
 8006460:	460c      	mov	r4, r1
 8006462:	9201      	str	r2, [sp, #4]
 8006464:	b113      	cbz	r3, 800646c <FatFile::open(FatFile*, char const*, int)+0x20>
 8006466:	2000      	movs	r0, #0
 8006468:	b013      	add	sp, #76	; 0x4c
 800646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646c:	780b      	ldrb	r3, [r1, #0]
 800646e:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006472:	d0f8      	beq.n	8006466 <FatFile::open(FatFile*, char const*, int)+0x1a>
 8006474:	7813      	ldrb	r3, [r2, #0]
 8006476:	2b2f      	cmp	r3, #47	; 0x2f
 8006478:	d112      	bne.n	80064a0 <FatFile::open(FatFile*, char const*, int)+0x54>
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	2a2f      	cmp	r2, #47	; 0x2f
 8006480:	d102      	bne.n	8006488 <FatFile::open(FatFile*, char const*, int)+0x3c>
 8006482:	3301      	adds	r3, #1
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	e7f8      	b.n	800647a <FatFile::open(FatFile*, char const*, int)+0x2e>
 8006488:	68a1      	ldr	r1, [r4, #8]
 800648a:	b91a      	cbnz	r2, 8006494 <FatFile::open(FatFile*, char const*, int)+0x48>
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff fdea 	bl	8006066 <FatFile::openRoot(FatVolume*)>
 8006492:	e7e9      	b.n	8006468 <FatFile::open(FatFile*, char const*, int)+0x1c>
 8006494:	a809      	add	r0, sp, #36	; 0x24
 8006496:	f7ff fde6 	bl	8006066 <FatFile::openRoot(FatVolume*)>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0e3      	beq.n	8006466 <FatFile::open(FatFile*, char const*, int)+0x1a>
 800649e:	ac09      	add	r4, sp, #36	; 0x24
 80064a0:	aa01      	add	r2, sp, #4
 80064a2:	a903      	add	r1, sp, #12
 80064a4:	9801      	ldr	r0, [sp, #4]
 80064a6:	f000 f915 	bl	80066d4 <FatFile::parsePathName(char const*, fname_t*, char const**)>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0db      	beq.n	8006466 <FatFile::open(FatFile*, char const*, int)+0x1a>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b19b      	cbz	r3, 80064dc <FatFile::open(FatFile*, char const*, int)+0x90>
 80064b4:	2300      	movs	r3, #0
 80064b6:	aa03      	add	r2, sp, #12
 80064b8:	4621      	mov	r1, r4
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 fa38 	bl	8006930 <FatFile::open(FatFile*, fname_t*, int)>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d0d0      	beq.n	8006466 <FatFile::open(FatFile*, char const*, int)+0x1a>
 80064c4:	4635      	mov	r5, r6
 80064c6:	ac09      	add	r4, sp, #36	; 0x24
 80064c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	4630      	mov	r0, r6
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	f7ff ffb1 	bl	800643c <FatFile::close()>
 80064da:	e7e0      	b.n	800649e <FatFile::open(FatFile*, char const*, int)+0x52>
 80064dc:	463b      	mov	r3, r7
 80064de:	aa03      	add	r2, sp, #12
 80064e0:	4621      	mov	r1, r4
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 fa24 	bl	8006930 <FatFile::open(FatFile*, fname_t*, int)>
 80064e8:	e7be      	b.n	8006468 <FatFile::open(FatFile*, char const*, int)+0x1c>

080064ea <FatFile::open(FatVolume*, char const*, int)>:
 80064ea:	b119      	cbz	r1, 80064f4 <FatFile::open(FatVolume*, char const*, int)+0xa>
 80064ec:	f201 413c 	addw	r1, r1, #1084	; 0x43c
 80064f0:	f7ff bfac 	b.w	800644c <FatFile::open(FatFile*, char const*, int)>
 80064f4:	4608      	mov	r0, r1
 80064f6:	4770      	bx	lr

080064f8 <FatFile::write(void const*, unsigned int)>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	7883      	ldrb	r3, [r0, #2]
 80064fe:	4688      	mov	r8, r1
 8006500:	0799      	lsls	r1, r3, #30
 8006502:	4604      	mov	r4, r0
 8006504:	4691      	mov	r9, r2
 8006506:	d542      	bpl.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 8006508:	071a      	lsls	r2, r3, #28
 800650a:	d43b      	bmi.n	8006584 <FatFile::write(void const*, unsigned int)+0x8c>
 800650c:	6963      	ldr	r3, [r4, #20]
 800650e:	43db      	mvns	r3, r3
 8006510:	454b      	cmp	r3, r9
 8006512:	d33c      	bcc.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 8006514:	464f      	mov	r7, r9
 8006516:	6962      	ldr	r2, [r4, #20]
 8006518:	2f00      	cmp	r7, #0
 800651a:	d076      	beq.n	800660a <FatFile::write(void const*, unsigned int)+0x112>
 800651c:	68a0      	ldr	r0, [r4, #8]
 800651e:	f3c2 0508 	ubfx	r5, r2, #0, #9
 8006522:	7943      	ldrb	r3, [r0, #5]
 8006524:	ea13 2652 	ands.w	r6, r3, r2, lsr #9
 8006528:	d10c      	bne.n	8006544 <FatFile::write(void const*, unsigned int)+0x4c>
 800652a:	6921      	ldr	r1, [r4, #16]
 800652c:	2d00      	cmp	r5, #0
 800652e:	d17c      	bne.n	800662a <FatFile::write(void const*, unsigned int)+0x132>
 8006530:	2900      	cmp	r1, #0
 8006532:	d040      	beq.n	80065b6 <FatFile::write(void const*, unsigned int)+0xbe>
 8006534:	78a3      	ldrb	r3, [r4, #2]
 8006536:	065b      	lsls	r3, r3, #25
 8006538:	d530      	bpl.n	800659c <FatFile::write(void const*, unsigned int)+0xa4>
 800653a:	69e3      	ldr	r3, [r4, #28]
 800653c:	4293      	cmp	r3, r2
 800653e:	d92d      	bls.n	800659c <FatFile::write(void const*, unsigned int)+0xa4>
 8006540:	3101      	adds	r1, #1
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	6921      	ldr	r1, [r4, #16]
 8006546:	68a0      	ldr	r0, [r4, #8]
 8006548:	f000 fbdf 	bl	8006d0a <FatPartition::clusterStartSector(unsigned long) const>
 800654c:	1831      	adds	r1, r6, r0
 800654e:	2d00      	cmp	r5, #0
 8006550:	d16e      	bne.n	8006630 <FatFile::write(void const*, unsigned int)+0x138>
 8006552:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8006556:	d36b      	bcc.n	8006630 <FatFile::write(void const*, unsigned int)+0x138>
 8006558:	68a2      	ldr	r2, [r4, #8]
 800655a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800655e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006560:	d239      	bcs.n	80065d6 <FatFile::write(void const*, unsigned int)+0xde>
 8006562:	4281      	cmp	r1, r0
 8006564:	bf02      	ittt	eq
 8006566:	f04f 33ff 	moveq.w	r3, #4294967295
 800656a:	f882 5024 	strbeq.w	r5, [r2, #36]	; 0x24
 800656e:	62d3      	streq	r3, [r2, #44]	; 0x2c
 8006570:	68a5      	ldr	r5, [r4, #8]
 8006572:	2301      	movs	r3, #1
 8006574:	4642      	mov	r2, r8
 8006576:	6828      	ldr	r0, [r5, #0]
 8006578:	f001 f88f 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 800657c:	b138      	cbz	r0, 800658e <FatFile::write(void const*, unsigned int)+0x96>
 800657e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8006582:	e07b      	b.n	800667c <FatFile::write(void const*, unsigned int)+0x184>
 8006584:	69c1      	ldr	r1, [r0, #28]
 8006586:	f7ff fe6e 	bl	8006266 <FatFile::seekSet(unsigned long)>
 800658a:	2800      	cmp	r0, #0
 800658c:	d1be      	bne.n	800650c <FatFile::write(void const*, unsigned int)+0x14>
 800658e:	7863      	ldrb	r3, [r4, #1]
 8006590:	f04f 39ff 	mov.w	r9, #4294967295
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	7063      	strb	r3, [r4, #1]
 800659a:	e043      	b.n	8006624 <FatFile::write(void const*, unsigned int)+0x12c>
 800659c:	f104 0210 	add.w	r2, r4, #16
 80065a0:	f000 fbb9 	bl	8006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	dbf2      	blt.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 80065a8:	d1cc      	bne.n	8006544 <FatFile::write(void const*, unsigned int)+0x4c>
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff fcef 	bl	8005f8e <FatFile::addCluster()>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1c7      	bne.n	8006544 <FatFile::write(void const*, unsigned int)+0x4c>
 80065b4:	e7eb      	b.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 80065b6:	6a23      	ldr	r3, [r4, #32]
 80065b8:	b93b      	cbnz	r3, 80065ca <FatFile::write(void const*, unsigned int)+0xd2>
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff fce7 	bl	8005f8e <FatFile::addCluster()>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d0e4      	beq.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	6223      	str	r3, [r4, #32]
 80065c8:	e7bc      	b.n	8006544 <FatFile::write(void const*, unsigned int)+0x4c>
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	e7ba      	b.n	8006544 <FatFile::write(void const*, unsigned int)+0x4c>
 80065ce:	2201      	movs	r2, #1
 80065d0:	e040      	b.n	8006654 <FatFile::write(void const*, unsigned int)+0x15c>
 80065d2:	2205      	movs	r2, #5
 80065d4:	e03e      	b.n	8006654 <FatFile::write(void const*, unsigned int)+0x15c>
 80065d6:	7913      	ldrb	r3, [r2, #4]
 80065d8:	ea4f 2c57 	mov.w	ip, r7, lsr #9
 80065dc:	1b9b      	subs	r3, r3, r6
 80065de:	4563      	cmp	r3, ip
 80065e0:	bf28      	it	cs
 80065e2:	4663      	movcs	r3, ip
 80065e4:	4281      	cmp	r1, r0
 80065e6:	ea4f 2643 	mov.w	r6, r3, lsl #9
 80065ea:	d808      	bhi.n	80065fe <FatFile::write(void const*, unsigned int)+0x106>
 80065ec:	eb01 0c03 	add.w	ip, r1, r3
 80065f0:	4584      	cmp	ip, r0
 80065f2:	bf82      	ittt	hi
 80065f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80065f8:	f882 5024 	strbhi.w	r5, [r2, #36]	; 0x24
 80065fc:	62d0      	strhi	r0, [r2, #44]	; 0x2c
 80065fe:	68a5      	ldr	r5, [r4, #8]
 8006600:	4642      	mov	r2, r8
 8006602:	6828      	ldr	r0, [r5, #0]
 8006604:	f001 f849 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8006608:	e036      	b.n	8006678 <FatFile::write(void const*, unsigned int)+0x180>
 800660a:	69e3      	ldr	r3, [r4, #28]
 800660c:	4293      	cmp	r3, r2
 800660e:	d205      	bcs.n	800661c <FatFile::write(void const*, unsigned int)+0x124>
 8006610:	61e2      	str	r2, [r4, #28]
 8006612:	78a3      	ldrb	r3, [r4, #2]
 8006614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006618:	70a3      	strb	r3, [r4, #2]
 800661a:	e003      	b.n	8006624 <FatFile::write(void const*, unsigned int)+0x12c>
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <FatFile::write(void const*, unsigned int)+0x190>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f6      	bne.n	8006612 <FatFile::write(void const*, unsigned int)+0x11a>
 8006624:	4648      	mov	r0, r9
 8006626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662a:	f000 fb6e 	bl	8006d0a <FatPartition::clusterStartSector(unsigned long) const>
 800662e:	4601      	mov	r1, r0
 8006630:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
 8006634:	42be      	cmp	r6, r7
 8006636:	68a0      	ldr	r0, [r4, #8]
 8006638:	bf28      	it	cs
 800663a:	463e      	movcs	r6, r7
 800663c:	2d00      	cmp	r5, #0
 800663e:	d1c6      	bne.n	80065ce <FatFile::write(void const*, unsigned int)+0xd6>
 8006640:	6962      	ldr	r2, [r4, #20]
 8006642:	69e3      	ldr	r3, [r4, #28]
 8006644:	429a      	cmp	r2, r3
 8006646:	d2c4      	bcs.n	80065d2 <FatFile::write(void const*, unsigned int)+0xda>
 8006648:	78a3      	ldrb	r3, [r4, #2]
 800664a:	f013 0f20 	tst.w	r3, #32
 800664e:	bf0c      	ite	eq
 8006650:	2201      	moveq	r2, #1
 8006652:	2205      	movne	r2, #5
 8006654:	3024      	adds	r0, #36	; 0x24
 8006656:	f000 fb34 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 800665a:	2800      	cmp	r0, #0
 800665c:	d097      	beq.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 800665e:	4428      	add	r0, r5
 8006660:	4632      	mov	r2, r6
 8006662:	4641      	mov	r1, r8
 8006664:	4435      	add	r5, r6
 8006666:	f001 ff51 	bl	800850c <memcpy>
 800666a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800666e:	d105      	bne.n	800667c <FatFile::write(void const*, unsigned int)+0x184>
 8006670:	68a0      	ldr	r0, [r4, #8]
 8006672:	3024      	adds	r0, #36	; 0x24
 8006674:	f000 fafc 	bl	8006c70 <FatCache::sync()>
 8006678:	2800      	cmp	r0, #0
 800667a:	d088      	beq.n	800658e <FatFile::write(void const*, unsigned int)+0x96>
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	44b0      	add	r8, r6
 8006680:	4433      	add	r3, r6
 8006682:	6163      	str	r3, [r4, #20]
 8006684:	1bbf      	subs	r7, r7, r6
 8006686:	e746      	b.n	8006516 <FatFile::write(void const*, unsigned int)+0x1e>
 8006688:	20001b4c 	.word	0x20001b4c

0800668c <lfnGetChar(DirLfn_t*, unsigned char)>:
 800668c:	2904      	cmp	r1, #4
 800668e:	d804      	bhi.n	800669a <lfnGetChar(DirLfn_t*, unsigned char)+0xe>
 8006690:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8006694:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 8006698:	4770      	bx	lr
 800669a:	290a      	cmp	r1, #10
 800669c:	d803      	bhi.n	80066a6 <lfnGetChar(DirLfn_t*, unsigned char)+0x1a>
 800669e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80066a2:	8880      	ldrh	r0, [r0, #4]
 80066a4:	4770      	bx	lr
 80066a6:	290d      	cmp	r1, #13
 80066a8:	bf1a      	itte	ne
 80066aa:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
 80066ae:	88c0      	ldrhne	r0, [r0, #6]
 80066b0:	2000      	moveq	r0, #0
 80066b2:	4770      	bx	lr

080066b4 <FatFile::lfnChecksum(unsigned char*)>:
 80066b4:	1e41      	subs	r1, r0, #1
 80066b6:	f100 020a 	add.w	r2, r0, #10
 80066ba:	2000      	movs	r0, #0
 80066bc:	0843      	lsrs	r3, r0, #1
 80066be:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80066c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80066c6:	4418      	add	r0, r3
 80066c8:	428a      	cmp	r2, r1
 80066ca:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80066ce:	d1f5      	bne.n	80066bc <FatFile::lfnChecksum(unsigned char*)+0x8>
 80066d0:	4770      	bx	lr
	...

080066d4 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4604      	mov	r4, r0
 80066da:	7823      	ldrb	r3, [r4, #0]
 80066dc:	3001      	adds	r0, #1
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d0fa      	beq.n	80066d8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x4>
 80066e2:	4625      	mov	r5, r4
 80066e4:	4f67      	ldr	r7, [pc, #412]	; (8006884 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b0>)
 80066e6:	608c      	str	r4, [r1, #8]
 80066e8:	1b28      	subs	r0, r5, r4
 80066ea:	462e      	mov	r6, r5
 80066ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066f0:	b14b      	cbz	r3, 8006706 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x32>
 80066f2:	2b2f      	cmp	r3, #47	; 0x2f
 80066f4:	d146      	bne.n	8006784 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
 80066f6:	1823      	adds	r3, r4, r0
 80066f8:	461e      	mov	r6, r3
 80066fa:	f813 5b01 	ldrb.w	r5, [r3], #1
 80066fe:	2d20      	cmp	r5, #32
 8006700:	d0fa      	beq.n	80066f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24>
 8006702:	2d2f      	cmp	r5, #47	; 0x2f
 8006704:	d0f8      	beq.n	80066f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24>
 8006706:	6016      	str	r6, [r2, #0]
 8006708:	1823      	adds	r3, r4, r0
 800670a:	42a3      	cmp	r3, r4
 800670c:	eba3 0e04 	sub.w	lr, r3, r4
 8006710:	d04e      	beq.n	80067b0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xdc>
 8006712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006716:	2a2e      	cmp	r2, #46	; 0x2e
 8006718:	d0f7      	beq.n	800670a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
 800671a:	2a20      	cmp	r2, #32
 800671c:	d0f5      	beq.n	800670a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
 800671e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8006722:	dc31      	bgt.n	8006788 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
 8006724:	2020      	movs	r0, #32
 8006726:	f8c1 e004 	str.w	lr, [r1, #4]
 800672a:	f101 030d 	add.w	r3, r1, #13
 800672e:	f101 0218 	add.w	r2, r1, #24
 8006732:	f803 0b01 	strb.w	r0, [r3], #1
 8006736:	429a      	cmp	r2, r3
 8006738:	d1fb      	bne.n	8006732 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x5e>
 800673a:	4623      	mov	r3, r4
 800673c:	eba3 0904 	sub.w	r9, r3, r4
 8006740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006744:	2a2e      	cmp	r2, #46	; 0x2e
 8006746:	d0f9      	beq.n	800673c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x68>
 8006748:	2a20      	cmp	r2, #32
 800674a:	d0f7      	beq.n	800673c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x68>
 800674c:	fab9 f089 	clz	r0, r9
 8006750:	f10e 35ff 	add.w	r5, lr, #4294967295
 8006754:	0940      	lsrs	r0, r0, #5
 8006756:	1c6b      	adds	r3, r5, #1
 8006758:	d12d      	bne.n	80067b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe2>
 800675a:	f04f 0800 	mov.w	r8, #0
 800675e:	2607      	movs	r6, #7
 8006760:	4642      	mov	r2, r8
 8006762:	46c2      	mov	sl, r8
 8006764:	f04f 0c08 	mov.w	ip, #8
 8006768:	45f1      	cmp	r9, lr
 800676a:	da7e      	bge.n	800686a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x196>
 800676c:	f814 3009 	ldrb.w	r3, [r4, r9]
 8006770:	2b20      	cmp	r3, #32
 8006772:	d003      	beq.n	800677c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa8>
 8006774:	2b2e      	cmp	r3, #46	; 0x2e
 8006776:	d123      	bne.n	80067c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xec>
 8006778:	45a9      	cmp	r9, r5
 800677a:	d025      	beq.n	80067c8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf4>
 800677c:	2000      	movs	r0, #0
 800677e:	f109 0901 	add.w	r9, r9, #1
 8006782:	e7f1      	b.n	8006768 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x94>
 8006784:	2b5c      	cmp	r3, #92	; 0x5c
 8006786:	d102      	bne.n	800678e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
 8006788:	2000      	movs	r0, #0
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 8006792:	b2c0      	uxtb	r0, r0
 8006794:	281d      	cmp	r0, #29
 8006796:	d803      	bhi.n	80067a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xcc>
 8006798:	fa27 f000 	lsr.w	r0, r7, r0
 800679c:	07c0      	lsls	r0, r0, #31
 800679e:	d4f3      	bmi.n	8006788 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
 80067a0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80067a4:	283c      	cmp	r0, #60	; 0x3c
 80067a6:	d0ef      	beq.n	8006788 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
 80067a8:	3b20      	subs	r3, #32
 80067aa:	2b5e      	cmp	r3, #94	; 0x5e
 80067ac:	d99c      	bls.n	80066e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14>
 80067ae:	e7eb      	b.n	8006788 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
 80067b0:	f04f 0e00 	mov.w	lr, #0
 80067b4:	e7b6      	b.n	8006724 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x50>
 80067b6:	5d63      	ldrb	r3, [r4, r5]
 80067b8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ba:	d0ce      	beq.n	800675a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
 80067bc:	3d01      	subs	r5, #1
 80067be:	e7ca      	b.n	8006756 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
 80067c0:	2b22      	cmp	r3, #34	; 0x22
 80067c2:	d013      	beq.n	80067ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x118>
 80067c4:	2b7c      	cmp	r3, #124	; 0x7c
 80067c6:	d011      	beq.n	80067ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x118>
 80067c8:	f1a3 072a 	sub.w	r7, r3, #42	; 0x2a
 80067cc:	2f05      	cmp	r7, #5
 80067ce:	d801      	bhi.n	80067d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x100>
 80067d0:	2b2d      	cmp	r3, #45	; 0x2d
 80067d2:	d10b      	bne.n	80067ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x118>
 80067d4:	f1a3 073a 	sub.w	r7, r3, #58	; 0x3a
 80067d8:	2f05      	cmp	r7, #5
 80067da:	d907      	bls.n	80067ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x118>
 80067dc:	f1a3 075b 	sub.w	r7, r3, #91	; 0x5b
 80067e0:	2f02      	cmp	r7, #2
 80067e2:	d903      	bls.n	80067ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x118>
 80067e4:	f1a3 0721 	sub.w	r7, r3, #33	; 0x21
 80067e8:	2f5d      	cmp	r7, #93	; 0x5d
 80067ea:	d908      	bls.n	80067fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
 80067ec:	45a9      	cmp	r9, r5
 80067ee:	d137      	bne.n	8006860 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x18c>
 80067f0:	2e0a      	cmp	r6, #10
 80067f2:	d039      	beq.n	8006868 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x194>
 80067f4:	260a      	movs	r6, #10
 80067f6:	2208      	movs	r2, #8
 80067f8:	f04f 0c10 	mov.w	ip, #16
 80067fc:	e7bf      	b.n	800677e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xaa>
 80067fe:	45a9      	cmp	r9, r5
 8006800:	d0f6      	beq.n	80067f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
 8006802:	42b2      	cmp	r2, r6
 8006804:	d82e      	bhi.n	8006864 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x190>
 8006806:	f1a3 0761 	sub.w	r7, r3, #97	; 0x61
 800680a:	2f19      	cmp	r7, #25
 800680c:	d818      	bhi.n	8006840 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16c>
 800680e:	3b20      	subs	r3, #32
 8006810:	ea4c 0808 	orr.w	r8, ip, r8
 8006814:	b2db      	uxtb	r3, r3
 8006816:	fa5f f888 	uxtb.w	r8, r8
 800681a:	1c57      	adds	r7, r2, #1
 800681c:	b2ff      	uxtb	r7, r7
 800681e:	440a      	add	r2, r1
 8006820:	2f06      	cmp	r7, #6
 8006822:	7353      	strb	r3, [r2, #13]
 8006824:	d800      	bhi.n	8006828 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x154>
 8006826:	730f      	strb	r7, [r1, #12]
 8006828:	463a      	mov	r2, r7
 800682a:	e7a8      	b.n	800677e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xaa>
 800682c:	45a9      	cmp	r9, r5
 800682e:	dc1b      	bgt.n	8006868 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x194>
 8006830:	46a9      	mov	r9, r5
 8006832:	260a      	movs	r6, #10
 8006834:	2208      	movs	r2, #8
 8006836:	f04f 0c10 	mov.w	ip, #16
 800683a:	e79f      	b.n	800677c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa8>
 800683c:	2000      	movs	r0, #0
 800683e:	235f      	movs	r3, #95	; 0x5f
 8006840:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 8006844:	2f19      	cmp	r7, #25
 8006846:	bf98      	it	ls
 8006848:	ea4c 0a0a 	orrls.w	sl, ip, sl
 800684c:	e7e5      	b.n	800681a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x146>
 800684e:	2001      	movs	r0, #1
 8006850:	7b0b      	ldrb	r3, [r1, #12]
 8006852:	7008      	strb	r0, [r1, #0]
 8006854:	4419      	add	r1, r3
 8006856:	237e      	movs	r3, #126	; 0x7e
 8006858:	734b      	strb	r3, [r1, #13]
 800685a:	2331      	movs	r3, #49	; 0x31
 800685c:	738b      	strb	r3, [r1, #14]
 800685e:	e794      	b.n	800678a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb6>
 8006860:	42b2      	cmp	r2, r6
 8006862:	d9eb      	bls.n	800683c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
 8006864:	2e0a      	cmp	r6, #10
 8006866:	d1e1      	bne.n	800682c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
 8006868:	2000      	movs	r0, #0
 800686a:	7b4b      	ldrb	r3, [r1, #13]
 800686c:	2b20      	cmp	r3, #32
 800686e:	d08b      	beq.n	8006788 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0ec      	beq.n	800684e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x17a>
 8006874:	ea1a 0f08 	tst.w	sl, r8
 8006878:	bf18      	it	ne
 800687a:	f04f 0802 	movne.w	r8, #2
 800687e:	f881 8000 	strb.w	r8, [r1]
 8006882:	e782      	b.n	800678a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb6>
 8006884:	31000101 	.word	0x31000101

08006888 <FatFile::lfnUniqueSfn(fname_t*)>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	4606      	mov	r6, r0
 800688e:	460d      	mov	r5, r1
 8006890:	2402      	movs	r4, #2
 8006892:	277e      	movs	r7, #126	; 0x7e
 8006894:	f891 900c 	ldrb.w	r9, [r1, #12]
 8006898:	f101 080d 	add.w	r8, r1, #13
 800689c:	6869      	ldr	r1, [r5, #4]
 800689e:	68aa      	ldr	r2, [r5, #8]
 80068a0:	1863      	adds	r3, r4, r1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4411      	add	r1, r2
 80068a6:	4291      	cmp	r1, r2
 80068a8:	d006      	beq.n	80068b8 <FatFile::lfnUniqueSfn(fname_t*)+0x30>
 80068aa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80068ae:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80068b2:	4043      	eors	r3, r0
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	e7f6      	b.n	80068a6 <FatFile::lfnUniqueSfn(fname_t*)+0x1e>
 80068b8:	f1b9 0f03 	cmp.w	r9, #3
 80068bc:	bf28      	it	cs
 80068be:	f04f 0903 	movcs.w	r9, #3
 80068c2:	f109 0204 	add.w	r2, r9, #4
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	f003 010f 	and.w	r1, r3, #15
 80068cc:	18a8      	adds	r0, r5, r2
 80068ce:	3a01      	subs	r2, #1
 80068d0:	2909      	cmp	r1, #9
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	bf94      	ite	ls
 80068d6:	3130      	addls	r1, #48	; 0x30
 80068d8:	3137      	addhi	r1, #55	; 0x37
 80068da:	454a      	cmp	r2, r9
 80068dc:	7341      	strb	r1, [r0, #13]
 80068de:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80068e2:	d8f1      	bhi.n	80068c8 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
 80068e4:	eb05 0309 	add.w	r3, r5, r9
 80068e8:	735f      	strb	r7, [r3, #13]
 80068ea:	2100      	movs	r1, #0
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff fcba 	bl	8006266 <FatFile::seekSet(unsigned long)>
 80068f2:	2101      	movs	r1, #1
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fc99 	bl	800622c <FatFile::readDirCache(bool)>
 80068fa:	4601      	mov	r1, r0
 80068fc:	b928      	cbnz	r0, 800690a <FatFile::lfnUniqueSfn(fname_t*)+0x82>
 80068fe:	7870      	ldrb	r0, [r6, #1]
 8006900:	fab0 f080 	clz	r0, r0
 8006904:	0940      	lsrs	r0, r0, #5
 8006906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690a:	7803      	ldrb	r3, [r0, #0]
 800690c:	b16b      	cbz	r3, 800692a <FatFile::lfnUniqueSfn(fname_t*)+0xa2>
 800690e:	7ac3      	ldrb	r3, [r0, #11]
 8006910:	071b      	lsls	r3, r3, #28
 8006912:	d4ee      	bmi.n	80068f2 <FatFile::lfnUniqueSfn(fname_t*)+0x6a>
 8006914:	220b      	movs	r2, #11
 8006916:	4640      	mov	r0, r8
 8006918:	f001 fdc6 	bl	80084a8 <memcmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	d1e8      	bne.n	80068f2 <FatFile::lfnUniqueSfn(fname_t*)+0x6a>
 8006920:	3401      	adds	r4, #1
 8006922:	b2a4      	uxth	r4, r4
 8006924:	2c64      	cmp	r4, #100	; 0x64
 8006926:	d1b9      	bne.n	800689c <FatFile::lfnUniqueSfn(fname_t*)+0x14>
 8006928:	e7ed      	b.n	8006906 <FatFile::lfnUniqueSfn(fname_t*)+0x7e>
 800692a:	2001      	movs	r0, #1
 800692c:	e7eb      	b.n	8006906 <FatFile::lfnUniqueSfn(fname_t*)+0x7e>
	...

08006930 <FatFile::open(FatFile*, fname_t*, int)>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	b08d      	sub	sp, #52	; 0x34
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	780b      	ldrb	r3, [r1, #0]
 800693a:	9007      	str	r0, [sp, #28]
 800693c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006940:	460e      	mov	r6, r1
 8006942:	4691      	mov	r9, r2
 8006944:	d103      	bne.n	800694e <FatFile::open(FatFile*, fname_t*, int)+0x1e>
 8006946:	2000      	movs	r0, #0
 8006948:	b00d      	add	sp, #52	; 0x34
 800694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694e:	9b07      	ldr	r3, [sp, #28]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f7      	bne.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006956:	6853      	ldr	r3, [r2, #4]
 8006958:	f04f 0a00 	mov.w	sl, #0
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	7813      	ldrb	r3, [r2, #0]
 8006960:	46d3      	mov	fp, sl
 8006962:	0798      	lsls	r0, r3, #30
 8006964:	bf1c      	itt	ne
 8006966:	250d      	movne	r5, #13
 8006968:	9b03      	ldrne	r3, [sp, #12]
 800696a:	4654      	mov	r4, sl
 800696c:	bf1c      	itt	ne
 800696e:	f103 070c 	addne.w	r7, r3, #12
 8006972:	fbb7 f7f5 	udivne	r7, r7, r5
 8006976:	4655      	mov	r5, sl
 8006978:	bf18      	it	ne
 800697a:	3701      	addne	r7, #1
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	4630      	mov	r0, r6
 8006982:	bf14      	ite	ne
 8006984:	b2ff      	uxtbne	r7, r7
 8006986:	2701      	moveq	r7, #1
 8006988:	f7ff fc6d 	bl	8006266 <FatFile::seekSet(unsigned long)>
 800698c:	f109 030d 	add.w	r3, r9, #13
 8006990:	f8cd a014 	str.w	sl, [sp, #20]
 8006994:	f8cd a018 	str.w	sl, [sp, #24]
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	6973      	ldr	r3, [r6, #20]
 800699c:	2101      	movs	r1, #1
 800699e:	4630      	mov	r0, r6
 80069a0:	f3c3 184f 	ubfx	r8, r3, #5, #16
 80069a4:	f7ff fc42 	bl	800622c <FatFile::readDirCache(bool)>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d17d      	bne.n	8006aaa <FatFile::open(FatFile*, fname_t*, int)+0x17a>
 80069ae:	7873      	ldrb	r3, [r6, #1]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1c8      	bne.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	059a      	lsls	r2, r3, #22
 80069b8:	d5c5      	bpl.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d8c0      	bhi.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	bf18      	it	ne
 80069c8:	46d0      	movne	r8, sl
 80069ca:	42bc      	cmp	r4, r7
 80069cc:	d216      	bcs.n	80069fc <FatFile::open(FatFile*, fname_t*, int)+0xcc>
 80069ce:	2100      	movs	r1, #0
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff fc2b 	bl	800622c <FatFile::readDirCache(bool)>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f040 80f5 	bne.w	8006bc6 <FatFile::open(FatFile*, fname_t*, int)+0x296>
 80069dc:	7873      	ldrb	r3, [r6, #1]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1b1      	bne.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff faee 	bl	8005fc4 <FatFile::addDirCluster()>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d0ac      	beq.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 80069ec:	68b3      	ldr	r3, [r6, #8]
 80069ee:	791b      	ldrb	r3, [r3, #4]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d803      	bhi.n	80069fc <FatFile::open(FatFile*, fname_t*, int)+0xcc>
 80069f4:	3410      	adds	r4, #16
 80069f6:	b2e4      	uxtb	r4, r4
 80069f8:	42a7      	cmp	r7, r4
 80069fa:	d8f2      	bhi.n	80069e2 <FatFile::open(FatFile*, fname_t*, int)+0xb2>
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 80e4 	bne.w	8006bcc <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 8006a04:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7ff fc2c 	bl	8006266 <FatFile::seekSet(unsigned long)>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d099      	beq.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006a12:	1e7d      	subs	r5, r7, #1
 8006a14:	b2ed      	uxtb	r5, r5
 8006a16:	462c      	mov	r4, r5
 8006a18:	f04f 0800 	mov.w	r8, #0
 8006a1c:	f04f 0a0f 	mov.w	sl, #15
 8006a20:	f109 0b0d 	add.w	fp, r9, #13
 8006a24:	2c00      	cmp	r4, #0
 8006a26:	f000 80e5 	beq.w	8006bf4 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff fbfd 	bl	800622c <FatFile::readDirCache(bool)>
 8006a32:	4607      	mov	r7, r0
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d086      	beq.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006a38:	68b2      	ldr	r2, [r6, #8]
 8006a3a:	42ac      	cmp	r4, r5
 8006a3c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006a48:	bf14      	ite	ne
 8006a4a:	4622      	movne	r2, r4
 8006a4c:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8006a50:	7002      	strb	r2, [r0, #0]
 8006a52:	f880 a00b 	strb.w	sl, [r0, #11]
 8006a56:	f880 800c 	strb.w	r8, [r0, #12]
 8006a5a:	4658      	mov	r0, fp
 8006a5c:	9205      	str	r2, [sp, #20]
 8006a5e:	f7ff fe29 	bl	80066b4 <FatFile::lfnChecksum(unsigned char*)>
 8006a62:	7378      	strb	r0, [r7, #13]
 8006a64:	200d      	movs	r0, #13
 8006a66:	9a05      	ldr	r2, [sp, #20]
 8006a68:	f8a7 801a 	strh.w	r8, [r7, #26]
 8006a6c:	f002 021f 	and.w	r2, r2, #31
 8006a70:	3a01      	subs	r2, #1
 8006a72:	4350      	muls	r0, r2
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006a7a:	eb03 0c00 	add.w	ip, r3, r0
 8006a7e:	9903      	ldr	r1, [sp, #12]
 8006a80:	1813      	adds	r3, r2, r0
 8006a82:	428b      	cmp	r3, r1
 8006a84:	f080 80aa 	bcs.w	8006bdc <FatFile::open(FatFile*, fname_t*, int)+0x2ac>
 8006a88:	f81c 1002 	ldrb.w	r1, [ip, r2]
 8006a8c:	0053      	lsls	r3, r2, #1
 8006a8e:	2a04      	cmp	r2, #4
 8006a90:	fa5f fe82 	uxtb.w	lr, r2
 8006a94:	443b      	add	r3, r7
 8006a96:	f200 80a7 	bhi.w	8006be8 <FatFile::open(FatFile*, fname_t*, int)+0x2b8>
 8006a9a:	f8a3 1001 	strh.w	r1, [r3, #1]
 8006a9e:	3201      	adds	r2, #1
 8006aa0:	2a0d      	cmp	r2, #13
 8006aa2:	d1ec      	bne.n	8006a7e <FatFile::open(FatFile*, fname_t*, int)+0x14e>
 8006aa4:	3c01      	subs	r4, #1
 8006aa6:	b2e4      	uxtb	r4, r4
 8006aa8:	e7bc      	b.n	8006a24 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
 8006aaa:	7802      	ldrb	r2, [r0, #0]
 8006aac:	2ae5      	cmp	r2, #229	; 0xe5
 8006aae:	d000      	beq.n	8006ab2 <FatFile::open(FatFile*, fname_t*, int)+0x182>
 8006ab0:	b96a      	cbnz	r2, 8006ace <FatFile::open(FatFile*, fname_t*, int)+0x19e>
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	bf08      	it	eq
 8006ab6:	46c2      	moveq	sl, r8
 8006ab8:	42bc      	cmp	r4, r7
 8006aba:	bf3c      	itt	cc
 8006abc:	3401      	addcc	r4, #1
 8006abe:	b2e4      	uxtbcc	r4, r4
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	f43f af77 	beq.w	80069b4 <FatFile::open(FatFile*, fname_t*, int)+0x84>
 8006ac6:	2ae5      	cmp	r2, #229	; 0xe5
 8006ac8:	d104      	bne.n	8006ad4 <FatFile::open(FatFile*, fname_t*, int)+0x1a4>
 8006aca:	2500      	movs	r5, #0
 8006acc:	e765      	b.n	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006ace:	42bc      	cmp	r4, r7
 8006ad0:	bf38      	it	cc
 8006ad2:	2400      	movcc	r4, #0
 8006ad4:	2a2e      	cmp	r2, #46	; 0x2e
 8006ad6:	d0f8      	beq.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006ad8:	7ad9      	ldrb	r1, [r3, #11]
 8006ada:	290f      	cmp	r1, #15
 8006adc:	d14a      	bne.n	8006b74 <FatFile::open(FatFile*, fname_t*, int)+0x244>
 8006ade:	b9fd      	cbnz	r5, 8006b20 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
 8006ae0:	0651      	lsls	r1, r2, #25
 8006ae2:	f57f af5a 	bpl.w	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006ae6:	f002 051f 	and.w	r5, r2, #31
 8006aea:	46ab      	mov	fp, r5
 8006aec:	7b5a      	ldrb	r2, [r3, #13]
 8006aee:	9205      	str	r2, [sp, #20]
 8006af0:	210d      	movs	r1, #13
 8006af2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006af6:	434a      	muls	r2, r1
 8006af8:	9903      	ldr	r1, [sp, #12]
 8006afa:	4690      	mov	r8, r2
 8006afc:	4291      	cmp	r1, r2
 8006afe:	d9e4      	bls.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b00:	f102 010d 	add.w	r1, r2, #13
 8006b04:	9108      	str	r1, [sp, #32]
 8006b06:	eba8 0102 	sub.w	r1, r8, r2
 8006b0a:	b2c9      	uxtb	r1, r1
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fdbd 	bl	800668c <lfnGetChar(DirLfn_t*, unsigned char)>
 8006b12:	9903      	ldr	r1, [sp, #12]
 8006b14:	4541      	cmp	r1, r8
 8006b16:	d10e      	bne.n	8006b36 <FatFile::open(FatFile*, fname_t*, int)+0x206>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	bf18      	it	ne
 8006b1c:	2500      	movne	r5, #0
 8006b1e:	e73c      	b.n	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b24:	fa5f fb8b 	uxtb.w	fp, fp
 8006b28:	455a      	cmp	r2, fp
 8006b2a:	d1ce      	bne.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b2c:	7b5a      	ldrb	r2, [r3, #13]
 8006b2e:	9905      	ldr	r1, [sp, #20]
 8006b30:	428a      	cmp	r2, r1
 8006b32:	d0dd      	beq.n	8006af0 <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
 8006b34:	e7c9      	b.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b36:	28ff      	cmp	r0, #255	; 0xff
 8006b38:	d8c7      	bhi.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b3a:	b2c0      	uxtb	r0, r0
 8006b3c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006b40:	2919      	cmp	r1, #25
 8006b42:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8006b46:	bf98      	it	ls
 8006b48:	3020      	addls	r0, #32
 8006b4a:	f811 1008 	ldrb.w	r1, [r1, r8]
 8006b4e:	bf98      	it	ls
 8006b50:	b2c0      	uxtbls	r0, r0
 8006b52:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 8006b56:	f1be 0f19 	cmp.w	lr, #25
 8006b5a:	bf9c      	itt	ls
 8006b5c:	3120      	addls	r1, #32
 8006b5e:	b2c9      	uxtbls	r1, r1
 8006b60:	4281      	cmp	r1, r0
 8006b62:	f108 0c01 	add.w	ip, r8, #1
 8006b66:	d1b0      	bne.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b68:	9908      	ldr	r1, [sp, #32]
 8006b6a:	458c      	cmp	ip, r1
 8006b6c:	f43f af15 	beq.w	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006b70:	46e0      	mov	r8, ip
 8006b72:	e7c8      	b.n	8006b06 <FatFile::open(FatFile*, fname_t*, int)+0x1d6>
 8006b74:	070a      	lsls	r2, r1, #28
 8006b76:	d4a8      	bmi.n	8006aca <FatFile::open(FatFile*, fname_t*, int)+0x19a>
 8006b78:	b1b5      	cbz	r5, 8006ba8 <FatFile::open(FatFile*, fname_t*, int)+0x278>
 8006b7a:	f1bb 0f01 	cmp.w	fp, #1
 8006b7e:	f47f aee2 	bne.w	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fd96 	bl	80066b4 <FatFile::lfnChecksum(unsigned char*)>
 8006b88:	9b05      	ldr	r3, [sp, #20]
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	f47f aedb 	bne.w	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006b90:	9b04      	ldr	r3, [sp, #16]
 8006b92:	0519      	lsls	r1, r3, #20
 8006b94:	f53f aed7 	bmi.w	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006b98:	9500      	str	r5, [sp, #0]
 8006b9a:	9b04      	ldr	r3, [sp, #16]
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	9807      	ldr	r0, [sp, #28]
 8006ba2:	f7ff fba7 	bl	80062f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
 8006ba6:	e6cf      	b.n	8006948 <FatFile::open(FatFile*, fname_t*, int)+0x18>
 8006ba8:	220b      	movs	r2, #11
 8006baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fc7b 	bl	80084a8 <memcmp>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f47f aef1 	bne.w	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006bb8:	f899 3000 	ldrb.w	r3, [r9]
 8006bbc:	07d8      	lsls	r0, r3, #31
 8006bbe:	d5e7      	bpl.n	8006b90 <FatFile::open(FatFile*, fname_t*, int)+0x260>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	e6e9      	b.n	800699a <FatFile::open(FatFile*, fname_t*, int)+0x6a>
 8006bc6:	3401      	adds	r4, #1
 8006bc8:	b2e4      	uxtb	r4, r4
 8006bca:	e6fe      	b.n	80069ca <FatFile::open(FatFile*, fname_t*, int)+0x9a>
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff fe5a 	bl	8006888 <FatFile::lfnUniqueSfn(fname_t*)>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f47f af15 	bne.w	8006a04 <FatFile::open(FatFile*, fname_t*, int)+0xd4>
 8006bda:	e6b4      	b.n	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006bdc:	bf14      	ite	ne
 8006bde:	f04f 31ff 	movne.w	r1, #4294967295
 8006be2:	2100      	moveq	r1, #0
 8006be4:	b289      	uxth	r1, r1
 8006be6:	e751      	b.n	8006a8c <FatFile::open(FatFile*, fname_t*, int)+0x15c>
 8006be8:	f1be 0f0a 	cmp.w	lr, #10
 8006bec:	bf94      	ite	ls
 8006bee:	8099      	strhls	r1, [r3, #4]
 8006bf0:	80d9      	strhhi	r1, [r3, #6]
 8006bf2:	e754      	b.n	8006a9e <FatFile::open(FatFile*, fname_t*, int)+0x16e>
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8006bfc:	f7ff fb16 	bl	800622c <FatFile::readDirCache(bool)>
 8006c00:	4607      	mov	r7, r0
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f ae9f 	beq.w	8006946 <FatFile::open(FatFile*, fname_t*, int)+0x16>
 8006c08:	2220      	movs	r2, #32
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f001 fcf4 	bl	80085f8 <memset>
 8006c10:	464b      	mov	r3, r9
 8006c12:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8006c16:	603a      	str	r2, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	891a      	ldrh	r2, [r3, #8]
 8006c1e:	813a      	strh	r2, [r7, #8]
 8006c20:	7a9b      	ldrb	r3, [r3, #10]
 8006c22:	72bb      	strb	r3, [r7, #10]
 8006c24:	f899 3000 	ldrb.w	r3, [r9]
 8006c28:	f003 0318 	and.w	r3, r3, #24
 8006c2c:	733b      	strb	r3, [r7, #12]
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <FatFile::open(FatFile*, fname_t*, int)+0x33c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b18b      	cbz	r3, 8006c58 <FatFile::open(FatFile*, fname_t*, int)+0x328>
 8006c34:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8006c38:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8006c3c:	a80b      	add	r0, sp, #44	; 0x2c
 8006c3e:	4798      	blx	r3
 8006c40:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8006c44:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8006c48:	737b      	strb	r3, [r7, #13]
 8006c4a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006c4e:	81fa      	strh	r2, [r7, #14]
 8006c50:	823b      	strh	r3, [r7, #16]
 8006c52:	827b      	strh	r3, [r7, #18]
 8006c54:	833b      	strh	r3, [r7, #24]
 8006c56:	82fa      	strh	r2, [r7, #22]
 8006c58:	68b2      	ldr	r2, [r6, #8]
 8006c5a:	f3c8 184f 	ubfx	r8, r8, #5, #16
 8006c5e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006c6a:	e795      	b.n	8006b98 <FatFile::open(FatFile*, fname_t*, int)+0x268>
 8006c6c:	20001b4c 	.word	0x20001b4c

08006c70 <FatCache::sync()>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	7803      	ldrb	r3, [r0, #0]
 8006c74:	4604      	mov	r4, r0
 8006c76:	07da      	lsls	r2, r3, #31
 8006c78:	d521      	bpl.n	8006cbe <FatCache::sync()+0x4e>
 8006c7a:	f100 060c 	add.w	r6, r0, #12
 8006c7e:	6840      	ldr	r0, [r0, #4]
 8006c80:	2301      	movs	r3, #1
 8006c82:	4632      	mov	r2, r6
 8006c84:	68a1      	ldr	r1, [r4, #8]
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	f000 fd07 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	b910      	cbnz	r0, 8006c96 <FatCache::sync()+0x26>
 8006c90:	2500      	movs	r5, #0
 8006c92:	4628      	mov	r0, r5
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c96:	7823      	ldrb	r3, [r4, #0]
 8006c98:	079b      	lsls	r3, r3, #30
 8006c9a:	d404      	bmi.n	8006ca6 <FatCache::sync()+0x36>
 8006c9c:	7823      	ldrb	r3, [r4, #0]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	7023      	strb	r3, [r4, #0]
 8006ca4:	e7f5      	b.n	8006c92 <FatCache::sync()+0x22>
 8006ca6:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8006caa:	6901      	ldr	r1, [r0, #16]
 8006cac:	2301      	movs	r3, #1
 8006cae:	4632      	mov	r2, r6
 8006cb0:	4439      	add	r1, r7
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	f000 fcf1 	bl	800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1ef      	bne.n	8006c9c <FatCache::sync()+0x2c>
 8006cbc:	e7e8      	b.n	8006c90 <FatCache::sync()+0x20>
 8006cbe:	2501      	movs	r5, #1
 8006cc0:	e7e7      	b.n	8006c92 <FatCache::sync()+0x22>

08006cc2 <FatCache::read(unsigned long, unsigned char)>:
 8006cc2:	b570      	push	{r4, r5, r6, lr}
 8006cc4:	6883      	ldr	r3, [r0, #8]
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	460e      	mov	r6, r1
 8006ccc:	4615      	mov	r5, r2
 8006cce:	d009      	beq.n	8006ce4 <FatCache::read(unsigned long, unsigned char)+0x22>
 8006cd0:	f7ff ffce 	bl	8006c70 <FatCache::sync()>
 8006cd4:	b908      	cbnz	r0, 8006cda <FatCache::read(unsigned long, unsigned char)+0x18>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	076b      	lsls	r3, r5, #29
 8006cdc:	d50a      	bpl.n	8006cf4 <FatCache::read(unsigned long, unsigned char)+0x32>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60a6      	str	r6, [r4, #8]
 8006ce2:	7023      	strb	r3, [r4, #0]
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	7823      	ldrb	r3, [r4, #0]
 8006ce8:	f005 0503 	and.w	r5, r5, #3
 8006cec:	431d      	orrs	r5, r3
 8006cee:	f800 5b0c 	strb.w	r5, [r0], #12
 8006cf2:	e7f1      	b.n	8006cd8 <FatCache::read(unsigned long, unsigned char)+0x16>
 8006cf4:	6860      	ldr	r0, [r4, #4]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f104 020c 	add.w	r2, r4, #12
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	6800      	ldr	r0, [r0, #0]
 8006d00:	f000 fc94 	bl	800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d1ea      	bne.n	8006cde <FatCache::read(unsigned long, unsigned char)+0x1c>
 8006d08:	e7e5      	b.n	8006cd6 <FatCache::read(unsigned long, unsigned char)+0x14>

08006d0a <FatPartition::clusterStartSector(unsigned long) const>:
 8006d0a:	7983      	ldrb	r3, [r0, #6]
 8006d0c:	3902      	subs	r1, #2
 8006d0e:	6940      	ldr	r0, [r0, #20]
 8006d10:	4099      	lsls	r1, r3
 8006d12:	4408      	add	r0, r1
 8006d14:	4770      	bx	lr

08006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>:
 8006d16:	2901      	cmp	r1, #1
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	4616      	mov	r6, r2
 8006d20:	d802      	bhi.n	8006d28 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	69c3      	ldr	r3, [r0, #28]
 8006d2a:	428b      	cmp	r3, r1
 8006d2c:	d3f9      	bcc.n	8006d22 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
 8006d2e:	79c3      	ldrb	r3, [r0, #7]
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d114      	bne.n	8006d5e <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
 8006d34:	6981      	ldr	r1, [r0, #24]
 8006d36:	2202      	movs	r2, #2
 8006d38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006d3c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8006d40:	f7ff ffbf 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0ec      	beq.n	8006d22 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
 8006d48:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8006d4c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8006d50:	69ea      	ldr	r2, [r5, #28]
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bf9a      	itte	ls
 8006d56:	6033      	strls	r3, [r6, #0]
 8006d58:	2001      	movls	r0, #1
 8006d5a:	2000      	movhi	r0, #0
 8006d5c:	e7e3      	b.n	8006d26 <FatPartition::fatGet(unsigned long, unsigned long*)+0x10>
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d1df      	bne.n	8006d22 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
 8006d62:	6983      	ldr	r3, [r0, #24]
 8006d64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006d68:	2202      	movs	r2, #2
 8006d6a:	4419      	add	r1, r3
 8006d6c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8006d70:	f7ff ffa7 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0d4      	beq.n	8006d22 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
 8006d78:	b2e4      	uxtb	r4, r4
 8006d7a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 8006d7e:	e7e7      	b.n	8006d50 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

08006d80 <FatPartition::fatPut(unsigned long, unsigned long)>:
 8006d80:	2901      	cmp	r1, #1
 8006d82:	b538      	push	{r3, r4, r5, lr}
 8006d84:	460c      	mov	r4, r1
 8006d86:	4615      	mov	r5, r2
 8006d88:	d801      	bhi.n	8006d8e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	69c3      	ldr	r3, [r0, #28]
 8006d90:	428b      	cmp	r3, r1
 8006d92:	d3fa      	bcc.n	8006d8a <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8006d94:	79c3      	ldrb	r3, [r0, #7]
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d10f      	bne.n	8006dba <FatPartition::fatPut(unsigned long, unsigned long)+0x3a>
 8006d9a:	6981      	ldr	r1, [r0, #24]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006da2:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8006da6:	f7ff ff8c 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0ed      	beq.n	8006d8a <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8006dae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8006db2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7e8      	b.n	8006d8c <FatPartition::fatPut(unsigned long, unsigned long)+0xc>
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d1e5      	bne.n	8006d8a <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8006dbe:	6983      	ldr	r3, [r0, #24]
 8006dc0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	4419      	add	r1, r3
 8006dc8:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8006dcc:	f7ff ff79 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d0da      	beq.n	8006d8a <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
 8006dd4:	b2e4      	uxtb	r4, r4
 8006dd6:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8006dda:	e7ec      	b.n	8006db6 <FatPartition::fatPut(unsigned long, unsigned long)+0x36>

08006ddc <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
 8006ddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006de0:	68c4      	ldr	r4, [r0, #12]
 8006de2:	4605      	mov	r5, r0
 8006de4:	428c      	cmp	r4, r1
 8006de6:	460e      	mov	r6, r1
 8006de8:	4690      	mov	r8, r2
 8006dea:	d301      	bcc.n	8006df0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
 8006dec:	2701      	movs	r7, #1
 8006dee:	e001      	b.n	8006df4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
 8006df0:	460c      	mov	r4, r1
 8006df2:	2700      	movs	r7, #0
 8006df4:	69eb      	ldr	r3, [r5, #28]
 8006df6:	3401      	adds	r4, #1
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	d202      	bcs.n	8006e02 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
 8006dfc:	b9c7      	cbnz	r7, 8006e30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
 8006dfe:	68ec      	ldr	r4, [r5, #12]
 8006e00:	e7f4      	b.n	8006dec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
 8006e02:	42a6      	cmp	r6, r4
 8006e04:	d014      	beq.n	8006e30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
 8006e06:	aa01      	add	r2, sp, #4
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7ff ff83 	bl	8006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	db0d      	blt.n	8006e30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
 8006e14:	d0ee      	beq.n	8006df4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1eb      	bne.n	8006df4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
 8006e1c:	b107      	cbz	r7, 8006e20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
 8006e1e:	60ec      	str	r4, [r5, #12]
 8006e20:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7ff ffaa 	bl	8006d80 <FatPartition::fatPut(unsigned long, unsigned long)>
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	b920      	cbnz	r0, 8006e3a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
 8006e30:	2700      	movs	r7, #0
 8006e32:	4638      	mov	r0, r7
 8006e34:	b002      	add	sp, #8
 8006e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3a:	b916      	cbnz	r6, 8006e42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
 8006e3c:	f8c8 4000 	str.w	r4, [r8]
 8006e40:	e7f7      	b.n	8006e32 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
 8006e42:	4622      	mov	r2, r4
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff ff9a 	bl	8006d80 <FatPartition::fatPut(unsigned long, unsigned long)>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1f5      	bne.n	8006e3c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
 8006e50:	e7ee      	b.n	8006e30 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>

08006e52 <FatPartition::freeChain(unsigned long)>:
 8006e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e54:	4605      	mov	r5, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	aa01      	add	r2, sp, #4
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f7ff ff5a 	bl	8006d16 <FatPartition::fatGet(unsigned long, unsigned long*)>
 8006e62:	1e06      	subs	r6, r0, #0
 8006e64:	db10      	blt.n	8006e88 <FatPartition::freeChain(unsigned long)+0x36>
 8006e66:	2200      	movs	r2, #0
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7ff ff88 	bl	8006d80 <FatPartition::fatPut(unsigned long, unsigned long)>
 8006e70:	b150      	cbz	r0, 8006e88 <FatPartition::freeChain(unsigned long)+0x36>
 8006e72:	68eb      	ldr	r3, [r5, #12]
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	bf84      	itt	hi
 8006e78:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006e7c:	60ec      	strhi	r4, [r5, #12]
 8006e7e:	9c01      	ldr	r4, [sp, #4]
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	d1e9      	bne.n	8006e58 <FatPartition::freeChain(unsigned long)+0x6>
 8006e84:	b002      	add	sp, #8
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e7fb      	b.n	8006e84 <FatPartition::freeChain(unsigned long)+0x32>

08006e8c <FatPartition::init(SdSpiCard*, unsigned char)>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	6001      	str	r1, [r0, #0]
 8006e90:	2101      	movs	r1, #1
 8006e92:	2300      	movs	r3, #0
 8006e94:	60c1      	str	r1, [r0, #12]
 8006e96:	4604      	mov	r4, r0
 8006e98:	f04f 31ff 	mov.w	r1, #4294967295
 8006e9c:	71c3      	strb	r3, [r0, #7]
 8006e9e:	f100 0624 	add.w	r6, r0, #36	; 0x24
 8006ea2:	62a0      	str	r0, [r4, #40]	; 0x28
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8006eaa:	62c1      	str	r1, [r0, #44]	; 0x2c
 8006eac:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
 8006eb0:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
 8006eb4:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
 8006eb8:	b1c2      	cbz	r2, 8006eec <FatPartition::init(SdSpiCard*, unsigned char)+0x60>
 8006eba:	2a04      	cmp	r2, #4
 8006ebc:	d901      	bls.n	8006ec2 <FatPartition::init(SdSpiCard*, unsigned char)+0x36>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff fefb 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d0f6      	beq.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006ed0:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8006ed4:	3d01      	subs	r5, #1
 8006ed6:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 8006eda:	012d      	lsls	r5, r5, #4
 8006edc:	1943      	adds	r3, r0, r5
 8006ede:	791a      	ldrb	r2, [r3, #4]
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	d0ec      	beq.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006ee4:	5d42      	ldrb	r2, [r0, r5]
 8006ee6:	0652      	lsls	r2, r2, #25
 8006ee8:	d1e9      	bne.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006eea:	689d      	ldr	r5, [r3, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7ff fee6 	bl	8006cc2 <FatCache::read(unsigned long, unsigned char)>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d0e1      	beq.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006efa:	7c03      	ldrb	r3, [r0, #16]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d1de      	bne.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006f00:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8006f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f08:	d1d9      	bne.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006f0a:	7b41      	ldrb	r1, [r0, #13]
 8006f0c:	2609      	movs	r6, #9
 8006f0e:	1e4b      	subs	r3, r1, #1
 8006f10:	7163      	strb	r3, [r4, #5]
 8006f12:	2300      	movs	r3, #0
 8006f14:	71a3      	strb	r3, [r4, #6]
 8006f16:	2301      	movs	r3, #1
 8006f18:	7121      	strb	r1, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	d007      	beq.n	8006f2e <FatPartition::init(SdSpiCard*, unsigned char)+0xa2>
 8006f1e:	3e01      	subs	r6, #1
 8006f20:	d0cd      	beq.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006f22:	79a2      	ldrb	r2, [r4, #6]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	3201      	adds	r2, #1
 8006f28:	71a2      	strb	r2, [r4, #6]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	e7f5      	b.n	8006f1a <FatPartition::init(SdSpiCard*, unsigned char)+0x8e>
 8006f2e:	8ac3      	ldrh	r3, [r0, #22]
 8006f30:	6123      	str	r3, [r4, #16]
 8006f32:	b90b      	cbnz	r3, 8006f38 <FatPartition::init(SdSpiCard*, unsigned char)+0xac>
 8006f34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	89c3      	ldrh	r3, [r0, #14]
 8006f3a:	6921      	ldr	r1, [r4, #16]
 8006f3c:	442b      	add	r3, r5
 8006f3e:	61a3      	str	r3, [r4, #24]
 8006f40:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8006f44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006f48:	8122      	strh	r2, [r4, #8]
 8006f4a:	0152      	lsls	r2, r2, #5
 8006f4c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8006f50:	6223      	str	r3, [r4, #32]
 8006f52:	eb03 2352 	add.w	r3, r3, r2, lsr #9
 8006f56:	6163      	str	r3, [r4, #20]
 8006f58:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8006f5c:	b902      	cbnz	r2, 8006f60 <FatPartition::init(SdSpiCard*, unsigned char)+0xd4>
 8006f5e:	6a02      	ldr	r2, [r0, #32]
 8006f60:	1aed      	subs	r5, r5, r3
 8006f62:	79a3      	ldrb	r3, [r4, #6]
 8006f64:	4415      	add	r5, r2
 8006f66:	40dd      	lsrs	r5, r3
 8006f68:	1c6b      	adds	r3, r5, #1
 8006f6a:	61e3      	str	r3, [r4, #28]
 8006f6c:	f640 73f4 	movw	r3, #4084	; 0xff4
 8006f70:	429d      	cmp	r5, r3
 8006f72:	d802      	bhi.n	8006f7a <FatPartition::init(SdSpiCard*, unsigned char)+0xee>
 8006f74:	230c      	movs	r3, #12
 8006f76:	71e3      	strb	r3, [r4, #7]
 8006f78:	e7a1      	b.n	8006ebe <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
 8006f7a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf89      	itett	hi
 8006f82:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
 8006f84:	2310      	movls	r3, #16
 8006f86:	6223      	strhi	r3, [r4, #32]
 8006f88:	2320      	movhi	r3, #32
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	71e3      	strb	r3, [r4, #7]
 8006f8e:	e797      	b.n	8006ec0 <FatPartition::init(SdSpiCard*, unsigned char)+0x34>

08006f90 <FsBaseFile::close()>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4604      	mov	r4, r0
 8006f94:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006f96:	b128      	cbz	r0, 8006fa4 <FsBaseFile::close()+0x14>
 8006f98:	f7ff fa50 	bl	800643c <FatFile::close()>
 8006f9c:	b110      	cbz	r0, 8006fa4 <FsBaseFile::close()+0x14>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63a3      	str	r3, [r4, #56]	; 0x38
 8006fa2:	bd10      	pop	{r4, pc}
 8006fa4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006fa6:	b908      	cbnz	r0, 8006fac <FsBaseFile::close()+0x1c>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e7fa      	b.n	8006fa2 <FsBaseFile::close()+0x12>
 8006fac:	f7fd feb2 	bl	8004d14 <ExFatFile::close()>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0f9      	beq.n	8006fa8 <FsBaseFile::close()+0x18>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006fb8:	e7f3      	b.n	8006fa2 <FsBaseFile::close()+0x12>

08006fba <FsBaseFile::operator=(FsBaseFile const&)>:
 8006fba:	4288      	cmp	r0, r1
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	d013      	beq.n	8006fec <FsBaseFile::operator=(FsBaseFile const&)+0x32>
 8006fc4:	f7ff ffe4 	bl	8006f90 <FsBaseFile::close()>
 8006fc8:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8006fca:	b18c      	cbz	r4, 8006ff0 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
 8006fcc:	4631      	mov	r1, r6
 8006fce:	2024      	movs	r0, #36	; 0x24
 8006fd0:	f000 f861 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	8003      	strh	r3, [r0, #0]
 8006fda:	7083      	strb	r3, [r0, #2]
 8006fdc:	63b0      	str	r0, [r6, #56]	; 0x38
 8006fde:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8006fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	4630      	mov	r0, r6
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0fa      	beq.n	8006fec <FsBaseFile::operator=(FsBaseFile const&)+0x32>
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	2038      	movs	r0, #56	; 0x38
 8006ffa:	f000 f84c 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 8006ffe:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
 8007002:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
 8007006:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
 800700a:	63f0      	str	r0, [r6, #60]	; 0x3c
 800700c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800700e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007012:	f853 1b04 	ldr.w	r1, [r3], #4
 8007016:	4293      	cmp	r3, r2
 8007018:	f840 1b04 	str.w	r1, [r0], #4
 800701c:	d1f9      	bne.n	8007012 <FsBaseFile::operator=(FsBaseFile const&)+0x58>
 800701e:	e7e5      	b.n	8006fec <FsBaseFile::operator=(FsBaseFile const&)+0x32>

08007020 <FsBaseFile::open(FsVolume*, char const*, int)>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	4604      	mov	r4, r0
 8007026:	4617      	mov	r7, r2
 8007028:	4698      	mov	r8, r3
 800702a:	460d      	mov	r5, r1
 800702c:	b911      	cbnz	r1, 8007034 <FsBaseFile::open(FsVolume*, char const*, int)+0x14>
 800702e:	2000      	movs	r0, #0
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	f7ff ffac 	bl	8006f90 <FsBaseFile::close()>
 8007038:	f8d5 6478 	ldr.w	r6, [r5, #1144]	; 0x478
 800703c:	b196      	cbz	r6, 8007064 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
 800703e:	4621      	mov	r1, r4
 8007040:	2024      	movs	r0, #36	; 0x24
 8007042:	f000 f828 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 8007046:	2200      	movs	r2, #0
 8007048:	8002      	strh	r2, [r0, #0]
 800704a:	7082      	strb	r2, [r0, #2]
 800704c:	4643      	mov	r3, r8
 800704e:	63a0      	str	r0, [r4, #56]	; 0x38
 8007050:	463a      	mov	r2, r7
 8007052:	f8d5 1478 	ldr.w	r1, [r5, #1144]	; 0x478
 8007056:	f7ff fa48 	bl	80064ea <FatFile::open(FatVolume*, char const*, int)>
 800705a:	b108      	cbz	r0, 8007060 <FsBaseFile::open(FsVolume*, char const*, int)+0x40>
 800705c:	2001      	movs	r0, #1
 800705e:	e7e7      	b.n	8007030 <FsBaseFile::open(FsVolume*, char const*, int)+0x10>
 8007060:	63a0      	str	r0, [r4, #56]	; 0x38
 8007062:	e7e5      	b.n	8007030 <FsBaseFile::open(FsVolume*, char const*, int)+0x10>
 8007064:	f8d5 347c 	ldr.w	r3, [r5, #1148]	; 0x47c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0e0      	beq.n	800702e <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
 800706c:	4621      	mov	r1, r4
 800706e:	2038      	movs	r0, #56	; 0x38
 8007070:	f000 f811 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 8007074:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
 8007078:	f880 6032 	strb.w	r6, [r0, #50]	; 0x32
 800707c:	f880 6033 	strb.w	r6, [r0, #51]	; 0x33
 8007080:	4643      	mov	r3, r8
 8007082:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007084:	463a      	mov	r2, r7
 8007086:	f8d5 147c 	ldr.w	r1, [r5, #1148]	; 0x47c
 800708a:	f7fe fa14 	bl	80054b6 <ExFatFile::open(ExFatVolume*, char const*, int)>
 800708e:	2800      	cmp	r0, #0
 8007090:	d1e4      	bne.n	800705c <FsBaseFile::open(FsVolume*, char const*, int)+0x3c>
 8007092:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007094:	e7cc      	b.n	8007030 <FsBaseFile::open(FsVolume*, char const*, int)+0x10>

08007096 <operator new(unsigned int, unsigned long*)>:
 8007096:	4608      	mov	r0, r1
 8007098:	4770      	bx	lr
	...

0800709c <FsVolume::begin(SdSpiCard*)>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	2600      	movs	r6, #0
 80070a0:	4604      	mov	r4, r0
 80070a2:	f8c0 1480 	str.w	r1, [r0, #1152]	; 0x480
 80070a6:	f8c0 6478 	str.w	r6, [r0, #1144]	; 0x478
 80070aa:	4601      	mov	r1, r0
 80070ac:	f44f 608f 	mov.w	r0, #1144	; 0x478
 80070b0:	f7ff fff1 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 80070b4:	4605      	mov	r5, r0
 80070b6:	6046      	str	r6, [r0, #4]
 80070b8:	f7fe fd04 	bl	8005ac4 <FsCache::invalidate()>
 80070bc:	f505 7003 	add.w	r0, r5, #524	; 0x20c
 80070c0:	f8c5 6210 	str.w	r6, [r5, #528]	; 0x210
 80070c4:	f7fe fcfe 	bl	8005ac4 <FsCache::invalidate()>
 80070c8:	f885 643c 	strb.w	r6, [r5, #1084]	; 0x43c
 80070cc:	f885 6471 	strb.w	r6, [r5, #1137]	; 0x471
 80070d0:	f885 6472 	strb.w	r6, [r5, #1138]	; 0x472
 80070d4:	f885 6473 	strb.w	r6, [r5, #1139]	; 0x473
 80070d8:	2201      	movs	r2, #1
 80070da:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
 80070de:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7fe fd80 	bl	8005be8 <ExFatPartition::init(SdSpiCard*, unsigned char)>
 80070e8:	4f1a      	ldr	r7, [pc, #104]	; (8007154 <FsVolume::begin(SdSpiCard*)+0xb8>)
 80070ea:	bb20      	cbnz	r0, 8007136 <FsVolume::begin(SdSpiCard*)+0x9a>
 80070ec:	2600      	movs	r6, #0
 80070ee:	4621      	mov	r1, r4
 80070f0:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 80070f4:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80070f8:	f7ff ffcd 	bl	8007096 <operator new(unsigned int, unsigned long*)>
 80070fc:	71c6      	strb	r6, [r0, #7]
 80070fe:	f8a0 643c 	strh.w	r6, [r0, #1084]	; 0x43c
 8007102:	f880 643e 	strb.w	r6, [r0, #1086]	; 0x43e
 8007106:	2201      	movs	r2, #1
 8007108:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
 800710c:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 8007110:	4605      	mov	r5, r0
 8007112:	f7ff febb 	bl	8006e8c <FatPartition::init(SdSpiCard*, unsigned char)>
 8007116:	b148      	cbz	r0, 800712c <FsVolume::begin(SdSpiCard*)+0x90>
 8007118:	f205 463c 	addw	r6, r5, #1084	; 0x43c
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff f98d 	bl	800643c <FatFile::close()>
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	f7fe ff9e 	bl	8006066 <FatFile::openRoot(FatVolume*)>
 800712a:	b978      	cbnz	r0, 800714c <FsVolume::begin(SdSpiCard*)+0xb0>
 800712c:	2000      	movs	r0, #0
 800712e:	6038      	str	r0, [r7, #0]
 8007130:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
 8007134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007136:	f505 6688 	add.w	r6, r5, #1088	; 0x440
 800713a:	4630      	mov	r0, r6
 800713c:	f7fd fdea 	bl	8004d14 <ExFatFile::close()>
 8007140:	4629      	mov	r1, r5
 8007142:	4630      	mov	r0, r6
 8007144:	f7fd fdf0 	bl	8004d28 <ExFatFile::openRoot(ExFatVolume*)>
 8007148:	2800      	cmp	r0, #0
 800714a:	d0cf      	beq.n	80070ec <FsVolume::begin(SdSpiCard*)+0x50>
 800714c:	603c      	str	r4, [r7, #0]
 800714e:	2001      	movs	r0, #1
 8007150:	e7f0      	b.n	8007134 <FsVolume::begin(SdSpiCard*)+0x98>
 8007152:	bf00      	nop
 8007154:	20001b48 	.word	0x20001b48

08007158 <FsVolume::open(char const*, int)>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
 800715c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007160:	2000      	movs	r0, #0
 8007162:	e9c4 0501 	strd	r0, r5, [r4, #4]
 8007166:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
 800716a:	4620      	mov	r0, r4
 800716c:	4d03      	ldr	r5, [pc, #12]	; (800717c <FsVolume::open(char const*, int)+0x24>)
 800716e:	f840 5b10 	str.w	r5, [r0], #16
 8007172:	f7ff ff55 	bl	8007020 <FsBaseFile::open(FsVolume*, char const*, int)>
 8007176:	4620      	mov	r0, r4
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	bf00      	nop
 800717c:	0800a35c 	.word	0x0800a35c

08007180 <SdSpiArduinoDriver::setSckSpeed(unsigned long)>:
 8007180:	2300      	movs	r3, #0
 8007182:	2201      	movs	r2, #1
 8007184:	b530      	push	{r4, r5, lr}
 8007186:	b08b      	sub	sp, #44	; 0x2c
 8007188:	9101      	str	r1, [sp, #4]
 800718a:	f88d 2010 	strb.w	r2, [sp, #16]
 800718e:	f88d 3011 	strb.w	r3, [sp, #17]
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	1d04      	adds	r4, r0, #4
 8007196:	ad01      	add	r5, sp, #4
 8007198:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800719c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800719e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	b00b      	add	sp, #44	; 0x2c
 80071aa:	bd30      	pop	{r4, r5, pc}

080071ac <SdSpiCard::spiStart()>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
 80071b2:	4604      	mov	r4, r0
 80071b4:	b94d      	cbnz	r5, 80071ca <SdSpiCard::spiStart()+0x1e>
 80071b6:	f000 faaa 	bl	800770e <SdSpiArduinoDriver::activate()>
 80071ba:	4629      	mov	r1, r5
 80071bc:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80071c0:	f000 faa3 	bl	800770a <sdCsWrite(unsigned char, bool)>
 80071c4:	2301      	movs	r3, #1
 80071c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80071ca:	bd38      	pop	{r3, r4, r5, pc}

080071cc <SdSpiCard::spiStop()>:
 80071cc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4604      	mov	r4, r0
 80071d4:	b173      	cbz	r3, 80071f4 <SdSpiCard::spiStop()+0x28>
 80071d6:	2101      	movs	r1, #1
 80071d8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80071dc:	f000 fa95 	bl	800770a <sdCsWrite(unsigned char, bool)>
 80071e0:	21ff      	movs	r1, #255	; 0xff
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 facd 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fabd 	bl	8007768 <SdSpiArduinoDriver::deactivate()>
 80071ee:	2300      	movs	r3, #0
 80071f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80071f4:	bd10      	pop	{r4, pc}
	...

080071f8 <SdSpiCard::readData(unsigned char*, unsigned int)>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4690      	mov	r8, r2
 8007202:	4d17      	ldr	r5, [pc, #92]	; (8007260 <SdSpiCard::readData(unsigned char*, unsigned int)+0x68>)
 8007204:	682e      	ldr	r6, [r5, #0]
 8007206:	b2b6      	uxth	r6, r6
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fab0 	bl	800776e <SdSpiArduinoDriver::receive()>
 800720e:	28ff      	cmp	r0, #255	; 0xff
 8007210:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 8007214:	d10e      	bne.n	8007234 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3c>
 8007216:	682b      	ldr	r3, [r5, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	1b9b      	subs	r3, r3, r6
 800721c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007220:	ddf2      	ble.n	8007208 <SdSpiCard::readData(unsigned char*, unsigned int)+0x10>
 8007222:	231d      	movs	r3, #29
 8007224:	4620      	mov	r0, r4
 8007226:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800722a:	f7ff ffcf 	bl	80071cc <SdSpiCard::spiStop()>
 800722e:	2000      	movs	r0, #0
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	28fe      	cmp	r0, #254	; 0xfe
 8007236:	d001      	beq.n	800723c <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
 8007238:	2318      	movs	r3, #24
 800723a:	e7f3      	b.n	8007224 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2c>
 800723c:	4642      	mov	r2, r8
 800723e:	4639      	mov	r1, r7
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fa98 	bl	8007776 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
 8007246:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 800724a:	b108      	cbz	r0, 8007250 <SdSpiCard::readData(unsigned char*, unsigned int)+0x58>
 800724c:	2324      	movs	r3, #36	; 0x24
 800724e:	e7e9      	b.n	8007224 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2c>
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fa8c 	bl	800776e <SdSpiArduinoDriver::receive()>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fa89 	bl	800776e <SdSpiArduinoDriver::receive()>
 800725c:	2001      	movs	r0, #1
 800725e:	e7e7      	b.n	8007230 <SdSpiCard::readData(unsigned char*, unsigned int)+0x38>
 8007260:	20001bd8 	.word	0x20001bd8

08007264 <SdSpiCard::waitNotBusy(unsigned short)>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	4607      	mov	r7, r0
 8007268:	460e      	mov	r6, r1
 800726a:	4c08      	ldr	r4, [pc, #32]	; (800728c <SdSpiCard::waitNotBusy(unsigned short)+0x28>)
 800726c:	6825      	ldr	r5, [r4, #0]
 800726e:	b2ad      	uxth	r5, r5
 8007270:	4638      	mov	r0, r7
 8007272:	f000 fa7c 	bl	800776e <SdSpiArduinoDriver::receive()>
 8007276:	28ff      	cmp	r0, #255	; 0xff
 8007278:	d006      	beq.n	8007288 <SdSpiCard::waitNotBusy(unsigned short)+0x24>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	1b5b      	subs	r3, r3, r5
 8007280:	42b3      	cmp	r3, r6
 8007282:	ddf5      	ble.n	8007270 <SdSpiCard::waitNotBusy(unsigned short)+0xc>
 8007284:	2000      	movs	r0, #0
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007288:	2001      	movs	r0, #1
 800728a:	e7fc      	b.n	8007286 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
 800728c:	20001bd8 	.word	0x20001bd8

08007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
 8007290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007292:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	9201      	str	r2, [sp, #4]
 800729c:	b90b      	cbnz	r3, 80072a2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x12>
 800729e:	f7ff ff85 	bl	80071ac <SdSpiCard::spiStart()>
 80072a2:	b125      	cbz	r5, 80072ae <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
 80072a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff ffdb 	bl	8007264 <SdSpiCard::waitNotBusy(unsigned short)>
 80072ae:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fa65 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fa60 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072c2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fa5b 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072cc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fa56 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fa51 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	bf0c      	ite	eq
 80072e4:	2195      	moveq	r1, #149	; 0x95
 80072e6:	2187      	movne	r1, #135	; 0x87
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fa4a 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fa3d 	bl	800776e <SdSpiArduinoDriver::receive()>
 80072f4:	250b      	movs	r5, #11
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fa39 	bl	800776e <SdSpiArduinoDriver::receive()>
 80072fc:	0603      	lsls	r3, r0, #24
 80072fe:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 8007302:	d503      	bpl.n	800730c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7c>
 8007304:	3d01      	subs	r5, #1
 8007306:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800730a:	d1f4      	bne.n	80072f6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x66>
 800730c:	b003      	add	sp, #12
 800730e:	bd30      	pop	{r4, r5, pc}

08007310 <SdSpiCard::cardAcmd(unsigned char, unsigned long)>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	460d      	mov	r5, r1
 8007316:	4616      	mov	r6, r2
 8007318:	2137      	movs	r1, #55	; 0x37
 800731a:	2200      	movs	r2, #0
 800731c:	f7ff ffb8 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 8007320:	4632      	mov	r2, r6
 8007322:	4629      	mov	r1, r5
 8007324:	4620      	mov	r0, r4
 8007326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800732a:	f7ff bfb1 	b.w	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
	...

08007330 <SdSpiCard::begin(SdSpiConfig)>:
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	b088      	sub	sp, #32
 8007338:	f04f 0900 	mov.w	r9, #0
 800733c:	ad01      	add	r5, sp, #4
 800733e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8007342:	f89d a005 	ldrb.w	sl, [sp, #5]
 8007346:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800734a:	ea6f 0a0a 	mvn.w	sl, sl
 800734e:	4f61      	ldr	r7, [pc, #388]	; (80074d4 <SdSpiCard::begin(SdSpiConfig)+0x1a4>)
 8007350:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8007354:	f884 902f 	strb.w	r9, [r4, #47]	; 0x2f
 8007358:	f884 9032 	strb.w	r9, [r4, #50]	; 0x32
 800735c:	9e02      	ldr	r6, [sp, #8]
 800735e:	f8d7 8000 	ldr.w	r8, [r7]
 8007362:	f000 f9cf 	bl	8007704 <sdCsInit(unsigned char)>
 8007366:	2101      	movs	r1, #1
 8007368:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800736c:	f000 f9cd 	bl	800770a <sdCsWrite(unsigned char, bool)>
 8007370:	4959      	ldr	r1, [pc, #356]	; (80074d8 <SdSpiCard::begin(SdSpiConfig)+0x1a8>)
 8007372:	4620      	mov	r0, r4
 8007374:	f7ff ff04 	bl	8007180 <SdSpiArduinoDriver::setSckSpeed(unsigned long)>
 8007378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800737c:	ab05      	add	r3, sp, #20
 800737e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007382:	f3ca 1ac0 	ubfx	sl, sl, #7, #1
 8007386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007388:	4620      	mov	r0, r4
 800738a:	f000 f9dd 	bl	8007748 <SdSpiArduinoDriver::begin(SdSpiConfig)>
 800738e:	4620      	mov	r0, r4
 8007390:	f884 a02d 	strb.w	sl, [r4, #45]	; 0x2d
 8007394:	f884 9030 	strb.w	r9, [r4, #48]	; 0x30
 8007398:	f884 902c 	strb.w	r9, [r4, #44]	; 0x2c
 800739c:	f000 f9b7 	bl	800770e <SdSpiArduinoDriver::activate()>
 80073a0:	4649      	mov	r1, r9
 80073a2:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80073a6:	f000 f9b0 	bl	800770a <sdCsWrite(unsigned char, bool)>
 80073aa:	2101      	movs	r1, #1
 80073ac:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80073b0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80073b4:	f000 f9a9 	bl	800770a <sdCsWrite(unsigned char, bool)>
 80073b8:	250a      	movs	r5, #10
 80073ba:	21ff      	movs	r1, #255	; 0xff
 80073bc:	4620      	mov	r0, r4
 80073be:	3d01      	subs	r5, #1
 80073c0:	f000 f9df 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80073c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80073c8:	d1f7      	bne.n	80073ba <SdSpiCard::begin(SdSpiConfig)+0x8a>
 80073ca:	4629      	mov	r1, r5
 80073cc:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80073d0:	f000 f99b 	bl	800770a <sdCsWrite(unsigned char, bool)>
 80073d4:	250a      	movs	r5, #10
 80073d6:	2200      	movs	r2, #0
 80073d8:	4620      	mov	r0, r4
 80073da:	4611      	mov	r1, r2
 80073dc:	f7ff ff58 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 80073e0:	2801      	cmp	r0, #1
 80073e2:	4681      	mov	r9, r0
 80073e4:	d01a      	beq.n	800741c <SdSpiCard::begin(SdSpiConfig)+0xec>
 80073e6:	3d01      	subs	r5, #1
 80073e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80073ec:	d109      	bne.n	8007402 <SdSpiCard::begin(SdSpiConfig)+0xd2>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4620      	mov	r0, r4
 80073f2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80073f6:	f7ff fee9 	bl	80071cc <SdSpiCard::spiStop()>
 80073fa:	2000      	movs	r0, #0
 80073fc:	b008      	add	sp, #32
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	21fd      	movs	r1, #253	; 0xfd
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f9bc 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 800740a:	f44f 7902 	mov.w	r9, #520	; 0x208
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f9ad 	bl	800776e <SdSpiArduinoDriver::receive()>
 8007414:	f1b9 0901 	subs.w	r9, r9, #1
 8007418:	d1f9      	bne.n	800740e <SdSpiCard::begin(SdSpiConfig)+0xde>
 800741a:	e7dc      	b.n	80073d6 <SdSpiCard::begin(SdSpiConfig)+0xa6>
 800741c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007420:	2108      	movs	r1, #8
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff ff34 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 8007428:	0743      	lsls	r3, r0, #29
 800742a:	d410      	bmi.n	800744e <SdSpiCard::begin(SdSpiConfig)+0x11e>
 800742c:	2302      	movs	r3, #2
 800742e:	2504      	movs	r5, #4
 8007430:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8007434:	4620      	mov	r0, r4
 8007436:	f000 f99a 	bl	800776e <SdSpiArduinoDriver::receive()>
 800743a:	3d01      	subs	r5, #1
 800743c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8007440:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 8007444:	d1f6      	bne.n	8007434 <SdSpiCard::begin(SdSpiConfig)+0x104>
 8007446:	28aa      	cmp	r0, #170	; 0xaa
 8007448:	d003      	beq.n	8007452 <SdSpiCard::begin(SdSpiConfig)+0x122>
 800744a:	2306      	movs	r3, #6
 800744c:	e7d0      	b.n	80073f0 <SdSpiCard::begin(SdSpiConfig)+0xc0>
 800744e:	f884 9032 	strb.w	r9, [r4, #50]	; 0x32
 8007452:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007456:	fa1f f888 	uxth.w	r8, r8
 800745a:	2b02      	cmp	r3, #2
 800745c:	bf0c      	ite	eq
 800745e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8007462:	2500      	movne	r5, #0
 8007464:	462a      	mov	r2, r5
 8007466:	2129      	movs	r1, #41	; 0x29
 8007468:	4620      	mov	r0, r4
 800746a:	f7ff ff51 	bl	8007310 <SdSpiCard::cardAcmd(unsigned char, unsigned long)>
 800746e:	4602      	mov	r2, r0
 8007470:	b140      	cbz	r0, 8007484 <SdSpiCard::begin(SdSpiConfig)+0x154>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	eba3 0308 	sub.w	r3, r3, r8
 800747a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800747e:	ddf1      	ble.n	8007464 <SdSpiCard::begin(SdSpiConfig)+0x134>
 8007480:	2317      	movs	r3, #23
 8007482:	e7b5      	b.n	80073f0 <SdSpiCard::begin(SdSpiConfig)+0xc0>
 8007484:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007488:	2b02      	cmp	r3, #2
 800748a:	d11a      	bne.n	80074c2 <SdSpiCard::begin(SdSpiConfig)+0x192>
 800748c:	213a      	movs	r1, #58	; 0x3a
 800748e:	4620      	mov	r0, r4
 8007490:	f7ff fefe 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 8007494:	b108      	cbz	r0, 800749a <SdSpiCard::begin(SdSpiConfig)+0x16a>
 8007496:	2312      	movs	r3, #18
 8007498:	e7aa      	b.n	80073f0 <SdSpiCard::begin(SdSpiConfig)+0xc0>
 800749a:	4620      	mov	r0, r4
 800749c:	f000 f967 	bl	800776e <SdSpiArduinoDriver::receive()>
 80074a0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80074a4:	28c0      	cmp	r0, #192	; 0xc0
 80074a6:	bf08      	it	eq
 80074a8:	2303      	moveq	r3, #3
 80074aa:	4620      	mov	r0, r4
 80074ac:	bf08      	it	eq
 80074ae:	f884 3032 	strbeq.w	r3, [r4, #50]	; 0x32
 80074b2:	f000 f95c 	bl	800776e <SdSpiArduinoDriver::receive()>
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 f959 	bl	800776e <SdSpiArduinoDriver::receive()>
 80074bc:	4620      	mov	r0, r4
 80074be:	f000 f956 	bl	800776e <SdSpiArduinoDriver::receive()>
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fe82 	bl	80071cc <SdSpiCard::spiStop()>
 80074c8:	4620      	mov	r0, r4
 80074ca:	4631      	mov	r1, r6
 80074cc:	f7ff fe58 	bl	8007180 <SdSpiArduinoDriver::setSckSpeed(unsigned long)>
 80074d0:	2001      	movs	r0, #1
 80074d2:	e793      	b.n	80073fc <SdSpiCard::begin(SdSpiConfig)+0xcc>
 80074d4:	20001bd8 	.word	0x20001bd8
 80074d8:	00061a80 	.word	0x00061a80

080074dc <SdSpiCard::readStart(unsigned long)>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80074e2:	460a      	mov	r2, r1
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	bf18      	it	ne
 80074e8:	024a      	lslne	r2, r1, #9
 80074ea:	2112      	movs	r1, #18
 80074ec:	4604      	mov	r4, r0
 80074ee:	f7ff fecf 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 80074f2:	b138      	cbz	r0, 8007504 <SdSpiCard::readStart(unsigned long)+0x28>
 80074f4:	230c      	movs	r3, #12
 80074f6:	4620      	mov	r0, r4
 80074f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80074fc:	f7ff fe66 	bl	80071cc <SdSpiCard::spiStop()>
 8007500:	2000      	movs	r0, #0
 8007502:	bd10      	pop	{r4, pc}
 8007504:	2001      	movs	r0, #1
 8007506:	e7fc      	b.n	8007502 <SdSpiCard::readStart(unsigned long)+0x26>

08007508 <SdSpiCard::readStop()>:
 8007508:	b510      	push	{r4, lr}
 800750a:	2200      	movs	r2, #0
 800750c:	210c      	movs	r1, #12
 800750e:	4604      	mov	r4, r0
 8007510:	f7ff febe 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 8007514:	b138      	cbz	r0, 8007526 <SdSpiCard::readStop()+0x1e>
 8007516:	2309      	movs	r3, #9
 8007518:	4620      	mov	r0, r4
 800751a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800751e:	f7ff fe55 	bl	80071cc <SdSpiCard::spiStop()>
 8007522:	2000      	movs	r0, #0
 8007524:	bd10      	pop	{r4, pc}
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff fe50 	bl	80071cc <SdSpiCard::spiStop()>
 800752c:	2001      	movs	r0, #1
 800752e:	e7f9      	b.n	8007524 <SdSpiCard::readStop()+0x1c>

08007530 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4604      	mov	r4, r0
 8007534:	4615      	mov	r5, r2
 8007536:	f000 f924 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 800753a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	f000 f921 	bl	8007788 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
 8007546:	21ff      	movs	r1, #255	; 0xff
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f91a 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 800754e:	21ff      	movs	r1, #255	; 0xff
 8007550:	4620      	mov	r0, r4
 8007552:	f000 f916 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f909 	bl	800776e <SdSpiArduinoDriver::receive()>
 800755c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 8007560:	f000 001f 	and.w	r0, r0, #31
 8007564:	2805      	cmp	r0, #5
 8007566:	d007      	beq.n	8007578 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
 8007568:	231f      	movs	r3, #31
 800756a:	4620      	mov	r0, r4
 800756c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8007570:	f7ff fe2c 	bl	80071cc <SdSpiCard::spiStop()>
 8007574:	2000      	movs	r0, #0
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	2001      	movs	r0, #1
 800757a:	e7fc      	b.n	8007576 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

0800757c <SdSpiCard::writeData(unsigned char const*)>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	460d      	mov	r5, r1
 8007580:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007584:	4604      	mov	r4, r0
 8007586:	f7ff fe6d 	bl	8007264 <SdSpiCard::waitNotBusy(unsigned short)>
 800758a:	b938      	cbnz	r0, 800759c <SdSpiCard::writeData(unsigned char const*)+0x20>
 800758c:	2323      	movs	r3, #35	; 0x23
 800758e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff fe1a 	bl	80071cc <SdSpiCard::spiStop()>
 8007598:	2000      	movs	r0, #0
 800759a:	e006      	b.n	80075aa <SdSpiCard::writeData(unsigned char const*)+0x2e>
 800759c:	462a      	mov	r2, r5
 800759e:	21fc      	movs	r1, #252	; 0xfc
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff ffc5 	bl	8007530 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0f3      	beq.n	8007592 <SdSpiCard::writeData(unsigned char const*)+0x16>
 80075aa:	bd38      	pop	{r3, r4, r5, pc}

080075ac <SdSpiCard::writeStart(unsigned long)>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80075b2:	460a      	mov	r2, r1
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	bf18      	it	ne
 80075b8:	024a      	lslne	r2, r1, #9
 80075ba:	2119      	movs	r1, #25
 80075bc:	4604      	mov	r4, r0
 80075be:	f7ff fe67 	bl	8007290 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
 80075c2:	b138      	cbz	r0, 80075d4 <SdSpiCard::writeStart(unsigned long)+0x28>
 80075c4:	230e      	movs	r3, #14
 80075c6:	4620      	mov	r0, r4
 80075c8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80075cc:	f7ff fdfe 	bl	80071cc <SdSpiCard::spiStop()>
 80075d0:	2000      	movs	r0, #0
 80075d2:	bd10      	pop	{r4, pc}
 80075d4:	2001      	movs	r0, #1
 80075d6:	e7fc      	b.n	80075d2 <SdSpiCard::writeStart(unsigned long)+0x26>

080075d8 <SdSpiCard::writeStop()>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	f44f 7116 	mov.w	r1, #600	; 0x258
 80075de:	4604      	mov	r4, r0
 80075e0:	f7ff fe40 	bl	8007264 <SdSpiCard::waitNotBusy(unsigned short)>
 80075e4:	4605      	mov	r5, r0
 80075e6:	b140      	cbz	r0, 80075fa <SdSpiCard::writeStop()+0x22>
 80075e8:	21fd      	movs	r1, #253	; 0xfd
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 f8c9 	bl	8007782 <SdSpiArduinoDriver::send(unsigned char)>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7ff fdeb 	bl	80071cc <SdSpiCard::spiStop()>
 80075f6:	4628      	mov	r0, r5
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	231e      	movs	r3, #30
 80075fc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8007600:	e7f6      	b.n	80075f0 <SdSpiCard::writeStop()+0x18>

08007602 <SdSpiCard::syncDevice()>:
 8007602:	b510      	push	{r4, lr}
 8007604:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007608:	4604      	mov	r4, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d109      	bne.n	8007622 <SdSpiCard::syncDevice()+0x20>
 800760e:	f7ff ff7b 	bl	8007508 <SdSpiCard::readStop()>
 8007612:	b120      	cbz	r0, 800761e <SdSpiCard::syncDevice()+0x1c>
 8007614:	2300      	movs	r3, #0
 8007616:	2001      	movs	r0, #1
 8007618:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800761c:	bd10      	pop	{r4, pc}
 800761e:	2000      	movs	r0, #0
 8007620:	e7fc      	b.n	800761c <SdSpiCard::syncDevice()+0x1a>
 8007622:	2b02      	cmp	r3, #2
 8007624:	d1f6      	bne.n	8007614 <SdSpiCard::syncDevice()+0x12>
 8007626:	f7ff ffd7 	bl	80075d8 <SdSpiCard::writeStop()>
 800762a:	e7f2      	b.n	8007612 <SdSpiCard::syncDevice()+0x10>

0800762c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	461f      	mov	r7, r3
 8007630:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007634:	4604      	mov	r4, r0
 8007636:	2b01      	cmp	r3, #1
 8007638:	460d      	mov	r5, r1
 800763a:	4616      	mov	r6, r2
 800763c:	d102      	bne.n	8007644 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
 800763e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007640:	428b      	cmp	r3, r1
 8007642:	d00f      	beq.n	8007664 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff ffdc 	bl	8007602 <SdSpiCard::syncDevice()>
 800764a:	b908      	cbnz	r0, 8007650 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
 800764c:	2000      	movs	r0, #0
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff ff42 	bl	80074dc <SdSpiCard::readStart(unsigned long)>
 8007658:	2800      	cmp	r0, #0
 800765a:	d0f7      	beq.n	800764c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
 800765c:	2301      	movs	r3, #1
 800765e:	62a5      	str	r5, [r4, #40]	; 0x28
 8007660:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8007664:	2500      	movs	r5, #0
 8007666:	42bd      	cmp	r5, r7
 8007668:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 800766c:	d008      	beq.n	8007680 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
 800766e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fdc0 	bl	80071f8 <SdSpiCard::readData(unsigned char*, unsigned int)>
 8007678:	2800      	cmp	r0, #0
 800767a:	d0e7      	beq.n	800764c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
 800767c:	3501      	adds	r5, #1
 800767e:	e7f2      	b.n	8007666 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3a>
 8007680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007682:	441d      	add	r5, r3
 8007684:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007688:	62a5      	str	r5, [r4, #40]	; 0x28
 800768a:	b123      	cbz	r3, 8007696 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
 800768c:	4620      	mov	r0, r4
 800768e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007692:	f7ff bfb6 	b.w	8007602 <SdSpiCard::syncDevice()>
 8007696:	2001      	movs	r0, #1
 8007698:	e7d9      	b.n	800764e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>

0800769a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 800769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769c:	461f      	mov	r7, r3
 800769e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80076a2:	4604      	mov	r4, r0
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	460d      	mov	r5, r1
 80076a8:	4616      	mov	r6, r2
 80076aa:	d102      	bne.n	80076b2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
 80076ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80076ae:	428b      	cmp	r3, r1
 80076b0:	d00f      	beq.n	80076d2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff ffa5 	bl	8007602 <SdSpiCard::syncDevice()>
 80076b8:	b908      	cbnz	r0, 80076be <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
 80076ba:	2000      	movs	r0, #0
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076be:	4629      	mov	r1, r5
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7ff ff73 	bl	80075ac <SdSpiCard::writeStart(unsigned long)>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0f7      	beq.n	80076ba <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
 80076ca:	2302      	movs	r3, #2
 80076cc:	62a5      	str	r5, [r4, #40]	; 0x28
 80076ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80076d2:	2500      	movs	r5, #0
 80076d4:	42bd      	cmp	r5, r7
 80076d6:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 80076da:	d006      	beq.n	80076ea <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff ff4d 	bl	800757c <SdSpiCard::writeData(unsigned char const*)>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0e9      	beq.n	80076ba <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
 80076e6:	3501      	adds	r5, #1
 80076e8:	e7f4      	b.n	80076d4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3a>
 80076ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076ec:	441d      	add	r5, r3
 80076ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80076f2:	62a5      	str	r5, [r4, #40]	; 0x28
 80076f4:	b123      	cbz	r3, 8007700 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
 80076f6:	4620      	mov	r0, r4
 80076f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076fc:	f7ff bf81 	b.w	8007602 <SdSpiCard::syncDevice()>
 8007700:	2001      	movs	r0, #1
 8007702:	e7db      	b.n	80076bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>

08007704 <sdCsInit(unsigned char)>:
 8007704:	2100      	movs	r1, #0
 8007706:	f7fb bc23 	b.w	8002f50 <pinMode(unsigned char, WiringPinMode)>

0800770a <sdCsWrite(unsigned char, bool)>:
 800770a:	f7fb bda7 	b.w	800325c <digitalWrite(unsigned char, unsigned char)>

0800770e <SdSpiArduinoDriver::activate()>:
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	b092      	sub	sp, #72	; 0x48
 8007714:	f854 6b04 	ldr.w	r6, [r4], #4
 8007718:	ad09      	add	r5, sp, #36	; 0x24
 800771a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800771c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800771e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	466c      	mov	r4, sp
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	ad0b      	add	r5, sp, #44	; 0x2c
 800772a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800772c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800772e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007736:	ab09      	add	r3, sp, #36	; 0x24
 8007738:	cb0c      	ldmia	r3, {r2, r3}
 800773a:	2104      	movs	r1, #4
 800773c:	4630      	mov	r0, r6
 800773e:	f000 fadd 	bl	8007cfc <SPIClass::beginTransaction(unsigned char, SPISettings)>
 8007742:	b012      	add	sp, #72	; 0x48
 8007744:	bd70      	pop	{r4, r5, r6, pc}
	...

08007748 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
 8007748:	b084      	sub	sp, #16
 800774a:	f10d 0c10 	add.w	ip, sp, #16
 800774e:	e90c 000e 	stmdb	ip, {r1, r2, r3}
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	b123      	cbz	r3, 8007760 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	6800      	ldr	r0, [r0, #0]
 800775a:	b004      	add	sp, #16
 800775c:	f000 ba7f 	b.w	8007c5e <SPIClass::begin()>
 8007760:	4b00      	ldr	r3, [pc, #0]	; (8007764 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>)
 8007762:	e7f8      	b.n	8007756 <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
 8007764:	20001b50 	.word	0x20001b50

08007768 <SdSpiArduinoDriver::deactivate()>:
 8007768:	6800      	ldr	r0, [r0, #0]
 800776a:	f000 bae7 	b.w	8007d3c <SPIClass::endTransaction()>

0800776e <SdSpiArduinoDriver::receive()>:
 800776e:	21ff      	movs	r1, #255	; 0xff
 8007770:	6800      	ldr	r0, [r0, #0]
 8007772:	f000 bae4 	b.w	8007d3e <SPIClass::transfer(unsigned char) const>

08007776 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
 8007776:	b293      	uxth	r3, r2
 8007778:	6800      	ldr	r0, [r0, #0]
 800777a:	460a      	mov	r2, r1
 800777c:	2100      	movs	r1, #0
 800777e:	f000 bb99 	b.w	8007eb4 <SPIClass::dmaTransfer(void const*, void*, unsigned short)>

08007782 <SdSpiArduinoDriver::send(unsigned char)>:
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	f000 badb 	b.w	8007d3e <SPIClass::transfer(unsigned char) const>

08007788 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
 8007788:	b293      	uxth	r3, r2
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	f000 bb91 	b.w	8007eb4 <SPIClass::dmaTransfer(void const*, void*, unsigned short)>
	...

08007794 <__aeabi_uldivmod>:
 8007794:	b953      	cbnz	r3, 80077ac <__aeabi_uldivmod+0x18>
 8007796:	b94a      	cbnz	r2, 80077ac <__aeabi_uldivmod+0x18>
 8007798:	2900      	cmp	r1, #0
 800779a:	bf08      	it	eq
 800779c:	2800      	cmpeq	r0, #0
 800779e:	bf1c      	itt	ne
 80077a0:	f04f 31ff 	movne.w	r1, #4294967295
 80077a4:	f04f 30ff 	movne.w	r0, #4294967295
 80077a8:	f000 b974 	b.w	8007a94 <__aeabi_idiv0>
 80077ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80077b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80077b4:	f000 f806 	bl	80077c4 <__udivmoddi4>
 80077b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80077bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c0:	b004      	add	sp, #16
 80077c2:	4770      	bx	lr

080077c4 <__udivmoddi4>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	468c      	mov	ip, r1
 80077ca:	4604      	mov	r4, r0
 80077cc:	9e08      	ldr	r6, [sp, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d14b      	bne.n	800786a <__udivmoddi4+0xa6>
 80077d2:	428a      	cmp	r2, r1
 80077d4:	4615      	mov	r5, r2
 80077d6:	d967      	bls.n	80078a8 <__udivmoddi4+0xe4>
 80077d8:	fab2 f282 	clz	r2, r2
 80077dc:	b14a      	cbz	r2, 80077f2 <__udivmoddi4+0x2e>
 80077de:	f1c2 0720 	rsb	r7, r2, #32
 80077e2:	fa01 f302 	lsl.w	r3, r1, r2
 80077e6:	fa20 f707 	lsr.w	r7, r0, r7
 80077ea:	4095      	lsls	r5, r2
 80077ec:	ea47 0c03 	orr.w	ip, r7, r3
 80077f0:	4094      	lsls	r4, r2
 80077f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80077f6:	fbbc f7fe 	udiv	r7, ip, lr
 80077fa:	fa1f f885 	uxth.w	r8, r5
 80077fe:	fb0e c317 	mls	r3, lr, r7, ip
 8007802:	fb07 f908 	mul.w	r9, r7, r8
 8007806:	0c21      	lsrs	r1, r4, #16
 8007808:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800780c:	4599      	cmp	r9, r3
 800780e:	d909      	bls.n	8007824 <__udivmoddi4+0x60>
 8007810:	18eb      	adds	r3, r5, r3
 8007812:	f107 31ff 	add.w	r1, r7, #4294967295
 8007816:	f080 811c 	bcs.w	8007a52 <__udivmoddi4+0x28e>
 800781a:	4599      	cmp	r9, r3
 800781c:	f240 8119 	bls.w	8007a52 <__udivmoddi4+0x28e>
 8007820:	3f02      	subs	r7, #2
 8007822:	442b      	add	r3, r5
 8007824:	eba3 0309 	sub.w	r3, r3, r9
 8007828:	fbb3 f0fe 	udiv	r0, r3, lr
 800782c:	fb0e 3310 	mls	r3, lr, r0, r3
 8007830:	fb00 f108 	mul.w	r1, r0, r8
 8007834:	b2a4      	uxth	r4, r4
 8007836:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800783a:	42a1      	cmp	r1, r4
 800783c:	d909      	bls.n	8007852 <__udivmoddi4+0x8e>
 800783e:	192c      	adds	r4, r5, r4
 8007840:	f100 33ff 	add.w	r3, r0, #4294967295
 8007844:	f080 8107 	bcs.w	8007a56 <__udivmoddi4+0x292>
 8007848:	42a1      	cmp	r1, r4
 800784a:	f240 8104 	bls.w	8007a56 <__udivmoddi4+0x292>
 800784e:	3802      	subs	r0, #2
 8007850:	442c      	add	r4, r5
 8007852:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007856:	2700      	movs	r7, #0
 8007858:	1a64      	subs	r4, r4, r1
 800785a:	b11e      	cbz	r6, 8007864 <__udivmoddi4+0xa0>
 800785c:	2300      	movs	r3, #0
 800785e:	40d4      	lsrs	r4, r2
 8007860:	e9c6 4300 	strd	r4, r3, [r6]
 8007864:	4639      	mov	r1, r7
 8007866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786a:	428b      	cmp	r3, r1
 800786c:	d909      	bls.n	8007882 <__udivmoddi4+0xbe>
 800786e:	2e00      	cmp	r6, #0
 8007870:	f000 80ec 	beq.w	8007a4c <__udivmoddi4+0x288>
 8007874:	2700      	movs	r7, #0
 8007876:	e9c6 0100 	strd	r0, r1, [r6]
 800787a:	4638      	mov	r0, r7
 800787c:	4639      	mov	r1, r7
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	fab3 f783 	clz	r7, r3
 8007886:	2f00      	cmp	r7, #0
 8007888:	d148      	bne.n	800791c <__udivmoddi4+0x158>
 800788a:	428b      	cmp	r3, r1
 800788c:	d302      	bcc.n	8007894 <__udivmoddi4+0xd0>
 800788e:	4282      	cmp	r2, r0
 8007890:	f200 80fb 	bhi.w	8007a8a <__udivmoddi4+0x2c6>
 8007894:	1a84      	subs	r4, r0, r2
 8007896:	eb61 0303 	sbc.w	r3, r1, r3
 800789a:	2001      	movs	r0, #1
 800789c:	469c      	mov	ip, r3
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d0e0      	beq.n	8007864 <__udivmoddi4+0xa0>
 80078a2:	e9c6 4c00 	strd	r4, ip, [r6]
 80078a6:	e7dd      	b.n	8007864 <__udivmoddi4+0xa0>
 80078a8:	b902      	cbnz	r2, 80078ac <__udivmoddi4+0xe8>
 80078aa:	deff      	udf	#255	; 0xff
 80078ac:	fab2 f282 	clz	r2, r2
 80078b0:	2a00      	cmp	r2, #0
 80078b2:	f040 808f 	bne.w	80079d4 <__udivmoddi4+0x210>
 80078b6:	2701      	movs	r7, #1
 80078b8:	1b49      	subs	r1, r1, r5
 80078ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80078be:	fa1f f985 	uxth.w	r9, r5
 80078c2:	fbb1 fef8 	udiv	lr, r1, r8
 80078c6:	fb08 111e 	mls	r1, r8, lr, r1
 80078ca:	fb09 f00e 	mul.w	r0, r9, lr
 80078ce:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80078d2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80078d6:	4298      	cmp	r0, r3
 80078d8:	d907      	bls.n	80078ea <__udivmoddi4+0x126>
 80078da:	18eb      	adds	r3, r5, r3
 80078dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80078e0:	d202      	bcs.n	80078e8 <__udivmoddi4+0x124>
 80078e2:	4298      	cmp	r0, r3
 80078e4:	f200 80cd 	bhi.w	8007a82 <__udivmoddi4+0x2be>
 80078e8:	468e      	mov	lr, r1
 80078ea:	1a1b      	subs	r3, r3, r0
 80078ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80078f0:	fb08 3310 	mls	r3, r8, r0, r3
 80078f4:	fb09 f900 	mul.w	r9, r9, r0
 80078f8:	b2a4      	uxth	r4, r4
 80078fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80078fe:	45a1      	cmp	r9, r4
 8007900:	d907      	bls.n	8007912 <__udivmoddi4+0x14e>
 8007902:	192c      	adds	r4, r5, r4
 8007904:	f100 33ff 	add.w	r3, r0, #4294967295
 8007908:	d202      	bcs.n	8007910 <__udivmoddi4+0x14c>
 800790a:	45a1      	cmp	r9, r4
 800790c:	f200 80b6 	bhi.w	8007a7c <__udivmoddi4+0x2b8>
 8007910:	4618      	mov	r0, r3
 8007912:	eba4 0409 	sub.w	r4, r4, r9
 8007916:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800791a:	e79e      	b.n	800785a <__udivmoddi4+0x96>
 800791c:	f1c7 0520 	rsb	r5, r7, #32
 8007920:	40bb      	lsls	r3, r7
 8007922:	fa22 fc05 	lsr.w	ip, r2, r5
 8007926:	ea4c 0c03 	orr.w	ip, ip, r3
 800792a:	fa21 f405 	lsr.w	r4, r1, r5
 800792e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8007932:	fbb4 f9fe 	udiv	r9, r4, lr
 8007936:	fa1f f88c 	uxth.w	r8, ip
 800793a:	fb0e 4419 	mls	r4, lr, r9, r4
 800793e:	fa20 f305 	lsr.w	r3, r0, r5
 8007942:	40b9      	lsls	r1, r7
 8007944:	fb09 fa08 	mul.w	sl, r9, r8
 8007948:	4319      	orrs	r1, r3
 800794a:	0c0b      	lsrs	r3, r1, #16
 800794c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007950:	45a2      	cmp	sl, r4
 8007952:	fa02 f207 	lsl.w	r2, r2, r7
 8007956:	fa00 f307 	lsl.w	r3, r0, r7
 800795a:	d90b      	bls.n	8007974 <__udivmoddi4+0x1b0>
 800795c:	eb1c 0404 	adds.w	r4, ip, r4
 8007960:	f109 30ff 	add.w	r0, r9, #4294967295
 8007964:	f080 8088 	bcs.w	8007a78 <__udivmoddi4+0x2b4>
 8007968:	45a2      	cmp	sl, r4
 800796a:	f240 8085 	bls.w	8007a78 <__udivmoddi4+0x2b4>
 800796e:	f1a9 0902 	sub.w	r9, r9, #2
 8007972:	4464      	add	r4, ip
 8007974:	eba4 040a 	sub.w	r4, r4, sl
 8007978:	fbb4 f0fe 	udiv	r0, r4, lr
 800797c:	fb0e 4410 	mls	r4, lr, r0, r4
 8007980:	fb00 fa08 	mul.w	sl, r0, r8
 8007984:	b289      	uxth	r1, r1
 8007986:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800798a:	45a2      	cmp	sl, r4
 800798c:	d908      	bls.n	80079a0 <__udivmoddi4+0x1dc>
 800798e:	eb1c 0404 	adds.w	r4, ip, r4
 8007992:	f100 31ff 	add.w	r1, r0, #4294967295
 8007996:	d26b      	bcs.n	8007a70 <__udivmoddi4+0x2ac>
 8007998:	45a2      	cmp	sl, r4
 800799a:	d969      	bls.n	8007a70 <__udivmoddi4+0x2ac>
 800799c:	3802      	subs	r0, #2
 800799e:	4464      	add	r4, ip
 80079a0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80079a4:	fba0 8902 	umull	r8, r9, r0, r2
 80079a8:	eba4 040a 	sub.w	r4, r4, sl
 80079ac:	454c      	cmp	r4, r9
 80079ae:	4641      	mov	r1, r8
 80079b0:	46ce      	mov	lr, r9
 80079b2:	d354      	bcc.n	8007a5e <__udivmoddi4+0x29a>
 80079b4:	d051      	beq.n	8007a5a <__udivmoddi4+0x296>
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	d069      	beq.n	8007a8e <__udivmoddi4+0x2ca>
 80079ba:	1a5a      	subs	r2, r3, r1
 80079bc:	eb64 040e 	sbc.w	r4, r4, lr
 80079c0:	fa04 f505 	lsl.w	r5, r4, r5
 80079c4:	fa22 f307 	lsr.w	r3, r2, r7
 80079c8:	40fc      	lsrs	r4, r7
 80079ca:	431d      	orrs	r5, r3
 80079cc:	e9c6 5400 	strd	r5, r4, [r6]
 80079d0:	2700      	movs	r7, #0
 80079d2:	e747      	b.n	8007864 <__udivmoddi4+0xa0>
 80079d4:	4095      	lsls	r5, r2
 80079d6:	f1c2 0320 	rsb	r3, r2, #32
 80079da:	fa21 f003 	lsr.w	r0, r1, r3
 80079de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079e2:	fbb0 f7f8 	udiv	r7, r0, r8
 80079e6:	fa1f f985 	uxth.w	r9, r5
 80079ea:	fb08 0017 	mls	r0, r8, r7, r0
 80079ee:	fa24 f303 	lsr.w	r3, r4, r3
 80079f2:	4091      	lsls	r1, r2
 80079f4:	fb07 fc09 	mul.w	ip, r7, r9
 80079f8:	430b      	orrs	r3, r1
 80079fa:	0c19      	lsrs	r1, r3, #16
 80079fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a00:	458c      	cmp	ip, r1
 8007a02:	fa04 f402 	lsl.w	r4, r4, r2
 8007a06:	d907      	bls.n	8007a18 <__udivmoddi4+0x254>
 8007a08:	1869      	adds	r1, r5, r1
 8007a0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8007a0e:	d231      	bcs.n	8007a74 <__udivmoddi4+0x2b0>
 8007a10:	458c      	cmp	ip, r1
 8007a12:	d92f      	bls.n	8007a74 <__udivmoddi4+0x2b0>
 8007a14:	3f02      	subs	r7, #2
 8007a16:	4429      	add	r1, r5
 8007a18:	eba1 010c 	sub.w	r1, r1, ip
 8007a1c:	fbb1 f0f8 	udiv	r0, r1, r8
 8007a20:	fb08 1c10 	mls	ip, r8, r0, r1
 8007a24:	fb00 fe09 	mul.w	lr, r0, r9
 8007a28:	b299      	uxth	r1, r3
 8007a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8007a2e:	458e      	cmp	lr, r1
 8007a30:	d907      	bls.n	8007a42 <__udivmoddi4+0x27e>
 8007a32:	1869      	adds	r1, r5, r1
 8007a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a38:	d218      	bcs.n	8007a6c <__udivmoddi4+0x2a8>
 8007a3a:	458e      	cmp	lr, r1
 8007a3c:	d916      	bls.n	8007a6c <__udivmoddi4+0x2a8>
 8007a3e:	3802      	subs	r0, #2
 8007a40:	4429      	add	r1, r5
 8007a42:	eba1 010e 	sub.w	r1, r1, lr
 8007a46:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007a4a:	e73a      	b.n	80078c2 <__udivmoddi4+0xfe>
 8007a4c:	4637      	mov	r7, r6
 8007a4e:	4630      	mov	r0, r6
 8007a50:	e708      	b.n	8007864 <__udivmoddi4+0xa0>
 8007a52:	460f      	mov	r7, r1
 8007a54:	e6e6      	b.n	8007824 <__udivmoddi4+0x60>
 8007a56:	4618      	mov	r0, r3
 8007a58:	e6fb      	b.n	8007852 <__udivmoddi4+0x8e>
 8007a5a:	4543      	cmp	r3, r8
 8007a5c:	d2ab      	bcs.n	80079b6 <__udivmoddi4+0x1f2>
 8007a5e:	ebb8 0102 	subs.w	r1, r8, r2
 8007a62:	eb69 020c 	sbc.w	r2, r9, ip
 8007a66:	3801      	subs	r0, #1
 8007a68:	4696      	mov	lr, r2
 8007a6a:	e7a4      	b.n	80079b6 <__udivmoddi4+0x1f2>
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	e7e8      	b.n	8007a42 <__udivmoddi4+0x27e>
 8007a70:	4608      	mov	r0, r1
 8007a72:	e795      	b.n	80079a0 <__udivmoddi4+0x1dc>
 8007a74:	4607      	mov	r7, r0
 8007a76:	e7cf      	b.n	8007a18 <__udivmoddi4+0x254>
 8007a78:	4681      	mov	r9, r0
 8007a7a:	e77b      	b.n	8007974 <__udivmoddi4+0x1b0>
 8007a7c:	3802      	subs	r0, #2
 8007a7e:	442c      	add	r4, r5
 8007a80:	e747      	b.n	8007912 <__udivmoddi4+0x14e>
 8007a82:	f1ae 0e02 	sub.w	lr, lr, #2
 8007a86:	442b      	add	r3, r5
 8007a88:	e72f      	b.n	80078ea <__udivmoddi4+0x126>
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	e707      	b.n	800789e <__udivmoddi4+0xda>
 8007a8e:	4637      	mov	r7, r6
 8007a90:	e6e8      	b.n	8007864 <__udivmoddi4+0xa0>
 8007a92:	bf00      	nop

08007a94 <__aeabi_idiv0>:
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <dma_clear_isr_bits>:
 8007a98:	3901      	subs	r1, #1
 8007a9a:	008b      	lsls	r3, r1, #2
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	6802      	ldr	r2, [r0, #0]
 8007aa0:	4099      	lsls	r1, r3
 8007aa2:	6051      	str	r1, [r2, #4]
 8007aa4:	4770      	bx	lr

08007aa6 <disable_pwm(stm32_pin_info const*)>:
 8007aa6:	6843      	ldr	r3, [r0, #4]
 8007aa8:	b123      	cbz	r3, 8007ab4 <disable_pwm(stm32_pin_info const*)+0xe>
 8007aaa:	7b41      	ldrb	r1, [r0, #13]
 8007aac:	2200      	movs	r2, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7f9 bd48 	b.w	8001544 <timer_set_mode>
 8007ab4:	4770      	bx	lr
	...

08007ab8 <dev_to_spi_pins(spi_dev*) [clone .isra.6]>:
 8007ab8:	2816      	cmp	r0, #22
 8007aba:	d004      	beq.n	8007ac6 <dev_to_spi_pins(spi_dev*) [clone .isra.6]+0xe>
 8007abc:	2817      	cmp	r0, #23
 8007abe:	4803      	ldr	r0, [pc, #12]	; (8007acc <dev_to_spi_pins(spi_dev*) [clone .isra.6]+0x14>)
 8007ac0:	bf18      	it	ne
 8007ac2:	2000      	movne	r0, #0
 8007ac4:	4770      	bx	lr
 8007ac6:	4802      	ldr	r0, [pc, #8]	; (8007ad0 <dev_to_spi_pins(spi_dev*) [clone .isra.6]+0x18>)
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	0800ac20 	.word	0x0800ac20
 8007ad0:	0800ac1c 	.word	0x0800ac1c

08007ad4 <configure_gpios(spi_dev*, bool)>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4681      	mov	r9, r0
 8007ada:	b087      	sub	sp, #28
 8007adc:	7900      	ldrb	r0, [r0, #4]
 8007ade:	468a      	mov	sl, r1
 8007ae0:	f7ff ffea 	bl	8007ab8 <dev_to_spi_pins(spi_dev*) [clone .isra.6]>
 8007ae4:	b360      	cbz	r0, 8007b40 <configure_gpios(spi_dev*, bool)+0x6c>
 8007ae6:	7805      	ldrb	r5, [r0, #0]
 8007ae8:	4c17      	ldr	r4, [pc, #92]	; (8007b48 <configure_gpios(spi_dev*, bool)+0x74>)
 8007aea:	7846      	ldrb	r6, [r0, #1]
 8007aec:	012d      	lsls	r5, r5, #4
 8007aee:	192b      	adds	r3, r5, r4
 8007af0:	7887      	ldrb	r7, [r0, #2]
 8007af2:	0136      	lsls	r6, r6, #4
 8007af4:	f890 8003 	ldrb.w	r8, [r0, #3]
 8007af8:	eb06 0b04 	add.w	fp, r6, r4
 8007afc:	4618      	mov	r0, r3
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	eb04 1707 	add.w	r7, r4, r7, lsl #4
 8007b04:	f7ff ffcf 	bl	8007aa6 <disable_pwm(stm32_pin_info const*)>
 8007b08:	4658      	mov	r0, fp
 8007b0a:	f7ff ffcc 	bl	8007aa6 <disable_pwm(stm32_pin_info const*)>
 8007b0e:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ffc7 	bl	8007aa6 <disable_pwm(stm32_pin_info const*)>
 8007b18:	4640      	mov	r0, r8
 8007b1a:	f7ff ffc4 	bl	8007aa6 <disable_pwm(stm32_pin_info const*)>
 8007b1e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	4651      	mov	r1, sl
 8007b26:	7b1b      	ldrb	r3, [r3, #12]
 8007b28:	9203      	str	r2, [sp, #12]
 8007b2a:	7b3a      	ldrb	r2, [r7, #12]
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8007b34:	9201      	str	r2, [sp, #4]
 8007b36:	5932      	ldr	r2, [r6, r4]
 8007b38:	9200      	str	r2, [sp, #0]
 8007b3a:	592a      	ldr	r2, [r5, r4]
 8007b3c:	f7f9 fc29 	bl	8001392 <spi_config_gpios>
 8007b40:	b007      	add	sp, #28
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	08009938 	.word	0x08009938

08007b4c <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	460c      	mov	r4, r1
 8007b50:	f7f9 fb0c 	bl	800116c <rcc_dev_clk>
 8007b54:	b180      	cbz	r0, 8007b78 <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x2c>
 8007b56:	2801      	cmp	r0, #1
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x30>)
 8007b5a:	bf18      	it	ne
 8007b5c:	2300      	movne	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d204      	bcs.n	8007b70 <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x24>
 8007b66:	3201      	adds	r2, #1
 8007b68:	2a07      	cmp	r2, #7
 8007b6a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8007b6e:	d1f8      	bne.n	8007b62 <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x16>
 8007b70:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x34>)
 8007b72:	441a      	add	r2, r3
 8007b74:	7a10      	ldrb	r0, [r2, #8]
 8007b76:	bd10      	pop	{r4, pc}
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x38>)
 8007b7a:	e7f0      	b.n	8007b5e <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]+0x12>
 8007b7c:	044aa200 	.word	0x044aa200
 8007b80:	0800ac1c 	.word	0x0800ac1c
 8007b84:	02255100 	.word	0x02255100

08007b88 <SPIClass::SPIClass(unsigned long)>:
 8007b88:	2300      	movs	r3, #0
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4604      	mov	r4, r0
 8007b90:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8007b94:	7322      	strb	r2, [r4, #12]
 8007b96:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8007b9a:	2224      	movs	r2, #36	; 0x24
 8007b9c:	7363      	strb	r3, [r4, #13]
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8007ba4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8007ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007baa:	1e4b      	subs	r3, r1, #1
 8007bac:	fb02 4303 	mla	r3, r2, r3, r4
 8007bb0:	481b      	ldr	r0, [pc, #108]	; (8007c20 <SPIClass::SPIClass(unsigned long)+0x98>)
 8007bb2:	2901      	cmp	r1, #1
 8007bb4:	6020      	str	r0, [r4, #0]
 8007bb6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8007bba:	4e1a      	ldr	r6, [pc, #104]	; (8007c24 <SPIClass::SPIClass(unsigned long)+0x9c>)
 8007bbc:	d007      	beq.n	8007bce <SPIClass::SPIClass(unsigned long)+0x46>
 8007bbe:	2902      	cmp	r1, #2
 8007bc0:	d02a      	beq.n	8007c18 <SPIClass::SPIClass(unsigned long)+0x90>
 8007bc2:	4a19      	ldr	r2, [pc, #100]	; (8007c28 <SPIClass::SPIClass(unsigned long)+0xa0>)
 8007bc4:	2176      	movs	r1, #118	; 0x76
 8007bc6:	4819      	ldr	r0, [pc, #100]	; (8007c2c <SPIClass::SPIClass(unsigned long)+0xa4>)
 8007bc8:	f7fb f948 	bl	8002e5c <_fail>
 8007bcc:	e001      	b.n	8007bd2 <SPIClass::SPIClass(unsigned long)+0x4a>
 8007bce:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <SPIClass::SPIClass(unsigned long)+0xa8>)
 8007bd0:	601c      	str	r4, [r3, #0]
 8007bd2:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <SPIClass::SPIClass(unsigned long)+0xac>)
 8007bd4:	4d18      	ldr	r5, [pc, #96]	; (8007c38 <SPIClass::SPIClass(unsigned long)+0xb0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6821      	ldr	r1, [r4, #0]
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	7918      	ldrb	r0, [r3, #4]
 8007bde:	f7ff ffb5 	bl	8007b4c <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	60a0      	str	r0, [r4, #8]
 8007be6:	61a3      	str	r3, [r4, #24]
 8007be8:	2303      	movs	r3, #3
 8007bea:	7563      	strb	r3, [r4, #21]
 8007bec:	2302      	movs	r3, #2
 8007bee:	7523      	strb	r3, [r4, #20]
 8007bf0:	6833      	ldr	r3, [r6, #0]
 8007bf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bf6:	7918      	ldrb	r0, [r3, #4]
 8007bf8:	f7ff ffa8 	bl	8007b4c <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007c02:	2305      	movs	r3, #5
 8007c04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8007c08:	2304      	movs	r3, #4
 8007c0a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8007c0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007c10:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007c12:	73da      	strb	r2, [r3, #15]
 8007c14:	4620      	mov	r0, r4
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	6833      	ldr	r3, [r6, #0]
 8007c1a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <SPIClass::SPIClass(unsigned long)+0xb4>)
 8007c1e:	e7d7      	b.n	8007bd0 <SPIClass::SPIClass(unsigned long)+0x48>
 8007c20:	003d0900 	.word	0x003d0900
 8007c24:	20000114 	.word	0x20000114
 8007c28:	0800a5b7 	.word	0x0800a5b7
 8007c2c:	0800abaa 	.word	0x0800abaa
 8007c30:	20001b9c 	.word	0x20001b9c
 8007c34:	20000110 	.word	0x20000110
 8007c38:	20000044 	.word	0x20000044
 8007c3c:	20001ba0 	.word	0x20001ba0

08007c40 <SPIClass::updateSettings()>:
 8007c40:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007c42:	7b03      	ldrb	r3, [r0, #12]
 8007c44:	6842      	ldr	r2, [r0, #4]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	bf0c      	ite	eq
 8007c4a:	2300      	moveq	r3, #0
 8007c4c:	2380      	movne	r3, #128	; 0x80
 8007c4e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007c52:	4313      	orrs	r3, r2
 8007c54:	7a01      	ldrb	r1, [r0, #8]
 8007c56:	7b42      	ldrb	r2, [r0, #13]
 8007c58:	6900      	ldr	r0, [r0, #16]
 8007c5a:	f7f9 bb7a 	b.w	8001352 <spi_master_enable>

08007c5e <SPIClass::begin()>:
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	4604      	mov	r4, r0
 8007c62:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007c64:	6918      	ldr	r0, [r3, #16]
 8007c66:	f7f9 fb4a 	bl	80012fe <spi_init>
 8007c6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	6918      	ldr	r0, [r3, #16]
 8007c70:	f7ff ff30 	bl	8007ad4 <configure_gpios(spi_dev*, bool)>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7ff ffe3 	bl	8007c40 <SPIClass::updateSettings()>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007c7e:	73da      	strb	r2, [r3, #15]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <SPIClass::setClockDivider(unsigned long)>:
 8007c82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007c84:	6099      	str	r1, [r3, #8]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007c94:	4319      	orrs	r1, r3
 8007c96:	6011      	str	r1, [r2, #0]
 8007c98:	4770      	bx	lr

08007c9a <SPIClass::setBitOrder(BitOrder)>:
 8007c9a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007c9c:	7319      	strb	r1, [r3, #12]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	6813      	ldr	r3, [r2, #0]
 8007ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca8:	b909      	cbnz	r1, 8007cae <SPIClass::setBitOrder(BitOrder)+0x14>
 8007caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	4770      	bx	lr

08007cb2 <SPIClass::setDataSize(unsigned long)>:
 8007cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007cba:	f404 6400 	and.w	r4, r4, #2048	; 0x800
 8007cbe:	6918      	ldr	r0, [r3, #16]
 8007cc0:	6059      	str	r1, [r3, #4]
 8007cc2:	6803      	ldr	r3, [r0, #0]
 8007cc4:	681e      	ldr	r6, [r3, #0]
 8007cc6:	681d      	ldr	r5, [r3, #0]
 8007cc8:	f7f9 fb28 	bl	800131c <spi_peripheral_disable>
 8007ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cce:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	4334      	orrs	r4, r6
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f005 0506 	and.w	r5, r5, #6
 8007cdc:	432c      	orrs	r4, r5
 8007cde:	601c      	str	r4, [r3, #0]
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce2 <SPIClass::setDataMode(unsigned char)>:
 8007ce2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007ce4:	7359      	strb	r1, [r3, #13]
 8007ce6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007ce8:	f001 0103 	and.w	r1, r1, #3
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	f023 0303 	bic.w	r3, r3, #3
 8007cf6:	4319      	orrs	r1, r3
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	4770      	bx	lr

08007cfc <SPIClass::beginTransaction(unsigned char, SPISettings)>:
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	a902      	add	r1, sp, #8
 8007d04:	e881 000c 	stmia.w	r1, {r2, r3}
 8007d08:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8007d0c:	f7ff ffc5 	bl	8007c9a <SPIClass::setBitOrder(BitOrder)>
 8007d10:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8007d14:	f7ff ffe5 	bl	8007ce2 <SPIClass::setDataMode(unsigned char)>
 8007d18:	9903      	ldr	r1, [sp, #12]
 8007d1a:	f7ff ffca 	bl	8007cb2 <SPIClass::setDataSize(unsigned long)>
 8007d1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007d20:	9902      	ldr	r1, [sp, #8]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	7918      	ldrb	r0, [r3, #4]
 8007d26:	f7ff ff11 	bl	8007b4c <determine_baud_rate(spi_dev*, unsigned long) [clone .isra.7]>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f7ff ffa8 	bl	8007c82 <SPIClass::setClockDivider(unsigned long)>
 8007d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d36:	b002      	add	sp, #8
 8007d38:	f7ff bf91 	b.w	8007c5e <SPIClass::begin()>

08007d3c <SPIClass::endTransaction()>:
 8007d3c:	4770      	bx	lr

08007d3e <SPIClass::transfer(unsigned char) const>:
 8007d3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	60d9      	str	r1, [r3, #12]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	0791      	lsls	r1, r2, #30
 8007d4c:	d5fc      	bpl.n	8007d48 <SPIClass::transfer(unsigned char) const+0xa>
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	0612      	lsls	r2, r2, #24
 8007d52:	d4fc      	bmi.n	8007d4e <SPIClass::transfer(unsigned char) const+0x10>
 8007d54:	68d8      	ldr	r0, [r3, #12]
 8007d56:	b2c0      	uxtb	r0, r0
 8007d58:	4770      	bx	lr
	...

08007d5c <SPIClass::dmaTransferSet(void const*, void*)>:
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	4605      	mov	r5, r0
 8007d60:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007d62:	b085      	sub	sp, #20
 8007d64:	6998      	ldr	r0, [r3, #24]
 8007d66:	4617      	mov	r7, r2
 8007d68:	460e      	mov	r6, r1
 8007d6a:	f7f8 fe3d 	bl	80009e8 <dma_init>
 8007d6e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8007d70:	6844      	ldr	r4, [r0, #4]
 8007d72:	7d01      	ldrb	r1, [r0, #20]
 8007d74:	f5a4 6300 	sub.w	r3, r4, #2048	; 0x800
 8007d78:	425c      	negs	r4, r3
 8007d7a:	415c      	adcs	r4, r3
 8007d7c:	6903      	ldr	r3, [r0, #16]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	2382      	movs	r3, #130	; 0x82
 8007d82:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8007d86:	9700      	str	r7, [sp, #0]
 8007d88:	4623      	mov	r3, r4
 8007d8a:	320c      	adds	r2, #12
 8007d8c:	6980      	ldr	r0, [r0, #24]
 8007d8e:	f7f8 fe7f 	bl	8000a90 <dma_setup_transfer>
 8007d92:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8007d94:	6903      	ldr	r3, [r0, #16]
 8007d96:	7d41      	ldrb	r1, [r0, #21]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	b9c6      	cbnz	r6, 8007dce <SPIClass::dmaTransferSet(void const*, void*)+0x72>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <SPIClass::dmaTransferSet(void const*, void*)+0x7c>)
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4623      	mov	r3, r4
 8007da8:	320c      	adds	r2, #12
 8007daa:	6980      	ldr	r0, [r0, #24]
 8007dac:	f7f8 fe70 	bl	8000a90 <dma_setup_transfer>
 8007db0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007db2:	2200      	movs	r2, #0
 8007db4:	7d59      	ldrb	r1, [r3, #21]
 8007db6:	6998      	ldr	r0, [r3, #24]
 8007db8:	f7f8 fe1a 	bl	80009f0 <dma_set_priority>
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007dc0:	7d19      	ldrb	r1, [r3, #20]
 8007dc2:	6998      	ldr	r0, [r3, #24]
 8007dc4:	b005      	add	sp, #20
 8007dc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007dca:	f7f8 be11 	b.w	80009f0 <dma_set_priority>
 8007dce:	2390      	movs	r3, #144	; 0x90
 8007dd0:	9600      	str	r6, [sp, #0]
 8007dd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8007dd6:	e7e6      	b.n	8007da6 <SPIClass::dmaTransferSet(void const*, void*)+0x4a>
 8007dd8:	2000045c 	.word	0x2000045c

08007ddc <SPIClass::dmaTransferRepeat(unsigned short)>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4604      	mov	r4, r0
 8007de0:	460d      	mov	r5, r1
 8007de2:	b911      	cbnz	r1, 8007dea <SPIClass::dmaTransferRepeat(unsigned short)+0xe>
 8007de4:	2500      	movs	r5, #0
 8007de6:	4628      	mov	r0, r5
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	6998      	ldr	r0, [r3, #24]
 8007df0:	6812      	ldr	r2, [r2, #0]
 8007df2:	6891      	ldr	r1, [r2, #8]
 8007df4:	07ce      	lsls	r6, r1, #31
 8007df6:	bf48      	it	mi
 8007df8:	68d2      	ldrmi	r2, [r2, #12]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	7d19      	ldrb	r1, [r3, #20]
 8007dfe:	73da      	strb	r2, [r3, #15]
 8007e00:	462a      	mov	r2, r5
 8007e02:	f7f8 fe13 	bl	8000a2c <dma_set_num_transfers>
 8007e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e08:	462a      	mov	r2, r5
 8007e0a:	7d59      	ldrb	r1, [r3, #21]
 8007e0c:	6998      	ldr	r0, [r3, #24]
 8007e0e:	f7f8 fe0d 	bl	8000a2c <dma_set_num_transfers>
 8007e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e14:	7d19      	ldrb	r1, [r3, #20]
 8007e16:	6998      	ldr	r0, [r3, #24]
 8007e18:	f7f8 fe22 	bl	8000a60 <dma_enable>
 8007e1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e1e:	7d59      	ldrb	r1, [r3, #21]
 8007e20:	6998      	ldr	r0, [r3, #24]
 8007e22:	f7f8 fe1d 	bl	8000a60 <dma_enable>
 8007e26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e28:	6918      	ldr	r0, [r3, #16]
 8007e2a:	f7f9 faa4 	bl	8001376 <spi_rx_dma_enable>
 8007e2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e30:	6918      	ldr	r0, [r3, #16]
 8007e32:	f7f9 fa94 	bl	800135e <spi_tx_dma_enable>
 8007e36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007e38:	69d3      	ldr	r3, [r2, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1d2      	bne.n	8007de4 <SPIClass::dmaTransferRepeat(unsigned short)+0x8>
 8007e3e:	6993      	ldr	r3, [r2, #24]
 8007e40:	491b      	ldr	r1, [pc, #108]	; (8007eb0 <SPIClass::dmaTransferRepeat(unsigned short)+0xd4>)
 8007e42:	681e      	ldr	r6, [r3, #0]
 8007e44:	7d53      	ldrb	r3, [r2, #21]
 8007e46:	680d      	ldr	r5, [r1, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	6830      	ldr	r0, [r6, #0]
 8007e50:	40d8      	lsrs	r0, r3
 8007e52:	0780      	lsls	r0, r0, #30
 8007e54:	d42a      	bmi.n	8007eac <SPIClass::dmaTransferRepeat(unsigned short)+0xd0>
 8007e56:	6808      	ldr	r0, [r1, #0]
 8007e58:	1b40      	subs	r0, r0, r5
 8007e5a:	2864      	cmp	r0, #100	; 0x64
 8007e5c:	d9f7      	bls.n	8007e4e <SPIClass::dmaTransferRepeat(unsigned short)+0x72>
 8007e5e:	2502      	movs	r5, #2
 8007e60:	6910      	ldr	r0, [r2, #16]
 8007e62:	6803      	ldr	r3, [r0, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	0791      	lsls	r1, r2, #30
 8007e68:	d5fc      	bpl.n	8007e64 <SPIClass::dmaTransferRepeat(unsigned short)+0x88>
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	0612      	lsls	r2, r2, #24
 8007e6e:	d4fc      	bmi.n	8007e6a <SPIClass::dmaTransferRepeat(unsigned short)+0x8e>
 8007e70:	f7f9 fa7b 	bl	800136a <spi_tx_dma_disable>
 8007e74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e76:	6918      	ldr	r0, [r3, #16]
 8007e78:	f7f9 fa83 	bl	8001382 <spi_rx_dma_disable>
 8007e7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e7e:	7d59      	ldrb	r1, [r3, #21]
 8007e80:	6998      	ldr	r0, [r3, #24]
 8007e82:	f7f8 fdf9 	bl	8000a78 <dma_disable>
 8007e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e88:	7d19      	ldrb	r1, [r3, #20]
 8007e8a:	6998      	ldr	r0, [r3, #24]
 8007e8c:	f7f8 fdf4 	bl	8000a78 <dma_disable>
 8007e90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e92:	7d19      	ldrb	r1, [r3, #20]
 8007e94:	6998      	ldr	r0, [r3, #24]
 8007e96:	f7ff fdff 	bl	8007a98 <dma_clear_isr_bits>
 8007e9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e9c:	7d59      	ldrb	r1, [r3, #21]
 8007e9e:	6998      	ldr	r0, [r3, #24]
 8007ea0:	f7ff fdfa 	bl	8007a98 <dma_clear_isr_bits>
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ea8:	73da      	strb	r2, [r3, #15]
 8007eaa:	e79c      	b.n	8007de6 <SPIClass::dmaTransferRepeat(unsigned short)+0xa>
 8007eac:	2500      	movs	r5, #0
 8007eae:	e7d7      	b.n	8007e60 <SPIClass::dmaTransferRepeat(unsigned short)+0x84>
 8007eb0:	20001bd8 	.word	0x20001bd8

08007eb4 <SPIClass::dmaTransfer(void const*, void*, unsigned short)>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	461d      	mov	r5, r3
 8007eba:	f7ff ff4f 	bl	8007d5c <SPIClass::dmaTransferSet(void const*, void*)>
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec6:	f7ff bf89 	b.w	8007ddc <SPIClass::dmaTransferRepeat(unsigned short)>
	...

08007ecc <_GLOBAL__sub_I__ZN8SPIClassC2Em>:
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <_GLOBAL__sub_I__ZN8SPIClassC2Em+0x8>)
 8007ed0:	f7ff be5a 	b.w	8007b88 <SPIClass::SPIClass(unsigned long)>
 8007ed4:	20001b50 	.word	0x20001b50

08007ed8 <__aeabi_atexit>:
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4601      	mov	r1, r0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 b801 	b.w	8007ee4 <__cxa_atexit>
 8007ee2:	bf00      	nop

08007ee4 <__cxa_atexit>:
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	460a      	mov	r2, r1
 8007ee8:	4601      	mov	r1, r0
 8007eea:	2002      	movs	r0, #2
 8007eec:	f000 bc64 	b.w	80087b8 <__register_exitproc>

08007ef0 <__errno>:
 8007ef0:	4b01      	ldr	r3, [pc, #4]	; (8007ef8 <__errno+0x8>)
 8007ef2:	6818      	ldr	r0, [r3, #0]
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	20000460 	.word	0x20000460

08007efc <exit>:
 8007efc:	b508      	push	{r3, lr}
 8007efe:	2100      	movs	r1, #0
 8007f00:	4604      	mov	r4, r0
 8007f02:	f000 fcc3 	bl	800888c <__call_exitprocs>
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <exit+0x1c>)
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007f0c:	b103      	cbz	r3, 8007f10 <exit+0x14>
 8007f0e:	4798      	blx	r3
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7f8 fa8f 	bl	8000434 <_exit>
 8007f16:	bf00      	nop
 8007f18:	0800ac18 	.word	0x0800ac18

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0d      	ldr	r6, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4d0d      	ldr	r5, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1b76      	subs	r6, r6, r5
 8007f24:	10b6      	asrs	r6, r6, #2
 8007f26:	d006      	beq.n	8007f36 <__libc_init_array+0x1a>
 8007f28:	2400      	movs	r4, #0
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f30:	4798      	blx	r3
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	d1f9      	bne.n	8007f2a <__libc_init_array+0xe>
 8007f36:	4e09      	ldr	r6, [pc, #36]	; (8007f5c <__libc_init_array+0x40>)
 8007f38:	4d09      	ldr	r5, [pc, #36]	; (8007f60 <__libc_init_array+0x44>)
 8007f3a:	f000 fe83 	bl	8008c44 <_init>
 8007f3e:	1b76      	subs	r6, r6, r5
 8007f40:	10b6      	asrs	r6, r6, #2
 8007f42:	d006      	beq.n	8007f52 <__libc_init_array+0x36>
 8007f44:	2400      	movs	r4, #0
 8007f46:	3401      	adds	r4, #1
 8007f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4c:	4798      	blx	r3
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d1f9      	bne.n	8007f46 <__libc_init_array+0x2a>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	08008c50 	.word	0x08008c50
 8007f58:	08008c50 	.word	0x08008c50
 8007f5c:	08008c74 	.word	0x08008c74
 8007f60:	08008c50 	.word	0x08008c50

08007f64 <malloc>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <malloc+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f000 b80b 	b.w	8007f84 <_malloc_r>
 8007f6e:	bf00      	nop
 8007f70:	20000460 	.word	0x20000460

08007f74 <free>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <free+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f000 bd6b 	b.w	8008a54 <_free_r>
 8007f7e:	bf00      	nop
 8007f80:	20000460 	.word	0x20000460

08007f84 <_malloc_r>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	f101 050b 	add.w	r5, r1, #11
 8007f8c:	2d16      	cmp	r5, #22
 8007f8e:	b083      	sub	sp, #12
 8007f90:	4606      	mov	r6, r0
 8007f92:	d823      	bhi.n	8007fdc <_malloc_r+0x58>
 8007f94:	2910      	cmp	r1, #16
 8007f96:	f200 80b6 	bhi.w	8008106 <_malloc_r+0x182>
 8007f9a:	f000 fb77 	bl	800868c <__malloc_lock>
 8007f9e:	2510      	movs	r5, #16
 8007fa0:	2318      	movs	r3, #24
 8007fa2:	2002      	movs	r0, #2
 8007fa4:	4fcc      	ldr	r7, [pc, #816]	; (80082d8 <_malloc_r+0x354>)
 8007fa6:	443b      	add	r3, r7
 8007fa8:	685c      	ldr	r4, [r3, #4]
 8007faa:	f1a3 0208 	sub.w	r2, r3, #8
 8007fae:	4294      	cmp	r4, r2
 8007fb0:	f000 8156 	beq.w	8008260 <_malloc_r+0x2dc>
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	68e1      	ldr	r1, [r4, #12]
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	4423      	add	r3, r4
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	68a5      	ldr	r5, [r4, #8]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	60e9      	str	r1, [r5, #12]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	608d      	str	r5, [r1, #8]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	f000 fb63 	bl	8008698 <__malloc_unlock>
 8007fd2:	3408      	adds	r4, #8
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	b003      	add	sp, #12
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	f035 0507 	bics.w	r5, r5, #7
 8007fe0:	f100 8091 	bmi.w	8008106 <_malloc_r+0x182>
 8007fe4:	42a9      	cmp	r1, r5
 8007fe6:	f200 808e 	bhi.w	8008106 <_malloc_r+0x182>
 8007fea:	f000 fb4f 	bl	800868c <__malloc_lock>
 8007fee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007ff2:	f0c0 8164 	bcc.w	80082be <_malloc_r+0x33a>
 8007ff6:	0a6b      	lsrs	r3, r5, #9
 8007ff8:	f000 808c 	beq.w	8008114 <_malloc_r+0x190>
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	f200 8136 	bhi.w	800826e <_malloc_r+0x2ea>
 8008002:	09ab      	lsrs	r3, r5, #6
 8008004:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8008008:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800800c:	00c1      	lsls	r1, r0, #3
 800800e:	4fb2      	ldr	r7, [pc, #712]	; (80082d8 <_malloc_r+0x354>)
 8008010:	4439      	add	r1, r7
 8008012:	684c      	ldr	r4, [r1, #4]
 8008014:	3908      	subs	r1, #8
 8008016:	42a1      	cmp	r1, r4
 8008018:	d106      	bne.n	8008028 <_malloc_r+0xa4>
 800801a:	e00c      	b.n	8008036 <_malloc_r+0xb2>
 800801c:	2a00      	cmp	r2, #0
 800801e:	f280 811b 	bge.w	8008258 <_malloc_r+0x2d4>
 8008022:	68e4      	ldr	r4, [r4, #12]
 8008024:	42a1      	cmp	r1, r4
 8008026:	d006      	beq.n	8008036 <_malloc_r+0xb2>
 8008028:	6863      	ldr	r3, [r4, #4]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	1b5a      	subs	r2, r3, r5
 8008030:	2a0f      	cmp	r2, #15
 8008032:	ddf3      	ble.n	800801c <_malloc_r+0x98>
 8008034:	4660      	mov	r0, ip
 8008036:	693c      	ldr	r4, [r7, #16]
 8008038:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 80082ec <_malloc_r+0x368>
 800803c:	4564      	cmp	r4, ip
 800803e:	d06f      	beq.n	8008120 <_malloc_r+0x19c>
 8008040:	6863      	ldr	r3, [r4, #4]
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	1b5a      	subs	r2, r3, r5
 8008048:	2a0f      	cmp	r2, #15
 800804a:	f300 8126 	bgt.w	800829a <_malloc_r+0x316>
 800804e:	2a00      	cmp	r2, #0
 8008050:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8008054:	f280 8117 	bge.w	8008286 <_malloc_r+0x302>
 8008058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805c:	f080 8159 	bcs.w	8008312 <_malloc_r+0x38e>
 8008060:	2201      	movs	r2, #1
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	1099      	asrs	r1, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	408a      	lsls	r2, r1
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8008070:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
 8008074:	430a      	orrs	r2, r1
 8008076:	f1a8 0108 	sub.w	r1, r8, #8
 800807a:	e9c4 e102 	strd	lr, r1, [r4, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 8008084:	f8ce 400c 	str.w	r4, [lr, #12]
 8008088:	2401      	movs	r4, #1
 800808a:	1083      	asrs	r3, r0, #2
 800808c:	409c      	lsls	r4, r3
 800808e:	4294      	cmp	r4, r2
 8008090:	d84c      	bhi.n	800812c <_malloc_r+0x1a8>
 8008092:	4214      	tst	r4, r2
 8008094:	d106      	bne.n	80080a4 <_malloc_r+0x120>
 8008096:	f020 0003 	bic.w	r0, r0, #3
 800809a:	0064      	lsls	r4, r4, #1
 800809c:	4214      	tst	r4, r2
 800809e:	f100 0004 	add.w	r0, r0, #4
 80080a2:	d0fa      	beq.n	800809a <_malloc_r+0x116>
 80080a4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80080a8:	46ce      	mov	lr, r9
 80080aa:	4680      	mov	r8, r0
 80080ac:	f8de 300c 	ldr.w	r3, [lr, #12]
 80080b0:	459e      	cmp	lr, r3
 80080b2:	d107      	bne.n	80080c4 <_malloc_r+0x140>
 80080b4:	e107      	b.n	80082c6 <_malloc_r+0x342>
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	f280 811c 	bge.w	80082f4 <_malloc_r+0x370>
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	459e      	cmp	lr, r3
 80080c0:	f000 8101 	beq.w	80082c6 <_malloc_r+0x342>
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	f021 0103 	bic.w	r1, r1, #3
 80080ca:	1b4a      	subs	r2, r1, r5
 80080cc:	2a0f      	cmp	r2, #15
 80080ce:	ddf2      	ble.n	80080b6 <_malloc_r+0x132>
 80080d0:	f045 0801 	orr.w	r8, r5, #1
 80080d4:	4630      	mov	r0, r6
 80080d6:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
 80080da:	441d      	add	r5, r3
 80080dc:	f042 0601 	orr.w	r6, r2, #1
 80080e0:	f8c3 8004 	str.w	r8, [r3, #4]
 80080e4:	f8ce 400c 	str.w	r4, [lr, #12]
 80080e8:	f8c4 e008 	str.w	lr, [r4, #8]
 80080ec:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80080f0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 80080f4:	606e      	str	r6, [r5, #4]
 80080f6:	505a      	str	r2, [r3, r1]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	f000 facd 	bl	8008698 <__malloc_unlock>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	f103 0408 	add.w	r4, r3, #8
 8008104:	e766      	b.n	8007fd4 <_malloc_r+0x50>
 8008106:	2400      	movs	r4, #0
 8008108:	230c      	movs	r3, #12
 800810a:	4620      	mov	r0, r4
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008118:	2040      	movs	r0, #64	; 0x40
 800811a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800811e:	e776      	b.n	800800e <_malloc_r+0x8a>
 8008120:	2401      	movs	r4, #1
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	1083      	asrs	r3, r0, #2
 8008126:	409c      	lsls	r4, r3
 8008128:	4294      	cmp	r4, r2
 800812a:	d9b2      	bls.n	8008092 <_malloc_r+0x10e>
 800812c:	68bc      	ldr	r4, [r7, #8]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	f023 0903 	bic.w	r9, r3, #3
 8008134:	45a9      	cmp	r9, r5
 8008136:	d303      	bcc.n	8008140 <_malloc_r+0x1bc>
 8008138:	eba9 0305 	sub.w	r3, r9, r5
 800813c:	2b0f      	cmp	r3, #15
 800813e:	dc7b      	bgt.n	8008238 <_malloc_r+0x2b4>
 8008140:	4b66      	ldr	r3, [pc, #408]	; (80082dc <_malloc_r+0x358>)
 8008142:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80082f0 <_malloc_r+0x36c>
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	f8da 3000 	ldr.w	r3, [sl]
 800814c:	eb05 0802 	add.w	r8, r5, r2
 8008150:	3301      	adds	r3, #1
 8008152:	f000 813a 	beq.w	80083ca <_malloc_r+0x446>
 8008156:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800815a:	f108 080f 	add.w	r8, r8, #15
 800815e:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8008162:	f028 080f 	bic.w	r8, r8, #15
 8008166:	4641      	mov	r1, r8
 8008168:	4630      	mov	r0, r6
 800816a:	f000 fa9b 	bl	80086a4 <_sbrk_r>
 800816e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008172:	4683      	mov	fp, r0
 8008174:	f000 80f6 	beq.w	8008364 <_malloc_r+0x3e0>
 8008178:	eb04 0009 	add.w	r0, r4, r9
 800817c:	4558      	cmp	r0, fp
 800817e:	f200 80ef 	bhi.w	8008360 <_malloc_r+0x3dc>
 8008182:	4a57      	ldr	r2, [pc, #348]	; (80082e0 <_malloc_r+0x35c>)
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	4443      	add	r3, r8
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	f000 813f 	beq.w	800840c <_malloc_r+0x488>
 800818e:	f8da 1000 	ldr.w	r1, [sl]
 8008192:	3101      	adds	r1, #1
 8008194:	bf1b      	ittet	ne
 8008196:	ebab 0000 	subne.w	r0, fp, r0
 800819a:	181b      	addne	r3, r3, r0
 800819c:	f8ca b000 	streq.w	fp, [sl]
 80081a0:	6013      	strne	r3, [r2, #0]
 80081a2:	f01b 0307 	ands.w	r3, fp, #7
 80081a6:	f000 8126 	beq.w	80083f6 <_malloc_r+0x472>
 80081aa:	f1c3 0108 	rsb	r1, r3, #8
 80081ae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80081b2:	448b      	add	fp, r1
 80081b4:	3308      	adds	r3, #8
 80081b6:	44d8      	add	r8, fp
 80081b8:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80081bc:	eba3 0808 	sub.w	r8, r3, r8
 80081c0:	4641      	mov	r1, r8
 80081c2:	4630      	mov	r0, r6
 80081c4:	9201      	str	r2, [sp, #4]
 80081c6:	f000 fa6d 	bl	80086a4 <_sbrk_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	9a01      	ldr	r2, [sp, #4]
 80081ce:	f000 8138 	beq.w	8008442 <_malloc_r+0x4be>
 80081d2:	eba0 010b 	sub.w	r1, r0, fp
 80081d6:	4441      	add	r1, r8
 80081d8:	f041 0101 	orr.w	r1, r1, #1
 80081dc:	6813      	ldr	r3, [r2, #0]
 80081de:	42bc      	cmp	r4, r7
 80081e0:	4443      	add	r3, r8
 80081e2:	f8c7 b008 	str.w	fp, [r7, #8]
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	f8cb 1004 	str.w	r1, [fp, #4]
 80081ec:	d015      	beq.n	800821a <_malloc_r+0x296>
 80081ee:	f1b9 0f0f 	cmp.w	r9, #15
 80081f2:	f240 8122 	bls.w	800843a <_malloc_r+0x4b6>
 80081f6:	f04f 0e05 	mov.w	lr, #5
 80081fa:	6861      	ldr	r1, [r4, #4]
 80081fc:	f1a9 000c 	sub.w	r0, r9, #12
 8008200:	f020 0007 	bic.w	r0, r0, #7
 8008204:	f001 0101 	and.w	r1, r1, #1
 8008208:	4301      	orrs	r1, r0
 800820a:	eb04 0c00 	add.w	ip, r4, r0
 800820e:	280f      	cmp	r0, #15
 8008210:	6061      	str	r1, [r4, #4]
 8008212:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8008216:	f200 812c 	bhi.w	8008472 <_malloc_r+0x4ee>
 800821a:	4a32      	ldr	r2, [pc, #200]	; (80082e4 <_malloc_r+0x360>)
 800821c:	4832      	ldr	r0, [pc, #200]	; (80082e8 <_malloc_r+0x364>)
 800821e:	6811      	ldr	r1, [r2, #0]
 8008220:	68bc      	ldr	r4, [r7, #8]
 8008222:	428b      	cmp	r3, r1
 8008224:	6801      	ldr	r1, [r0, #0]
 8008226:	bf88      	it	hi
 8008228:	6013      	strhi	r3, [r2, #0]
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	428b      	cmp	r3, r1
 800822e:	f022 0203 	bic.w	r2, r2, #3
 8008232:	bf88      	it	hi
 8008234:	6003      	strhi	r3, [r0, #0]
 8008236:	e099      	b.n	800836c <_malloc_r+0x3e8>
 8008238:	f045 0201 	orr.w	r2, r5, #1
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	4425      	add	r5, r4
 8008242:	6062      	str	r2, [r4, #4]
 8008244:	4630      	mov	r0, r6
 8008246:	60bd      	str	r5, [r7, #8]
 8008248:	3408      	adds	r4, #8
 800824a:	606b      	str	r3, [r5, #4]
 800824c:	f000 fa24 	bl	8008698 <__malloc_unlock>
 8008250:	4620      	mov	r0, r4
 8008252:	b003      	add	sp, #12
 8008254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008258:	4423      	add	r3, r4
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68e1      	ldr	r1, [r4, #12]
 800825e:	e6af      	b.n	8007fc0 <_malloc_r+0x3c>
 8008260:	68dc      	ldr	r4, [r3, #12]
 8008262:	42a3      	cmp	r3, r4
 8008264:	bf08      	it	eq
 8008266:	3002      	addeq	r0, #2
 8008268:	f43f aee5 	beq.w	8008036 <_malloc_r+0xb2>
 800826c:	e6a2      	b.n	8007fb4 <_malloc_r+0x30>
 800826e:	2b14      	cmp	r3, #20
 8008270:	d970      	bls.n	8008354 <_malloc_r+0x3d0>
 8008272:	2b54      	cmp	r3, #84	; 0x54
 8008274:	f200 80ac 	bhi.w	80083d0 <_malloc_r+0x44c>
 8008278:	0b2b      	lsrs	r3, r5, #12
 800827a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800827e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8008282:	00c1      	lsls	r1, r0, #3
 8008284:	e6c3      	b.n	800800e <_malloc_r+0x8a>
 8008286:	4423      	add	r3, r4
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4630      	mov	r0, r6
 800828c:	f042 0201 	orr.w	r2, r2, #1
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	3408      	adds	r4, #8
 8008294:	f000 fa00 	bl	8008698 <__malloc_unlock>
 8008298:	e69c      	b.n	8007fd4 <_malloc_r+0x50>
 800829a:	f045 0e01 	orr.w	lr, r5, #1
 800829e:	f042 0101 	orr.w	r1, r2, #1
 80082a2:	4425      	add	r5, r4
 80082a4:	f8c4 e004 	str.w	lr, [r4, #4]
 80082a8:	4630      	mov	r0, r6
 80082aa:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80082ae:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 80082b2:	6069      	str	r1, [r5, #4]
 80082b4:	50e2      	str	r2, [r4, r3]
 80082b6:	f000 f9ef 	bl	8008698 <__malloc_unlock>
 80082ba:	3408      	adds	r4, #8
 80082bc:	e68a      	b.n	8007fd4 <_malloc_r+0x50>
 80082be:	08e8      	lsrs	r0, r5, #3
 80082c0:	f105 0308 	add.w	r3, r5, #8
 80082c4:	e66e      	b.n	8007fa4 <_malloc_r+0x20>
 80082c6:	f108 0801 	add.w	r8, r8, #1
 80082ca:	f018 0f03 	tst.w	r8, #3
 80082ce:	f10e 0e08 	add.w	lr, lr, #8
 80082d2:	f47f aeeb 	bne.w	80080ac <_malloc_r+0x128>
 80082d6:	e060      	b.n	800839a <_malloc_r+0x416>
 80082d8:	20000890 	.word	0x20000890
 80082dc:	20001bd4 	.word	0x20001bd4
 80082e0:	20001ba4 	.word	0x20001ba4
 80082e4:	20001bcc 	.word	0x20001bcc
 80082e8:	20001bd0 	.word	0x20001bd0
 80082ec:	20000898 	.word	0x20000898
 80082f0:	20000c98 	.word	0x20000c98
 80082f4:	461c      	mov	r4, r3
 80082f6:	4419      	add	r1, r3
 80082f8:	684a      	ldr	r2, [r1, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	604a      	str	r2, [r1, #4]
 8008306:	4630      	mov	r0, r6
 8008308:	60eb      	str	r3, [r5, #12]
 800830a:	609d      	str	r5, [r3, #8]
 800830c:	f000 f9c4 	bl	8008698 <__malloc_unlock>
 8008310:	e660      	b.n	8007fd4 <_malloc_r+0x50>
 8008312:	0a5a      	lsrs	r2, r3, #9
 8008314:	2a04      	cmp	r2, #4
 8008316:	d935      	bls.n	8008384 <_malloc_r+0x400>
 8008318:	2a14      	cmp	r2, #20
 800831a:	d86f      	bhi.n	80083fc <_malloc_r+0x478>
 800831c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8008320:	00c9      	lsls	r1, r1, #3
 8008322:	325b      	adds	r2, #91	; 0x5b
 8008324:	eb07 0e01 	add.w	lr, r7, r1
 8008328:	5879      	ldr	r1, [r7, r1]
 800832a:	f1ae 0e08 	sub.w	lr, lr, #8
 800832e:	458e      	cmp	lr, r1
 8008330:	d058      	beq.n	80083e4 <_malloc_r+0x460>
 8008332:	684a      	ldr	r2, [r1, #4]
 8008334:	f022 0203 	bic.w	r2, r2, #3
 8008338:	429a      	cmp	r2, r3
 800833a:	d902      	bls.n	8008342 <_malloc_r+0x3be>
 800833c:	6889      	ldr	r1, [r1, #8]
 800833e:	458e      	cmp	lr, r1
 8008340:	d1f7      	bne.n	8008332 <_malloc_r+0x3ae>
 8008342:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800834c:	f8ce 4008 	str.w	r4, [lr, #8]
 8008350:	60cc      	str	r4, [r1, #12]
 8008352:	e699      	b.n	8008088 <_malloc_r+0x104>
 8008354:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8008358:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800835c:	00c1      	lsls	r1, r0, #3
 800835e:	e656      	b.n	800800e <_malloc_r+0x8a>
 8008360:	42bc      	cmp	r4, r7
 8008362:	d072      	beq.n	800844a <_malloc_r+0x4c6>
 8008364:	68bc      	ldr	r4, [r7, #8]
 8008366:	6862      	ldr	r2, [r4, #4]
 8008368:	f022 0203 	bic.w	r2, r2, #3
 800836c:	4295      	cmp	r5, r2
 800836e:	eba2 0305 	sub.w	r3, r2, r5
 8008372:	d802      	bhi.n	800837a <_malloc_r+0x3f6>
 8008374:	2b0f      	cmp	r3, #15
 8008376:	f73f af5f 	bgt.w	8008238 <_malloc_r+0x2b4>
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f98c 	bl	8008698 <__malloc_unlock>
 8008380:	2400      	movs	r4, #0
 8008382:	e627      	b.n	8007fd4 <_malloc_r+0x50>
 8008384:	099a      	lsrs	r2, r3, #6
 8008386:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800838a:	00c9      	lsls	r1, r1, #3
 800838c:	3238      	adds	r2, #56	; 0x38
 800838e:	e7c9      	b.n	8008324 <_malloc_r+0x3a0>
 8008390:	f8d9 9000 	ldr.w	r9, [r9]
 8008394:	4599      	cmp	r9, r3
 8008396:	f040 8083 	bne.w	80084a0 <_malloc_r+0x51c>
 800839a:	f010 0f03 	tst.w	r0, #3
 800839e:	f1a9 0308 	sub.w	r3, r9, #8
 80083a2:	f100 30ff 	add.w	r0, r0, #4294967295
 80083a6:	d1f3      	bne.n	8008390 <_malloc_r+0x40c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	ea23 0304 	bic.w	r3, r3, r4
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	0064      	lsls	r4, r4, #1
 80083b2:	429c      	cmp	r4, r3
 80083b4:	f63f aeba 	bhi.w	800812c <_malloc_r+0x1a8>
 80083b8:	b91c      	cbnz	r4, 80083c2 <_malloc_r+0x43e>
 80083ba:	e6b7      	b.n	800812c <_malloc_r+0x1a8>
 80083bc:	0064      	lsls	r4, r4, #1
 80083be:	f108 0804 	add.w	r8, r8, #4
 80083c2:	421c      	tst	r4, r3
 80083c4:	d0fa      	beq.n	80083bc <_malloc_r+0x438>
 80083c6:	4640      	mov	r0, r8
 80083c8:	e66c      	b.n	80080a4 <_malloc_r+0x120>
 80083ca:	f108 0810 	add.w	r8, r8, #16
 80083ce:	e6ca      	b.n	8008166 <_malloc_r+0x1e2>
 80083d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80083d4:	d826      	bhi.n	8008424 <_malloc_r+0x4a0>
 80083d6:	0beb      	lsrs	r3, r5, #15
 80083d8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80083dc:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 80083e0:	00c1      	lsls	r1, r0, #3
 80083e2:	e614      	b.n	800800e <_malloc_r+0x8a>
 80083e4:	f04f 0801 	mov.w	r8, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	1092      	asrs	r2, r2, #2
 80083ec:	fa08 f202 	lsl.w	r2, r8, r2
 80083f0:	431a      	orrs	r2, r3
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	e7a8      	b.n	8008348 <_malloc_r+0x3c4>
 80083f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083fa:	e6dc      	b.n	80081b6 <_malloc_r+0x232>
 80083fc:	2a54      	cmp	r2, #84	; 0x54
 80083fe:	d829      	bhi.n	8008454 <_malloc_r+0x4d0>
 8008400:	0b1a      	lsrs	r2, r3, #12
 8008402:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8008406:	00c9      	lsls	r1, r1, #3
 8008408:	326e      	adds	r2, #110	; 0x6e
 800840a:	e78b      	b.n	8008324 <_malloc_r+0x3a0>
 800840c:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8008410:	2900      	cmp	r1, #0
 8008412:	f47f aebc 	bne.w	800818e <_malloc_r+0x20a>
 8008416:	eb09 0208 	add.w	r2, r9, r8
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	604a      	str	r2, [r1, #4]
 8008422:	e6fa      	b.n	800821a <_malloc_r+0x296>
 8008424:	f240 5254 	movw	r2, #1364	; 0x554
 8008428:	4293      	cmp	r3, r2
 800842a:	d81c      	bhi.n	8008466 <_malloc_r+0x4e2>
 800842c:	0cab      	lsrs	r3, r5, #18
 800842e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8008432:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8008436:	00c1      	lsls	r1, r0, #3
 8008438:	e5e9      	b.n	800800e <_malloc_r+0x8a>
 800843a:	2301      	movs	r3, #1
 800843c:	f8cb 3004 	str.w	r3, [fp, #4]
 8008440:	e79b      	b.n	800837a <_malloc_r+0x3f6>
 8008442:	2101      	movs	r1, #1
 8008444:	f04f 0800 	mov.w	r8, #0
 8008448:	e6c8      	b.n	80081dc <_malloc_r+0x258>
 800844a:	4a16      	ldr	r2, [pc, #88]	; (80084a4 <_malloc_r+0x520>)
 800844c:	6813      	ldr	r3, [r2, #0]
 800844e:	4443      	add	r3, r8
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e69c      	b.n	800818e <_malloc_r+0x20a>
 8008454:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008458:	d814      	bhi.n	8008484 <_malloc_r+0x500>
 800845a:	0bda      	lsrs	r2, r3, #15
 800845c:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008460:	00c9      	lsls	r1, r1, #3
 8008462:	3277      	adds	r2, #119	; 0x77
 8008464:	e75e      	b.n	8008324 <_malloc_r+0x3a0>
 8008466:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800846a:	207f      	movs	r0, #127	; 0x7f
 800846c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8008470:	e5cd      	b.n	800800e <_malloc_r+0x8a>
 8008472:	f104 0108 	add.w	r1, r4, #8
 8008476:	4630      	mov	r0, r6
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	f000 faeb 	bl	8008a54 <_free_r>
 800847e:	9a01      	ldr	r2, [sp, #4]
 8008480:	6813      	ldr	r3, [r2, #0]
 8008482:	e6ca      	b.n	800821a <_malloc_r+0x296>
 8008484:	f240 5154 	movw	r1, #1364	; 0x554
 8008488:	428a      	cmp	r2, r1
 800848a:	d805      	bhi.n	8008498 <_malloc_r+0x514>
 800848c:	0c9a      	lsrs	r2, r3, #18
 800848e:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008492:	00c9      	lsls	r1, r1, #3
 8008494:	327c      	adds	r2, #124	; 0x7c
 8008496:	e745      	b.n	8008324 <_malloc_r+0x3a0>
 8008498:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800849c:	227e      	movs	r2, #126	; 0x7e
 800849e:	e741      	b.n	8008324 <_malloc_r+0x3a0>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	e785      	b.n	80083b0 <_malloc_r+0x42c>
 80084a4:	20001ba4 	.word	0x20001ba4

080084a8 <memcmp>:
 80084a8:	2a03      	cmp	r2, #3
 80084aa:	b470      	push	{r4, r5, r6}
 80084ac:	d914      	bls.n	80084d8 <memcmp+0x30>
 80084ae:	ea40 0501 	orr.w	r5, r0, r1
 80084b2:	07ad      	lsls	r5, r5, #30
 80084b4:	4604      	mov	r4, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	d122      	bne.n	8008500 <memcmp+0x58>
 80084ba:	681d      	ldr	r5, [r3, #0]
 80084bc:	6826      	ldr	r6, [r4, #0]
 80084be:	4619      	mov	r1, r3
 80084c0:	42ae      	cmp	r6, r5
 80084c2:	4620      	mov	r0, r4
 80084c4:	f103 0304 	add.w	r3, r3, #4
 80084c8:	f104 0404 	add.w	r4, r4, #4
 80084cc:	d118      	bne.n	8008500 <memcmp+0x58>
 80084ce:	3a04      	subs	r2, #4
 80084d0:	2a03      	cmp	r2, #3
 80084d2:	4620      	mov	r0, r4
 80084d4:	4619      	mov	r1, r3
 80084d6:	d8f0      	bhi.n	80084ba <memcmp+0x12>
 80084d8:	1e54      	subs	r4, r2, #1
 80084da:	b172      	cbz	r2, 80084fa <memcmp+0x52>
 80084dc:	7802      	ldrb	r2, [r0, #0]
 80084de:	780b      	ldrb	r3, [r1, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bf08      	it	eq
 80084e4:	1864      	addeq	r4, r4, r1
 80084e6:	d006      	beq.n	80084f6 <memcmp+0x4e>
 80084e8:	e00c      	b.n	8008504 <memcmp+0x5c>
 80084ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80084ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d106      	bne.n	8008504 <memcmp+0x5c>
 80084f6:	42a1      	cmp	r1, r4
 80084f8:	d1f7      	bne.n	80084ea <memcmp+0x42>
 80084fa:	2000      	movs	r0, #0
 80084fc:	bc70      	pop	{r4, r5, r6}
 80084fe:	4770      	bx	lr
 8008500:	1e54      	subs	r4, r2, #1
 8008502:	e7eb      	b.n	80084dc <memcmp+0x34>
 8008504:	1ad0      	subs	r0, r2, r3
 8008506:	bc70      	pop	{r4, r5, r6}
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <memcpy>:
 800850c:	4684      	mov	ip, r0
 800850e:	ea41 0300 	orr.w	r3, r1, r0
 8008512:	f013 0303 	ands.w	r3, r3, #3
 8008516:	d149      	bne.n	80085ac <memcpy+0xa0>
 8008518:	3a40      	subs	r2, #64	; 0x40
 800851a:	d323      	bcc.n	8008564 <memcpy+0x58>
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	6003      	str	r3, [r0, #0]
 8008520:	684b      	ldr	r3, [r1, #4]
 8008522:	6043      	str	r3, [r0, #4]
 8008524:	688b      	ldr	r3, [r1, #8]
 8008526:	6083      	str	r3, [r0, #8]
 8008528:	68cb      	ldr	r3, [r1, #12]
 800852a:	60c3      	str	r3, [r0, #12]
 800852c:	690b      	ldr	r3, [r1, #16]
 800852e:	6103      	str	r3, [r0, #16]
 8008530:	694b      	ldr	r3, [r1, #20]
 8008532:	6143      	str	r3, [r0, #20]
 8008534:	698b      	ldr	r3, [r1, #24]
 8008536:	6183      	str	r3, [r0, #24]
 8008538:	69cb      	ldr	r3, [r1, #28]
 800853a:	61c3      	str	r3, [r0, #28]
 800853c:	6a0b      	ldr	r3, [r1, #32]
 800853e:	6203      	str	r3, [r0, #32]
 8008540:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008542:	6243      	str	r3, [r0, #36]	; 0x24
 8008544:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008546:	6283      	str	r3, [r0, #40]	; 0x28
 8008548:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800854a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800854c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800854e:	6303      	str	r3, [r0, #48]	; 0x30
 8008550:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008552:	6343      	str	r3, [r0, #52]	; 0x34
 8008554:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008556:	6383      	str	r3, [r0, #56]	; 0x38
 8008558:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800855a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800855c:	3040      	adds	r0, #64	; 0x40
 800855e:	3140      	adds	r1, #64	; 0x40
 8008560:	3a40      	subs	r2, #64	; 0x40
 8008562:	d2db      	bcs.n	800851c <memcpy+0x10>
 8008564:	3230      	adds	r2, #48	; 0x30
 8008566:	d30b      	bcc.n	8008580 <memcpy+0x74>
 8008568:	680b      	ldr	r3, [r1, #0]
 800856a:	6003      	str	r3, [r0, #0]
 800856c:	684b      	ldr	r3, [r1, #4]
 800856e:	6043      	str	r3, [r0, #4]
 8008570:	688b      	ldr	r3, [r1, #8]
 8008572:	6083      	str	r3, [r0, #8]
 8008574:	68cb      	ldr	r3, [r1, #12]
 8008576:	60c3      	str	r3, [r0, #12]
 8008578:	3010      	adds	r0, #16
 800857a:	3110      	adds	r1, #16
 800857c:	3a10      	subs	r2, #16
 800857e:	d2f3      	bcs.n	8008568 <memcpy+0x5c>
 8008580:	320c      	adds	r2, #12
 8008582:	d305      	bcc.n	8008590 <memcpy+0x84>
 8008584:	f851 3b04 	ldr.w	r3, [r1], #4
 8008588:	f840 3b04 	str.w	r3, [r0], #4
 800858c:	3a04      	subs	r2, #4
 800858e:	d2f9      	bcs.n	8008584 <memcpy+0x78>
 8008590:	3204      	adds	r2, #4
 8008592:	d008      	beq.n	80085a6 <memcpy+0x9a>
 8008594:	07d2      	lsls	r2, r2, #31
 8008596:	bf1c      	itt	ne
 8008598:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800859c:	f800 3b01 	strbne.w	r3, [r0], #1
 80085a0:	d301      	bcc.n	80085a6 <memcpy+0x9a>
 80085a2:	880b      	ldrh	r3, [r1, #0]
 80085a4:	8003      	strh	r3, [r0, #0]
 80085a6:	4660      	mov	r0, ip
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	2a08      	cmp	r2, #8
 80085ae:	d313      	bcc.n	80085d8 <memcpy+0xcc>
 80085b0:	078b      	lsls	r3, r1, #30
 80085b2:	d0b1      	beq.n	8008518 <memcpy+0xc>
 80085b4:	f010 0303 	ands.w	r3, r0, #3
 80085b8:	d0ae      	beq.n	8008518 <memcpy+0xc>
 80085ba:	f1c3 0304 	rsb	r3, r3, #4
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	07db      	lsls	r3, r3, #31
 80085c2:	bf1c      	itt	ne
 80085c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80085c8:	f800 3b01 	strbne.w	r3, [r0], #1
 80085cc:	d3a4      	bcc.n	8008518 <memcpy+0xc>
 80085ce:	f831 3b02 	ldrh.w	r3, [r1], #2
 80085d2:	f820 3b02 	strh.w	r3, [r0], #2
 80085d6:	e79f      	b.n	8008518 <memcpy+0xc>
 80085d8:	3a04      	subs	r2, #4
 80085da:	d3d9      	bcc.n	8008590 <memcpy+0x84>
 80085dc:	3a01      	subs	r2, #1
 80085de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e2:	f800 3b01 	strb.w	r3, [r0], #1
 80085e6:	d2f9      	bcs.n	80085dc <memcpy+0xd0>
 80085e8:	780b      	ldrb	r3, [r1, #0]
 80085ea:	7003      	strb	r3, [r0, #0]
 80085ec:	784b      	ldrb	r3, [r1, #1]
 80085ee:	7043      	strb	r3, [r0, #1]
 80085f0:	788b      	ldrb	r3, [r1, #2]
 80085f2:	7083      	strb	r3, [r0, #2]
 80085f4:	4660      	mov	r0, ip
 80085f6:	4770      	bx	lr

080085f8 <memset>:
 80085f8:	b4f0      	push	{r4, r5, r6, r7}
 80085fa:	0786      	lsls	r6, r0, #30
 80085fc:	d043      	beq.n	8008686 <memset+0x8e>
 80085fe:	1e54      	subs	r4, r2, #1
 8008600:	2a00      	cmp	r2, #0
 8008602:	d03e      	beq.n	8008682 <memset+0x8a>
 8008604:	b2ca      	uxtb	r2, r1
 8008606:	4603      	mov	r3, r0
 8008608:	e002      	b.n	8008610 <memset+0x18>
 800860a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800860e:	d338      	bcc.n	8008682 <memset+0x8a>
 8008610:	f803 2b01 	strb.w	r2, [r3], #1
 8008614:	079d      	lsls	r5, r3, #30
 8008616:	d1f8      	bne.n	800860a <memset+0x12>
 8008618:	2c03      	cmp	r4, #3
 800861a:	d92b      	bls.n	8008674 <memset+0x7c>
 800861c:	b2cd      	uxtb	r5, r1
 800861e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008622:	2c0f      	cmp	r4, #15
 8008624:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008628:	d916      	bls.n	8008658 <memset+0x60>
 800862a:	f1a4 0710 	sub.w	r7, r4, #16
 800862e:	093f      	lsrs	r7, r7, #4
 8008630:	f103 0620 	add.w	r6, r3, #32
 8008634:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8008638:	f103 0210 	add.w	r2, r3, #16
 800863c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008640:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008644:	3210      	adds	r2, #16
 8008646:	42b2      	cmp	r2, r6
 8008648:	d1f8      	bne.n	800863c <memset+0x44>
 800864a:	f004 040f 	and.w	r4, r4, #15
 800864e:	3701      	adds	r7, #1
 8008650:	2c03      	cmp	r4, #3
 8008652:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8008656:	d90d      	bls.n	8008674 <memset+0x7c>
 8008658:	461e      	mov	r6, r3
 800865a:	4622      	mov	r2, r4
 800865c:	3a04      	subs	r2, #4
 800865e:	2a03      	cmp	r2, #3
 8008660:	f846 5b04 	str.w	r5, [r6], #4
 8008664:	d8fa      	bhi.n	800865c <memset+0x64>
 8008666:	1f22      	subs	r2, r4, #4
 8008668:	f022 0203 	bic.w	r2, r2, #3
 800866c:	3204      	adds	r2, #4
 800866e:	4413      	add	r3, r2
 8008670:	f004 0403 	and.w	r4, r4, #3
 8008674:	b12c      	cbz	r4, 8008682 <memset+0x8a>
 8008676:	b2c9      	uxtb	r1, r1
 8008678:	441c      	add	r4, r3
 800867a:	f803 1b01 	strb.w	r1, [r3], #1
 800867e:	429c      	cmp	r4, r3
 8008680:	d1fb      	bne.n	800867a <memset+0x82>
 8008682:	bcf0      	pop	{r4, r5, r6, r7}
 8008684:	4770      	bx	lr
 8008686:	4614      	mov	r4, r2
 8008688:	4603      	mov	r3, r0
 800868a:	e7c5      	b.n	8008618 <memset+0x20>

0800868c <__malloc_lock>:
 800868c:	4801      	ldr	r0, [pc, #4]	; (8008694 <__malloc_lock+0x8>)
 800868e:	f000 bad5 	b.w	8008c3c <__retarget_lock_acquire_recursive>
 8008692:	bf00      	nop
 8008694:	20001c28 	.word	0x20001c28

08008698 <__malloc_unlock>:
 8008698:	4801      	ldr	r0, [pc, #4]	; (80086a0 <__malloc_unlock+0x8>)
 800869a:	f000 bad1 	b.w	8008c40 <__retarget_lock_release_recursive>
 800869e:	bf00      	nop
 80086a0:	20001c28 	.word	0x20001c28

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	2300      	movs	r3, #0
 80086a8:	4c06      	ldr	r4, [pc, #24]	; (80086c4 <_sbrk_r+0x20>)
 80086aa:	4605      	mov	r5, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	f7f7 fe9e 	bl	80003f0 <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d000      	beq.n	80086ba <_sbrk_r+0x16>
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0fb      	beq.n	80086b8 <_sbrk_r+0x14>
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	20001c3c 	.word	0x20001c3c

080086c8 <strlen>:
 80086c8:	f020 0103 	bic.w	r1, r0, #3
 80086cc:	f010 0003 	ands.w	r0, r0, #3
 80086d0:	f1c0 0000 	rsb	r0, r0, #0
 80086d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80086d8:	f100 0c04 	add.w	ip, r0, #4
 80086dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80086e0:	f06f 0200 	mvn.w	r2, #0
 80086e4:	bf1c      	itt	ne
 80086e6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80086ea:	4313      	orrne	r3, r2
 80086ec:	f04f 0c01 	mov.w	ip, #1
 80086f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80086f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80086f8:	eba3 020c 	sub.w	r2, r3, ip
 80086fc:	ea22 0203 	bic.w	r2, r2, r3
 8008700:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8008704:	bf04      	itt	eq
 8008706:	f851 3b04 	ldreq.w	r3, [r1], #4
 800870a:	3004      	addeq	r0, #4
 800870c:	d0f4      	beq.n	80086f8 <strlen+0x30>
 800870e:	f1c2 0100 	rsb	r1, r2, #0
 8008712:	ea02 0201 	and.w	r2, r2, r1
 8008716:	fab2 f282 	clz	r2, r2
 800871a:	f1c2 021f 	rsb	r2, r2, #31
 800871e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8008722:	4770      	bx	lr

08008724 <strncmp>:
 8008724:	2a00      	cmp	r2, #0
 8008726:	d03f      	beq.n	80087a8 <strncmp+0x84>
 8008728:	ea40 0301 	orr.w	r3, r0, r1
 800872c:	f013 0303 	ands.w	r3, r3, #3
 8008730:	b4f0      	push	{r4, r5, r6, r7}
 8008732:	d125      	bne.n	8008780 <strncmp+0x5c>
 8008734:	2a03      	cmp	r2, #3
 8008736:	d923      	bls.n	8008780 <strncmp+0x5c>
 8008738:	6804      	ldr	r4, [r0, #0]
 800873a:	680d      	ldr	r5, [r1, #0]
 800873c:	42ac      	cmp	r4, r5
 800873e:	d11f      	bne.n	8008780 <strncmp+0x5c>
 8008740:	3a04      	subs	r2, #4
 8008742:	d033      	beq.n	80087ac <strncmp+0x88>
 8008744:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8008748:	ea25 0404 	bic.w	r4, r5, r4
 800874c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008750:	d12f      	bne.n	80087b2 <strncmp+0x8e>
 8008752:	1d07      	adds	r7, r0, #4
 8008754:	1d0d      	adds	r5, r1, #4
 8008756:	e00d      	b.n	8008774 <strncmp+0x50>
 8008758:	f857 3b04 	ldr.w	r3, [r7], #4
 800875c:	680e      	ldr	r6, [r1, #0]
 800875e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8008762:	42b3      	cmp	r3, r6
 8008764:	ea24 0403 	bic.w	r4, r4, r3
 8008768:	d10a      	bne.n	8008780 <strncmp+0x5c>
 800876a:	3a04      	subs	r2, #4
 800876c:	d01e      	beq.n	80087ac <strncmp+0x88>
 800876e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008772:	d11b      	bne.n	80087ac <strncmp+0x88>
 8008774:	2a03      	cmp	r2, #3
 8008776:	4629      	mov	r1, r5
 8008778:	4638      	mov	r0, r7
 800877a:	f105 0504 	add.w	r5, r5, #4
 800877e:	d8eb      	bhi.n	8008758 <strncmp+0x34>
 8008780:	7803      	ldrb	r3, [r0, #0]
 8008782:	780c      	ldrb	r4, [r1, #0]
 8008784:	3a01      	subs	r2, #1
 8008786:	429c      	cmp	r4, r3
 8008788:	d10b      	bne.n	80087a2 <strncmp+0x7e>
 800878a:	b17a      	cbz	r2, 80087ac <strncmp+0x88>
 800878c:	b914      	cbnz	r4, 8008794 <strncmp+0x70>
 800878e:	e00d      	b.n	80087ac <strncmp+0x88>
 8008790:	b162      	cbz	r2, 80087ac <strncmp+0x88>
 8008792:	b173      	cbz	r3, 80087b2 <strncmp+0x8e>
 8008794:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800879c:	3a01      	subs	r2, #1
 800879e:	42a3      	cmp	r3, r4
 80087a0:	d0f6      	beq.n	8008790 <strncmp+0x6c>
 80087a2:	1b18      	subs	r0, r3, r4
 80087a4:	bcf0      	pop	{r4, r5, r6, r7}
 80087a6:	4770      	bx	lr
 80087a8:	4610      	mov	r0, r2
 80087aa:	4770      	bx	lr
 80087ac:	2000      	movs	r0, #0
 80087ae:	bcf0      	pop	{r4, r5, r6, r7}
 80087b0:	4770      	bx	lr
 80087b2:	4618      	mov	r0, r3
 80087b4:	e7f6      	b.n	80087a4 <strncmp+0x80>
 80087b6:	bf00      	nop

080087b8 <__register_exitproc>:
 80087b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	4d2b      	ldr	r5, [pc, #172]	; (800886c <__register_exitproc+0xb4>)
 80087be:	4606      	mov	r6, r0
 80087c0:	6828      	ldr	r0, [r5, #0]
 80087c2:	4698      	mov	r8, r3
 80087c4:	460f      	mov	r7, r1
 80087c6:	4691      	mov	r9, r2
 80087c8:	f000 fa38 	bl	8008c3c <__retarget_lock_acquire_recursive>
 80087cc:	4b28      	ldr	r3, [pc, #160]	; (8008870 <__register_exitproc+0xb8>)
 80087ce:	681c      	ldr	r4, [r3, #0]
 80087d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03d      	beq.n	8008854 <__register_exitproc+0x9c>
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	2a1f      	cmp	r2, #31
 80087dc:	dc0d      	bgt.n	80087fa <__register_exitproc+0x42>
 80087de:	f102 0c01 	add.w	ip, r2, #1
 80087e2:	bb16      	cbnz	r6, 800882a <__register_exitproc+0x72>
 80087e4:	3202      	adds	r2, #2
 80087e6:	f8c3 c004 	str.w	ip, [r3, #4]
 80087ea:	6828      	ldr	r0, [r5, #0]
 80087ec:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 80087f0:	f000 fa26 	bl	8008c40 <__retarget_lock_release_recursive>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <__register_exitproc+0xbc>)
 80087fc:	b37b      	cbz	r3, 800885e <__register_exitproc+0xa6>
 80087fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008802:	f7ff fbaf 	bl	8007f64 <malloc>
 8008806:	4603      	mov	r3, r0
 8008808:	b348      	cbz	r0, 800885e <__register_exitproc+0xa6>
 800880a:	2000      	movs	r0, #0
 800880c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8008810:	f04f 0c01 	mov.w	ip, #1
 8008814:	e9c3 1000 	strd	r1, r0, [r3]
 8008818:	4602      	mov	r2, r0
 800881a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800881e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8008822:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 8008826:	2e00      	cmp	r6, #0
 8008828:	d0dc      	beq.n	80087e4 <__register_exitproc+0x2c>
 800882a:	2101      	movs	r1, #1
 800882c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008830:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8008834:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8008838:	4091      	lsls	r1, r2
 800883a:	4308      	orrs	r0, r1
 800883c:	2e02      	cmp	r6, #2
 800883e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8008842:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8008846:	d1cd      	bne.n	80087e4 <__register_exitproc+0x2c>
 8008848:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 800884c:	4301      	orrs	r1, r0
 800884e:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8008852:	e7c7      	b.n	80087e4 <__register_exitproc+0x2c>
 8008854:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8008858:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800885c:	e7bc      	b.n	80087d8 <__register_exitproc+0x20>
 800885e:	6828      	ldr	r0, [r5, #0]
 8008860:	f000 f9ee 	bl	8008c40 <__retarget_lock_release_recursive>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e7c5      	b.n	80087f6 <__register_exitproc+0x3e>
 800886a:	bf00      	nop
 800886c:	20000ca0 	.word	0x20000ca0
 8008870:	0800ac18 	.word	0x0800ac18
 8008874:	08007f65 	.word	0x08007f65

08008878 <register_fini>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <register_fini+0xc>)
 800887a:	b113      	cbz	r3, 8008882 <register_fini+0xa>
 800887c:	4802      	ldr	r0, [pc, #8]	; (8008888 <register_fini+0x10>)
 800887e:	f000 b879 	b.w	8008974 <atexit>
 8008882:	4770      	bx	lr
 8008884:	00000000 	.word	0x00000000
 8008888:	08008981 	.word	0x08008981

0800888c <__call_exitprocs>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	460f      	mov	r7, r1
 8008892:	46b9      	mov	r9, r7
 8008894:	4b34      	ldr	r3, [pc, #208]	; (8008968 <__call_exitprocs+0xdc>)
 8008896:	b085      	sub	sp, #20
 8008898:	9003      	str	r0, [sp, #12]
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	f000 f9ce 	bl	8008c3c <__retarget_lock_acquire_recursive>
 80088a0:	4b32      	ldr	r3, [pc, #200]	; (800896c <__call_exitprocs+0xe0>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 80088b2:	b33e      	cbz	r6, 8008904 <__call_exitprocs+0x78>
 80088b4:	f04f 0801 	mov.w	r8, #1
 80088b8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80088bc:	6874      	ldr	r4, [r6, #4]
 80088be:	1e65      	subs	r5, r4, #1
 80088c0:	d40f      	bmi.n	80088e2 <__call_exitprocs+0x56>
 80088c2:	2700      	movs	r7, #0
 80088c4:	3401      	adds	r4, #1
 80088c6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80088ca:	f1b9 0f00 	cmp.w	r9, #0
 80088ce:	d020      	beq.n	8008912 <__call_exitprocs+0x86>
 80088d0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80088d4:	454b      	cmp	r3, r9
 80088d6:	d01c      	beq.n	8008912 <__call_exitprocs+0x86>
 80088d8:	3d01      	subs	r5, #1
 80088da:	1c6b      	adds	r3, r5, #1
 80088dc:	f1a4 0404 	sub.w	r4, r4, #4
 80088e0:	d1f3      	bne.n	80088ca <__call_exitprocs+0x3e>
 80088e2:	4b23      	ldr	r3, [pc, #140]	; (8008970 <__call_exitprocs+0xe4>)
 80088e4:	b173      	cbz	r3, 8008904 <__call_exitprocs+0x78>
 80088e6:	e9d6 3200 	ldrd	r3, r2, [r6]
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d134      	bne.n	8008958 <__call_exitprocs+0xcc>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d032      	beq.n	8008958 <__call_exitprocs+0xcc>
 80088f2:	4630      	mov	r0, r6
 80088f4:	f8ca 3000 	str.w	r3, [sl]
 80088f8:	f7ff fb3c 	bl	8007f74 <free>
 80088fc:	f8da 6000 	ldr.w	r6, [sl]
 8008900:	2e00      	cmp	r6, #0
 8008902:	d1db      	bne.n	80088bc <__call_exitprocs+0x30>
 8008904:	4b18      	ldr	r3, [pc, #96]	; (8008968 <__call_exitprocs+0xdc>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	b005      	add	sp, #20
 800890a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890e:	f000 b997 	b.w	8008c40 <__retarget_lock_release_recursive>
 8008912:	6873      	ldr	r3, [r6, #4]
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	3b01      	subs	r3, #1
 8008918:	42ab      	cmp	r3, r5
 800891a:	bf0c      	ite	eq
 800891c:	6075      	streq	r5, [r6, #4]
 800891e:	6027      	strne	r7, [r4, #0]
 8008920:	2a00      	cmp	r2, #0
 8008922:	d0d9      	beq.n	80088d8 <__call_exitprocs+0x4c>
 8008924:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 8008928:	fa08 f305 	lsl.w	r3, r8, r5
 800892c:	420b      	tst	r3, r1
 800892e:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8008932:	d108      	bne.n	8008946 <__call_exitprocs+0xba>
 8008934:	4790      	blx	r2
 8008936:	6873      	ldr	r3, [r6, #4]
 8008938:	455b      	cmp	r3, fp
 800893a:	d1b7      	bne.n	80088ac <__call_exitprocs+0x20>
 800893c:	f8da 3000 	ldr.w	r3, [sl]
 8008940:	42b3      	cmp	r3, r6
 8008942:	d0c9      	beq.n	80088d8 <__call_exitprocs+0x4c>
 8008944:	e7b2      	b.n	80088ac <__call_exitprocs+0x20>
 8008946:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 800894a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800894e:	4203      	tst	r3, r0
 8008950:	d107      	bne.n	8008962 <__call_exitprocs+0xd6>
 8008952:	9803      	ldr	r0, [sp, #12]
 8008954:	4790      	blx	r2
 8008956:	e7ee      	b.n	8008936 <__call_exitprocs+0xaa>
 8008958:	46b2      	mov	sl, r6
 800895a:	461e      	mov	r6, r3
 800895c:	2e00      	cmp	r6, #0
 800895e:	d1ad      	bne.n	80088bc <__call_exitprocs+0x30>
 8008960:	e7d0      	b.n	8008904 <__call_exitprocs+0x78>
 8008962:	4608      	mov	r0, r1
 8008964:	4790      	blx	r2
 8008966:	e7e6      	b.n	8008936 <__call_exitprocs+0xaa>
 8008968:	20000ca0 	.word	0x20000ca0
 800896c:	0800ac18 	.word	0x0800ac18
 8008970:	08007f75 	.word	0x08007f75

08008974 <atexit>:
 8008974:	2300      	movs	r3, #0
 8008976:	4601      	mov	r1, r0
 8008978:	461a      	mov	r2, r3
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff bf1c 	b.w	80087b8 <__register_exitproc>

08008980 <__libc_fini_array>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4c0a      	ldr	r4, [pc, #40]	; (80089ac <__libc_fini_array+0x2c>)
 8008984:	4d0a      	ldr	r5, [pc, #40]	; (80089b0 <__libc_fini_array+0x30>)
 8008986:	1b64      	subs	r4, r4, r5
 8008988:	10a4      	asrs	r4, r4, #2
 800898a:	d00a      	beq.n	80089a2 <__libc_fini_array+0x22>
 800898c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8008990:	3b01      	subs	r3, #1
 8008992:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8008996:	3c01      	subs	r4, #1
 8008998:	f855 3904 	ldr.w	r3, [r5], #-4
 800899c:	4798      	blx	r3
 800899e:	2c00      	cmp	r4, #0
 80089a0:	d1f9      	bne.n	8008996 <__libc_fini_array+0x16>
 80089a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a6:	f000 b965 	b.w	8008c74 <_fini>
 80089aa:	bf00      	nop
 80089ac:	08008c84 	.word	0x08008c84
 80089b0:	08008c80 	.word	0x08008c80

080089b4 <_malloc_trim_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	4f23      	ldr	r7, [pc, #140]	; (8008a48 <_malloc_trim_r+0x94>)
 80089ba:	4606      	mov	r6, r0
 80089bc:	f7ff fe66 	bl	800868c <__malloc_lock>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80089c6:	685d      	ldr	r5, [r3, #4]
 80089c8:	310f      	adds	r1, #15
 80089ca:	f025 0503 	bic.w	r5, r5, #3
 80089ce:	4429      	add	r1, r5
 80089d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80089d4:	f021 010f 	bic.w	r1, r1, #15
 80089d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80089dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80089e0:	db07      	blt.n	80089f2 <_malloc_trim_r+0x3e>
 80089e2:	2100      	movs	r1, #0
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff fe5d 	bl	80086a4 <_sbrk_r>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	442b      	add	r3, r5
 80089ee:	4298      	cmp	r0, r3
 80089f0:	d004      	beq.n	80089fc <_malloc_trim_r+0x48>
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff fe50 	bl	8008698 <__malloc_unlock>
 80089f8:	2000      	movs	r0, #0
 80089fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fc:	4261      	negs	r1, r4
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7ff fe50 	bl	80086a4 <_sbrk_r>
 8008a04:	3001      	adds	r0, #1
 8008a06:	d00d      	beq.n	8008a24 <_malloc_trim_r+0x70>
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <_malloc_trim_r+0x98>)
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	1b2d      	subs	r5, r5, r4
 8008a10:	f045 0501 	orr.w	r5, r5, #1
 8008a14:	4630      	mov	r0, r6
 8008a16:	1b09      	subs	r1, r1, r4
 8008a18:	6055      	str	r5, [r2, #4]
 8008a1a:	6019      	str	r1, [r3, #0]
 8008a1c:	f7ff fe3c 	bl	8008698 <__malloc_unlock>
 8008a20:	2001      	movs	r0, #1
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	2100      	movs	r1, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7ff fe3c 	bl	80086a4 <_sbrk_r>
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	1a83      	subs	r3, r0, r2
 8008a30:	2b0f      	cmp	r3, #15
 8008a32:	ddde      	ble.n	80089f2 <_malloc_trim_r+0x3e>
 8008a34:	4906      	ldr	r1, [pc, #24]	; (8008a50 <_malloc_trim_r+0x9c>)
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	680c      	ldr	r4, [r1, #0]
 8008a3c:	4903      	ldr	r1, [pc, #12]	; (8008a4c <_malloc_trim_r+0x98>)
 8008a3e:	1b00      	subs	r0, r0, r4
 8008a40:	6053      	str	r3, [r2, #4]
 8008a42:	6008      	str	r0, [r1, #0]
 8008a44:	e7d5      	b.n	80089f2 <_malloc_trim_r+0x3e>
 8008a46:	bf00      	nop
 8008a48:	20000890 	.word	0x20000890
 8008a4c:	20001ba4 	.word	0x20001ba4
 8008a50:	20000c98 	.word	0x20000c98

08008a54 <_free_r>:
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d053      	beq.n	8008b00 <_free_r+0xac>
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	f7ff fe15 	bl	800868c <__malloc_lock>
 8008a62:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8008a66:	4f71      	ldr	r7, [pc, #452]	; (8008c2c <_free_r+0x1d8>)
 8008a68:	f1a5 0108 	sub.w	r1, r5, #8
 8008a6c:	f02c 0301 	bic.w	r3, ip, #1
 8008a70:	18ca      	adds	r2, r1, r3
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	6854      	ldr	r4, [r2, #4]
 8008a76:	4290      	cmp	r0, r2
 8008a78:	f024 0403 	bic.w	r4, r4, #3
 8008a7c:	d053      	beq.n	8008b26 <_free_r+0xd2>
 8008a7e:	f01c 0f01 	tst.w	ip, #1
 8008a82:	6054      	str	r4, [r2, #4]
 8008a84:	eb02 0004 	add.w	r0, r2, r4
 8008a88:	d13b      	bne.n	8008b02 <_free_r+0xae>
 8008a8a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8008a8e:	6840      	ldr	r0, [r0, #4]
 8008a90:	eba1 010c 	sub.w	r1, r1, ip
 8008a94:	688d      	ldr	r5, [r1, #8]
 8008a96:	f107 0e08 	add.w	lr, r7, #8
 8008a9a:	4575      	cmp	r5, lr
 8008a9c:	4463      	add	r3, ip
 8008a9e:	f000 0001 	and.w	r0, r0, #1
 8008aa2:	d075      	beq.n	8008b90 <_free_r+0x13c>
 8008aa4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008aa8:	f8c5 c00c 	str.w	ip, [r5, #12]
 8008aac:	f8cc 5008 	str.w	r5, [ip, #8]
 8008ab0:	b360      	cbz	r0, 8008b0c <_free_r+0xb8>
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	604a      	str	r2, [r1, #4]
 8008ab8:	50cb      	str	r3, [r1, r3]
 8008aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abe:	d350      	bcc.n	8008b62 <_free_r+0x10e>
 8008ac0:	0a5a      	lsrs	r2, r3, #9
 8008ac2:	2a04      	cmp	r2, #4
 8008ac4:	d870      	bhi.n	8008ba8 <_free_r+0x154>
 8008ac6:	099a      	lsrs	r2, r3, #6
 8008ac8:	f102 0539 	add.w	r5, r2, #57	; 0x39
 8008acc:	00ed      	lsls	r5, r5, #3
 8008ace:	f102 0038 	add.w	r0, r2, #56	; 0x38
 8008ad2:	197c      	adds	r4, r7, r5
 8008ad4:	597a      	ldr	r2, [r7, r5]
 8008ad6:	3c08      	subs	r4, #8
 8008ad8:	4294      	cmp	r4, r2
 8008ada:	d078      	beq.n	8008bce <_free_r+0x17a>
 8008adc:	6850      	ldr	r0, [r2, #4]
 8008ade:	f020 0003 	bic.w	r0, r0, #3
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	d971      	bls.n	8008bca <_free_r+0x176>
 8008ae6:	6892      	ldr	r2, [r2, #8]
 8008ae8:	4294      	cmp	r4, r2
 8008aea:	d1f7      	bne.n	8008adc <_free_r+0x88>
 8008aec:	68e3      	ldr	r3, [r4, #12]
 8008aee:	e9c1 4302 	strd	r4, r3, [r1, #8]
 8008af2:	4630      	mov	r0, r6
 8008af4:	6099      	str	r1, [r3, #8]
 8008af6:	60e1      	str	r1, [r4, #12]
 8008af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008afc:	f7ff bdcc 	b.w	8008698 <__malloc_unlock>
 8008b00:	4770      	bx	lr
 8008b02:	6840      	ldr	r0, [r0, #4]
 8008b04:	f000 0001 	and.w	r0, r0, #1
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d1d2      	bne.n	8008ab2 <_free_r+0x5e>
 8008b0c:	6890      	ldr	r0, [r2, #8]
 8008b0e:	4d48      	ldr	r5, [pc, #288]	; (8008c30 <_free_r+0x1dc>)
 8008b10:	4423      	add	r3, r4
 8008b12:	42a8      	cmp	r0, r5
 8008b14:	f043 0401 	orr.w	r4, r3, #1
 8008b18:	d062      	beq.n	8008be0 <_free_r+0x18c>
 8008b1a:	68d2      	ldr	r2, [r2, #12]
 8008b1c:	60c2      	str	r2, [r0, #12]
 8008b1e:	6090      	str	r0, [r2, #8]
 8008b20:	604c      	str	r4, [r1, #4]
 8008b22:	50cb      	str	r3, [r1, r3]
 8008b24:	e7c9      	b.n	8008aba <_free_r+0x66>
 8008b26:	f01c 0f01 	tst.w	ip, #1
 8008b2a:	4423      	add	r3, r4
 8008b2c:	d107      	bne.n	8008b3e <_free_r+0xea>
 8008b2e:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8008b32:	1b09      	subs	r1, r1, r4
 8008b34:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
 8008b38:	4423      	add	r3, r4
 8008b3a:	60c2      	str	r2, [r0, #12]
 8008b3c:	6090      	str	r0, [r2, #8]
 8008b3e:	4a3d      	ldr	r2, [pc, #244]	; (8008c34 <_free_r+0x1e0>)
 8008b40:	f043 0001 	orr.w	r0, r3, #1
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	6048      	str	r0, [r1, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	d804      	bhi.n	8008b58 <_free_r+0x104>
 8008b4e:	4b3a      	ldr	r3, [pc, #232]	; (8008c38 <_free_r+0x1e4>)
 8008b50:	4630      	mov	r0, r6
 8008b52:	6819      	ldr	r1, [r3, #0]
 8008b54:	f7ff ff2e 	bl	80089b4 <_malloc_trim_r>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b5e:	f7ff bd9b 	b.w	8008698 <__malloc_unlock>
 8008b62:	2201      	movs	r2, #1
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	687c      	ldr	r4, [r7, #4]
 8008b68:	1098      	asrs	r0, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	4082      	lsls	r2, r0
 8008b6e:	4322      	orrs	r2, r4
 8008b70:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
 8008b74:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8008b78:	3808      	subs	r0, #8
 8008b7a:	e9c1 4002 	strd	r4, r0, [r1, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	4630      	mov	r0, r6
 8008b82:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
 8008b86:	60e1      	str	r1, [r4, #12]
 8008b88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b8c:	f7ff bd84 	b.w	8008698 <__malloc_unlock>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d145      	bne.n	8008c20 <_free_r+0x1cc>
 8008b94:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
 8008b98:	4423      	add	r3, r4
 8008b9a:	f043 0401 	orr.w	r4, r3, #1
 8008b9e:	60c2      	str	r2, [r0, #12]
 8008ba0:	6090      	str	r0, [r2, #8]
 8008ba2:	604c      	str	r4, [r1, #4]
 8008ba4:	50cb      	str	r3, [r1, r3]
 8008ba6:	e7d7      	b.n	8008b58 <_free_r+0x104>
 8008ba8:	2a14      	cmp	r2, #20
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x16a>
 8008bac:	2a54      	cmp	r2, #84	; 0x54
 8008bae:	d81e      	bhi.n	8008bee <_free_r+0x19a>
 8008bb0:	0b1a      	lsrs	r2, r3, #12
 8008bb2:	f102 056f 	add.w	r5, r2, #111	; 0x6f
 8008bb6:	00ed      	lsls	r5, r5, #3
 8008bb8:	f102 006e 	add.w	r0, r2, #110	; 0x6e
 8008bbc:	e789      	b.n	8008ad2 <_free_r+0x7e>
 8008bbe:	f102 055c 	add.w	r5, r2, #92	; 0x5c
 8008bc2:	00ed      	lsls	r5, r5, #3
 8008bc4:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8008bc8:	e783      	b.n	8008ad2 <_free_r+0x7e>
 8008bca:	4614      	mov	r4, r2
 8008bcc:	e78e      	b.n	8008aec <_free_r+0x98>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	1082      	asrs	r2, r0, #2
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	fa03 f202 	lsl.w	r2, r3, r2
 8008bd8:	4302      	orrs	r2, r0
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	4623      	mov	r3, r4
 8008bde:	e786      	b.n	8008aee <_free_r+0x9a>
 8008be0:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8008be4:	e9c1 0002 	strd	r0, r0, [r1, #8]
 8008be8:	604c      	str	r4, [r1, #4]
 8008bea:	50cb      	str	r3, [r1, r3]
 8008bec:	e7b4      	b.n	8008b58 <_free_r+0x104>
 8008bee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008bf2:	d806      	bhi.n	8008c02 <_free_r+0x1ae>
 8008bf4:	0bda      	lsrs	r2, r3, #15
 8008bf6:	f102 0578 	add.w	r5, r2, #120	; 0x78
 8008bfa:	00ed      	lsls	r5, r5, #3
 8008bfc:	f102 0077 	add.w	r0, r2, #119	; 0x77
 8008c00:	e767      	b.n	8008ad2 <_free_r+0x7e>
 8008c02:	f240 5054 	movw	r0, #1364	; 0x554
 8008c06:	4282      	cmp	r2, r0
 8008c08:	d806      	bhi.n	8008c18 <_free_r+0x1c4>
 8008c0a:	0c9a      	lsrs	r2, r3, #18
 8008c0c:	f102 057d 	add.w	r5, r2, #125	; 0x7d
 8008c10:	00ed      	lsls	r5, r5, #3
 8008c12:	f102 007c 	add.w	r0, r2, #124	; 0x7c
 8008c16:	e75c      	b.n	8008ad2 <_free_r+0x7e>
 8008c18:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 8008c1c:	207e      	movs	r0, #126	; 0x7e
 8008c1e:	e758      	b.n	8008ad2 <_free_r+0x7e>
 8008c20:	f043 0001 	orr.w	r0, r3, #1
 8008c24:	6048      	str	r0, [r1, #4]
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	e796      	b.n	8008b58 <_free_r+0x104>
 8008c2a:	bf00      	nop
 8008c2c:	20000890 	.word	0x20000890
 8008c30:	20000898 	.word	0x20000898
 8008c34:	20000c9c 	.word	0x20000c9c
 8008c38:	20001bd4 	.word	0x20001bd4

08008c3c <__retarget_lock_acquire_recursive>:
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <__retarget_lock_release_recursive>:
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop

08008c44 <_init>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr

08008c50 <__init_array_start>:
 8008c50:	08008879 	.word	0x08008879
 8008c54:	08002ec1 	.word	0x08002ec1

08008c58 <__frame_dummy_init_array_entry>:
 8008c58:	08000111 08000131 08000635 08002fed     ....1...5..../..
 8008c68:	08003241 08004441 08007ecd              A2..AD...~..

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr

08008c80 <__do_global_dtors_aux_fini_array_entry>:
 8008c80:	00ed 0800                                   ....
